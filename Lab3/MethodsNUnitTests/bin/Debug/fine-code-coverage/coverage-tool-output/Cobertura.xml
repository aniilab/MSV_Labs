<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE coverage SYSTEM "http://cobertura.sourceforge.net/xml/coverage-04.dtd">
<coverage line-rate="0.14041290863872" branch-rate="0.0795805501687855" lines-covered="4686" lines-valid="33373" branches-covered="1108" branches-valid="13923" complexity="13356" version="0" timestamp="1683761730">
  <sources />
  <packages>
    <package name="FluentAssertions" line-rate="0" branch-rate="0" complexity="4780">
      <classes>
        <class name="FluentAssertions.AggregateExceptionExtractor" filename="/_/Src/FluentAssertions/AggregateExceptionExtractor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OfType" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExtractedExceptions" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AndConstraint`1" filename="/_/Src/FluentAssertions/AndConstraint.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="And" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AndWhichConstraint`2" filename="/_/Src/FluentAssertions/AndWhichConstraint.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Which" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TParentConstraint,TMatchedElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TParentConstraint,System.Collections.Generic.IEnumerable`1&lt;TMatchedElement&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SingleOrDefault" signature="(System.Collections.Generic.IEnumerable`1&lt;TMatchedElement&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AssertionExtensions" filename="/_/Src/FluentAssertions/AssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Invoking" signature="(T,System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoking" signature="(T,System.Func`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(T,System.Func`2&lt;T,System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(T,System.Func`2&lt;T,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(T,System.Func`2&lt;T,System.Threading.Tasks.ValueTask&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(T,System.Func`2&lt;T,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTimeOf" signature="(T,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Action,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Specialized.ExecutionTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Xml.Linq.XDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Xml.Linq.XAttribute)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.IO.Stream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.IO.BufferedStream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(System.Func`1&lt;System.Collections.IEnumerable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(System.Func`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(T,System.Func`2&lt;T,System.Collections.Generic.IEnumerable`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForceEnumeration" signature="(System.Func`1&lt;System.Collections.IEnumerable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForceEnumeration" signature="(T,System.Func`2&lt;T,System.Collections.IEnumerable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Net.Http.HttpResponseMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Guid)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Data.DataTableCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Data.DataColumnCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.IComparable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.UInt32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Decimal&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Byte&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.SByte&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Int16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.UInt16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Int64&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.UInt64&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Single&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Double&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.TypeSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Reflection.ConstructorInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.MethodInfoSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.PropertyInfoSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Threading.Tasks.TaskCompletionSource`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Monitor" signature="(T,System.Func`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="As" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.ReferenceTypeAssertions`2&lt;TSubject,TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.BooleanAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.DateTimeAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.DateTimeOffsetAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Specialized.ExecutionTimeAssertions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.GuidAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.MethodInfoSelectorAssertions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Numeric.NumericAssertions`2&lt;TSubject,TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.PropertyInfoSelectorAssertions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.SimpleTimeSpanAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Specialized.TaskCompletionSourceAssertionsBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.TypeSelectorAssertions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.EnumAssertions`2&lt;TEnum,TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.DateTimeRangeAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.DateTimeOffsetRangeAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvalidShouldCall" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AssertionOptions" filename="/_/Src/FluentAssertions/AssertionOptions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="EquivalencyPlan" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormattingOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CloneDefaults" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CloneDefaults" signature="(System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions,TOptions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertEquivalencyUsing" signature="(System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions,FluentAssertions.Equivalency.EquivalencyAssertionOptions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AsyncAssertionsExtensions" filename="/_/Src/FluentAssertions/AsyncAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="WithResult" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithResult" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AtLeast" filename="/_/Src/FluentAssertions/AtLeast.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AtMost" filename="/_/Src/FluentAssertions/AtMost.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.AddNonEmptySymbolParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/AddNonEmptySymbolParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.AwaitParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/AwaitParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndsWithOurKeyword" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLongEnoughToContainOurKeyword" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.CallerStatementBuilder" filename="/_/Src/FluentAssertions/CallerIdentification/CallerStatementBuilder.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Append" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.MultiLineCommentParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/MultiLineCommentParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.QuotesParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/QuotesParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsVerbatim" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.SemicolonParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/SemicolonParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.ShouldCallParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/ShouldCallParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.SingleLineCommentParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/SingleLineCommentParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentifier" filename="/_/Src/FluentAssertions/CallerIdentifier.cs" line-rate="1" branch-rate="1" complexity="22">
          <methods>
            <method name="Logger" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Logger" signature="(System.Action`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DetermineCallerIdentity" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="OverrideStackSearchUsingCurrentScope" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnlyOneFluentAssertionScopeOnCallStack" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="IsCustomAssertion" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDynamic" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCurrentAssembly" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDotNet" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCompilerServices" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractVariableNameFrom" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSourceCodeStatementFrom" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSourceCodeStatementFrom" signature="(System.Diagnostics.StackFrame,System.IO.StreamReader,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartsWithNewKeyword" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsStringLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNumeric" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsBooleanLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SkipStackFrameCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericCollectionAssertions`1" filename="/_/Src/FluentAssertions/Collections/GenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericCollectionAssertions`2" filename="/_/Src/FluentAssertions/Collections/GenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericCollectionAssertions`3" filename="/_/Src/FluentAssertions/Collections/GenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeOfType" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.Func`3&lt;T,T,System.Int32&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.Func`3&lt;T,T,System.Int32&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNullOrEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSubsetOf" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainEquivalentOf" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainEquivalentOf" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainInOrder" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainInOrder" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainInConsecutiveOrder" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainInConsecutiveOrder" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainItemsAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainSingle" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainSingle" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWith" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`3&lt;T,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWith" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`3&lt;T,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCount" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCount" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Int32,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountGreaterThanOrEqualTo" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountGreaterOrEqualTo" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountGreaterThan" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountLessThanOrEqualTo" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountLessOrEqualTo" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountLessThan" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElementAt" signature="(System.Int32,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElementPreceding" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElementSucceeding" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IntersectWith" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.Func`3&lt;T,T,System.Int32&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.Func`3&lt;T,T,System.Int32&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNullOrEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSubsetOf" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainEquivalentOf" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainEquivalentOf" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainInOrder" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainInOrder" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainInConsecutiveOrder" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainInConsecutiveOrder" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainNulls" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TKey&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainNulls" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveCount" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotIntersectWith" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnlyContain" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnlyHaveUniqueItems" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TKey&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnlyHaveUniqueItems" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllSatisfy" signature="(System.Action`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SatisfyRespectively" signature="(System.Action`1&lt;T&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SatisfyRespectively" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Action`1&lt;T&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Satisfy" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Satisfy" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWith" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`3&lt;T,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWith" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOrderedBy" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOrderedEnumerable" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RepeatAsManyAs" signature="(TExpectation,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionEndsWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TActual&gt;,System.Collections.Generic.ICollection`1&lt;TExpectation&gt;,System.Func`3&lt;TActual,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionStartsWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TActual&gt;,System.Collections.Generic.ICollection`1&lt;TExpectation&gt;,System.Func`3&lt;TActual,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSubjectEquality" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`3&lt;T,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExpressionOrderString" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetType" signature="(TType)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasPredecessor" signature="(T,TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasSuccessor" signature="(T,TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PredecessorOf" signature="(T,TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SuccessorOf" signature="(T,TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectFailuresFromInspectors" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsValidProperty" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOrderedBy" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndexOf" signature="(System.Collections.Generic.IList`1&lt;T&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsecutiveItemCount" signature="(System.Collections.Generic.IList`1&lt;T&gt;,System.Collections.Generic.IList`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetComparer" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="RepeatAsManyAsIterator" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericDictionaryAssertions`3" filename="/_/Src/FluentAssertions/Collections/GenericDictionaryAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericDictionaryAssertions`4" filename="/_/Src/FluentAssertions/Collections/GenericDictionaryAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainKey" signature="(TKey,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainKeys" signature="(TKey[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TKey&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainKey" signature="(TKey,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainKeys" signature="(TKey[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TKey&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainValue" signature="(TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainValues" signature="(TValue[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainValues" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainValuesAndWhich" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RepetitionPreservingIntersect" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Collections.Generic.IEnumerable`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainValue" signature="(TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainValues" signature="(TValue[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainValues" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(TKey,TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(TKey,TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetKeys" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetKeys" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValues" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsKey" signature="(TCollection,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetValue" signature="(TCollection,TKey,TValue&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(TCollection,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(T,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.Element`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/Element.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Index" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TValue,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.MaximumMatchingProblem`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/MaximumMatchingProblem.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Predicates" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Elements" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TValue,System.Boolean&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Solve" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolution`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/MaximumMatchingSolution.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="UnmatchedPredicatesExist" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnmatchedElementsExist" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Collections.MaximumMatching.MaximumMatchingProblem`1&lt;TValue&gt;,System.Collections.Generic.Dictionary`2&lt;FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;,FluentAssertions.Collections.MaximumMatching.Element`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetUnmatchedPredicates" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetUnmatchedElements" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolver`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/MaximumMatchingSolver.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Collections.MaximumMatching.MaximumMatchingProblem`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Solve" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="FindMatchForPredicate" signature="(FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;,FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolver`1/MatchCollection&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingElements" signature="(FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateFrom" signature="(System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolver`1/Match&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchedPredicate" signature="(FluentAssertions.Collections.MaximumMatching.Element`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(FluentAssertions.Collections.MaximumMatching.Element`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;,FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolver`1/MatchCollection&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryDequeueUnMatchedPredicate" signature="(FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReassignElement" signature="(FluentAssertions.Collections.MaximumMatching.Element`1&lt;TValue&gt;,FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchChain" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.Predicate`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/Predicate.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Index" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TValue,System.Boolean&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.StringCollectionAssertions" filename="/_/Src/FluentAssertions/Collections/StringCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.StringCollectionAssertions`1" filename="/_/Src/FluentAssertions/Collections/StringCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.StringCollectionAssertions`2" filename="/_/Src/FluentAssertions/Collections/StringCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;System.String&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;System.String&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBe" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBe" signature="(System.String,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;System.String&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;System.String&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainMatch" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsMatch" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllThatMatch" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainMatch" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainsMatch" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.SubsequentOrderingAssertions`1" filename="/_/Src/FluentAssertions/Collections/SubsequentOrderingAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Linq.IOrderedEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.SubsequentOrderingGenericCollectionAssertions`2" filename="/_/Src/FluentAssertions/Collections/SubsequentOrderingGenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection,System.Linq.IOrderedEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.SubsequentOrderingGenericCollectionAssertions`3" filename="/_/Src/FluentAssertions/Collections/SubsequentOrderingGenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection,System.Linq.IOrderedEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeOrderedBy" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOrderedEnumerable" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.WhoseValueConstraint`4" filename="/_/Src/FluentAssertions/Collections/WhoseValueConstraint.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WhoseValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TAssertions,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.AppSettingsConfigurationStore" filename="/_/Src/FluentAssertions/Common/AppSettingsConfigurationStore.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetSetting" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Clock" filename="/_/Src/FluentAssertions/Common/Clock.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Delay" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayAsync" signature="(System.TimeSpan,System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartTimer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Configuration" filename="/_/Src/FluentAssertions/Common/Configuration.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueFormatterDetectionMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueFormatterDetectionMode" signature="(FluentAssertions.Common.ValueFormatterDetectionMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueFormatterAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueFormatterAssembly" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Common.IConfigurationStore)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DetermineFormatterDetectionMode" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ConfigurationStoreExceptionInterceptor" filename="/_/Src/FluentAssertions/Common/ConfigurationStoreExceptionInterceptor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Common.IConfigurationStore)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSetting" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.CSharpAccessModifierExtensions" filename="/_/Src/FluentAssertions/Common/CSharpAccessModifierExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetCSharpAccessModifier" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCSharpAccessModifier" signature="(System.Reflection.FieldInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCSharpAccessModifier" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.DateTimeExtensions" filename="/_/Src/FluentAssertions/Common/DateTimeExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ToDateTimeOffset" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDateTimeOffset" signature="(System.DateTime,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.DictionaryHelpers" filename="/_/Src/FluentAssertions/Common/DictionaryHelpers.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetKeys" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValues" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsKey" signature="(TCollection,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetValue" signature="(TCollection,TKey,TValue&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(TCollection,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.EnumerableExtensions" filename="/_/Src/FluentAssertions/Common/EnumerableExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ConvertOrCastToCollection" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertOrCastToList" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndexOfFirstDifferenceWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TFirst&gt;,System.Collections.Generic.IEnumerable`1&lt;TSecond&gt;,System.Func`3&lt;TFirst,TSecond,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ExceptionExtensions" filename="/_/Src/FluentAssertions/Common/ExceptionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Unwrap" signature="(System.Reflection.TargetInvocationException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ExpressionExtensions" filename="/_/Src/FluentAssertions/Common/ExpressionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetPropertyInfo" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttemptToGetMemberInfoFromExpression" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMemberPath" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TDeclaringType,TPropertyType&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateMemberPath" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TDeclaringType,TPropertyType&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetUnsupportedExpressionMessage" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.FullFrameworkReflector" filename="/_/Src/FluentAssertions/Common/FullFrameworkReflector.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetAllTypesFromAppDomain" signature="(System.Func`2&lt;System.Reflection.Assembly,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRelevant" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDynamic" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExportedTypes" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Guard" filename="/_/Src/FluentAssertions/Common/Guard.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ThrowIfArgumentIsNull" signature="(T,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNull" signature="(T,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNullOrEmpty" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNullOrEmpty" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsOutOfRange" signature="(T,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentContainsNull" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsEmpty" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsEmpty" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNegative" signature="(System.TimeSpan,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNegative" signature="(System.Single,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNegative" signature="(System.Double,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNegative" signature="(System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.IntegerExtensions" filename="/_/Src/FluentAssertions/Common/IntegerExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsConsecutiveTo" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Iterator`1" filename="/_/Src/FluentAssertions/Common/Iterator.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="Index" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Index" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFirst" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLast" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="em.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Current" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasReachedMaxItems" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="FetchCurrent" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="PrefetchNext" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.MemberPath" filename="/_/Src/FluentAssertions/Common/MemberPath.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Segments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MemberName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IMember,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsParentOrChildOf" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSameAs" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsParentOf" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsChildOf" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsParentCollectionOf" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEquivalentTo" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasSameParentAs" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParentSegments" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetContainsSpecificCollectionIndex" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithCollectionAsRoot" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.MemberPathSegmentEqualityComparer" filename="/_/Src/FluentAssertions/Common/MemberPathSegmentEqualityComparer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Equals" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIndexQualifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.MethodInfoExtensions" filename="/_/Src/FluentAssertions/Common/MethodInfoExtensions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IsAsync" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingAttributes" signature="(System.Reflection.MemberInfo,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNonVirtual" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RecreateMethodImplAttribute" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ObjectExtensions" filename="/_/Src/FluentAssertions/Common/ObjectExtensions.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="GetComparer" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="CompareNumerics" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanConvert" signature="(System.Object,System.Object,System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertTo" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNumericType" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.PropertyInfoExtensions" filename="/_/Src/FluentAssertions/Common/PropertyInfoExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsVirtual" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsStatic" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAbstract" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ReadOnlyNonGenericCollectionWrapper" filename="/_/Src/FluentAssertions/Common/ReadOnlyNonGenericCollectionWrapper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Create" signature="(System.Data.DataTableCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Data.DataColumnCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ReadOnlyNonGenericCollectionWrapper`2" filename="/_/Src/FluentAssertions/Common/ReadOnlyNonGenericCollectionWrapper.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="UnderlyingCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="em.Collections.Generic.ICollection&lt;TItem&gt;.get_IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Contains" signature="(TItem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CopyTo" signature="(TItem[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;TItem&gt;.Add" signature="(TItem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;TItem&gt;.Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;TItem&gt;.Remove" signature="(TItem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Services" filename="/_/Src/FluentAssertions/Common/Services.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="ConfigurationStore" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigurationStore" signature="(FluentAssertions.Common.IConfigurationStore)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Configuration" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowException" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowException" signature="(System.Action`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reflector" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reflector" signature="(FluentAssertions.Common.IReflector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ResetToDefaults" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.StopwatchTimer" filename="/_/Src/FluentAssertions/Common/StopwatchTimer.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Elapsed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.StringExtensions" filename="/_/Src/FluentAssertions/Common/StringExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IndexOfFirstMismatch" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCharComparer" signature="(System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndexedSegmentAt" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutSpecificCollectionIndices" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsSpecificCollectionIndex" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EscapePlaceholders" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnescapePlaceholders" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Combine" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Capitalize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndentLines" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveNewLines" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CountSubstring" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.TypeExtensions" filename="/_/Src/FluentAssertions/Common/TypeExtensions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IsDecoratedWith" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWith" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWithOrInherit" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWithOrInherit" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWith" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWith" signature="(System.Reflection.MemberInfo,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWithOrInherit" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingAttributes" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingAttributes" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingOrInheritedAttributes" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingOrInheritedAttributes" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Reflection.MemberInfo,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Reflection.MemberInfo,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Type,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEquivalentTo" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.IMember)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetClosedGenericInterfaces" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OverridesEquals" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindProperty" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindField" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNonPrivateMembers" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNonPrivateProperties" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNonPrivateFields" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTypeReflectorFor" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCSharpAbstract" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCSharpSealed" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCSharpStatic" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethod" signature="(System.Type,System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasMethod" signature="(System.Type,System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterlessMethod" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindPropertyByName" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasExplicitlyImplementedProperty" signature="(System.Type,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasParameterlessMethod" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetIndexerByParameterTypes" signature="(System.Type,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIndexer" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetConstructor" signature="(System.Type,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetConversionOperators" signature="(System.Type,System.Type,System.Type,System.Func`2&lt;System.String,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAssignableToOpenGeneric" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsImplementationOfOpenGeneric" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDerivedFromOpenGeneric" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsUnderNamespace" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSameOrInherits" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExplicitConversionOperator" signature="(System.Type,System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetImplicitConversionOperator" signature="(System.Type,System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasValueSemantics" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsTuple" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAnonymousType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecord" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecordClass" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecordStruct" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsKeyValuePair" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NullableOrActualType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.TypeMemberReflector" filename="/_/Src/FluentAssertions/Common/TypeMemberReflector.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="NonPrivateMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NonPrivateProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NonPrivateFields" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LoadNonPrivateProperties" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPropertiesFromHierarchy" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LoadNonPrivateFields" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFieldsFromHierarchy" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromHierarchy" signature="(System.Type,System.Func`2&lt;System.Type,System.Collections.Generic.IEnumerable`1&lt;TMemberInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInterfaceMembers" signature="(System.Type,System.Func`2&lt;System.Type,System.Collections.Generic.IEnumerable`1&lt;TMemberInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetClassMembers" signature="(System.Type,System.Func`2&lt;System.Type,System.Collections.Generic.IEnumerable`1&lt;TMemberInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasNonPrivateGetter" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataColumnAssertions" filename="/_/Src/FluentAssertions/Data/DataColumnAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataColumn,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataColumn,System.Func`2&lt;FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataColumn&gt;,FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataColumn&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataEquivalencyAssertionOptions`1" filename="/_/Src/FluentAssertions/Data/DataEquivalencyAssertionOptions.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="AllowMismatchedTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowMismatchedTypes" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreUnmatchedColumns" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreUnmatchedColumns" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeOriginalData" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeOriginalData" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RowMatchMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RowMatchMode" signature="(FluentAssertions.Data.RowMatchMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeTableNames" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeColumnNames" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.EquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowingMismatchedTypes" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IgnoringUnmatchedColumns" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="UsingRowMatchMode" signature="(FluentAssertions.Data.RowMatchMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingOriginalData" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Excluding" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.DataRelation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.DataTable,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.DataColumn,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.DataRow,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.Constraint,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.ForeignKeyConstraint,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.UniqueConstraint,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeMemberOfRelatedTypeByGeneratedPredicate" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TDeclaringType,TPropertyType&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeMemberOfSubtypeOfRelatedTypeByGeneratedPredicate" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TDeclaringType,TPropertyType&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMemberAccessTargetMember" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BuildMemberSelectionPredicate" signature="(System.Type,System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Excluding" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingTable" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingTables" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingTables" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumnInAllTables" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumnsInAllTables" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumnsInAllTables" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumn" signature="(System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumns" signature="(System.Data.DataColumn[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumns" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Data.DataColumn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumn" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumns" signature="(System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumns" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShouldExcludeColumn" signature="(System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataRowAssertions`1" filename="/_/Src/FluentAssertions/Data/DataRowAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDataRow)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumn" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumns" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumns" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataRow,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataRow,System.Func`2&lt;FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataRow&gt;,FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataRow&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataSetAssertions`1" filename="/_/Src/FluentAssertions/Data/DataSetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDataSet)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveTableCount" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveTable" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveTables" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveTables" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataSet,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataSet,System.Func`2&lt;FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;,FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataTableAssertions`1" filename="/_/Src/FluentAssertions/Data/DataTableAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDataTable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveRowCount" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumn" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumns" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumns" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataTable,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataTable,System.Func`2&lt;FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataTable&gt;,FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataTable&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataColumnCollectionAssertionExtensions" filename="/_/Src/FluentAssertions/DataColumnCollectionAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataColumn&gt;,System.Data.DataColumnCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataColumn&gt;,System.Data.DataColumnCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataColumn&gt;,System.Data.DataColumnCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataColumn&gt;,System.Data.DataColumnCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataRowAssertionExtensions" filename="/_/Src/FluentAssertions/DataRowAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(TDataRow)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataRowCollectionAssertionExtensions" filename="/_/Src/FluentAssertions/DataRowCollectionAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataRow&gt;,System.Data.DataRowCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataRow&gt;,System.Data.DataRowCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataRow&gt;,System.Data.DataRowCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataRow&gt;,System.Data.DataRowCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataSetAssertionExtensions" filename="/_/Src/FluentAssertions/DataSetAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(TDataSet)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataTableAssertionExtensions" filename="/_/Src/FluentAssertions/DataTableAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(TDataTable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataTableCollectionAssertionExtensions" filename="/_/Src/FluentAssertions/DataTableCollectionAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataTableCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataTableCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataSet,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataSet,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataTableCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataTableCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Disposable" filename="/_/Src/FluentAssertions/Disposable.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.EnumAssertionsExtensions" filename="/_/Src/FluentAssertions/EnumAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(TEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;TEnum&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Comparands" filename="/_/Src/FluentAssertions/Equivalency/Comparands.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subject" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expectation" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileTimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileTimeType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExpectedType" signature="(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.ConversionSelector" filename="/_/Src/FluentAssertions/Equivalency/ConversionSelector.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.List`1&lt;FluentAssertions.Equivalency.ConversionSelector/ConversionSelectorRule&gt;,System.Collections.Generic.List`1&lt;FluentAssertions.Equivalency.ConversionSelector/ConversionSelectorRule&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludeAll" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Include" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exclude" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RequiresConversion" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Predicate" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Digit" filename="/_/Src/FluentAssertions/Equivalency/Digit.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name=".ctor" signature="(System.Int32,FluentAssertions.Equivalency.Digit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetIndices" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Increment" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyAssertionOptions" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyAssertionOptions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyAssertionOptions`1" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyAssertionOptions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Excluding" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="For" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Collections.Generic.IEnumerable`1&lt;TNext&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Including" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithStrictOrderingFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutStrictOrderingFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsCollection" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithMapping" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TSubject,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithMapping" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithMapping" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TNestedExpectation,System.Object&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TNestedSubject,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithMapping" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyStep`1" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyValidationContext" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyValidationContext.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="CurrentNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reason" signature="(FluentAssertions.Execution.Reason)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tracer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Options" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CyclicReferenceDetector" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CyclicReferenceDetector" signature="(FluentAssertions.Equivalency.Execution.CyclicReferenceDetector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="(FluentAssertions.Equivalency.Tracing.ITraceWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsNestedMember" signature="(FluentAssertions.Equivalency.IMember)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsCollectionItem" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsDictionaryItem" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsCyclicReference" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyValidator" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyValidator.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssertEquality" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.EquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RecursivelyAssertEquality" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShouldContinueThisDeep" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TrackWhatIsNeededToProvideContextToFailures" signature="(FluentAssertions.Execution.AssertionScope,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryToProveNodesAreEquivalent" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Execution.CollectionMemberAssertionOptionsDecorator" filename="/_/Src/FluentAssertions/Equivalency/Execution/CollectionMemberAssertionOptionsDecorator.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SelectionRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrderingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConversionSelector" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UserEquivalencySteps" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecursive" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowInfiniteRecursion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CyclicReferenceHandling" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumEquivalencyHandling" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseRuntimeTyping" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedFields" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreNonBrowsableOnSubject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeNonBrowsableOnExpectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareRecordsByValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEqualityStrategy" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Execution.CyclicReferenceDetector" filename="/_/Src/FluentAssertions/Equivalency/Execution/CyclicReferenceDetector.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="IsCyclicReference" signature="(FluentAssertions.Equivalency.Execution.ObjectReference,FluentAssertions.Equivalency.CyclicReferenceHandling,FluentAssertions.Execution.Reason)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Execution.ObjectInfo" filename="/_/Src/FluentAssertions/Equivalency/Execution/ObjectInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileTimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Execution.ObjectReference" filename="/_/Src/FluentAssertions/Equivalency/Execution/ObjectReference.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="CompareByMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.String,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPathElements" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="IsParentOrChildOf" signature="(FluentAssertions.Equivalency.Execution.ObjectReference)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Field" filename="/_/Src/FluentAssertions/Equivalency/Field.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReflectedType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeclaringType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeclaringType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsBrowsable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.FieldInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.FieldInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Matching.MappedMemberMatchingRule`2" filename="/_/Src/FluentAssertions/Equivalency/Matching/MappedMemberMatchingRule.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Matching.MappedPathMatchingRule" filename="/_/Src/FluentAssertions/Equivalency/Matching/MappedPathMatchingRule.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Matching.MustMatchByNameRule" filename="/_/Src/FluentAssertions/Equivalency/Matching/MustMatchByNameRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Match" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectationImplementsMemberExplicitly" signature="(System.Object,FluentAssertions.Equivalency.IMember)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Matching.TryMatchByNameRule" filename="/_/Src/FluentAssertions/Equivalency/Matching/TryMatchByNameRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Match" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.MemberFactory" filename="/_/Src/FluentAssertions/Equivalency/MemberFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Create" signature="(System.Reflection.MemberInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(System.Object,System.String,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.MemberSelectionContext" filename="/_/Src/FluentAssertions/Equivalency/MemberSelectionContext.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IncludedProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedFields" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/MultiDimensionalArrayEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BuildDigitsRepresentingAllIndices" signature="(System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AreComparable" signature="(FluentAssertions.Equivalency.Comparands,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsArray" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameDimensions" signature="(System.Object,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameRank" signature="(System.Object,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.NestedExclusionOptionBuilder`2" filename="/_/Src/FluentAssertions/Equivalency/NestedExclusionOptionBuilder.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.Selection.ExcludeMemberByPathSelectionRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exclude" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TCurrent,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="For" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TCurrent,System.Collections.Generic.IEnumerable`1&lt;TNext&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Node" filename="/_/Src/FluentAssertions/Equivalency/Node.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="GetSubjectId" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSubjectId" signature="(FluentAssertions.Equivalency.GetSubjectId)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PathAndName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRoot" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFirstIndex" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RootIsCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RootIsCollection" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Depth" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCollection" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="From" signature="(FluentAssertions.Equivalency.GetSubjectId)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromCollectionItem" signature="(System.String,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromDictionaryItem" signature="(System.Object,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(FluentAssertions.Equivalency.Node)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.ByteArrayOrderingRule" filename="/_/Src/FluentAssertions/Equivalency/Ordering/ByteArrayOrderingRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.CollectionMemberObjectInfo" filename="/_/Src/FluentAssertions/Equivalency/Ordering/CollectionMemberObjectInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileTimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAdjustedPropertyPath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.CollectionMemberOrderingRuleDecorator" filename="/_/Src/FluentAssertions/Equivalency/Ordering/CollectionMemberOrderingRuleDecorator.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IOrderingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.MatchAllOrderingRule" filename="/_/Src/FluentAssertions/Equivalency/Ordering/MatchAllOrderingRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.PathBasedOrderingRule" filename="/_/Src/FluentAssertions/Equivalency/Ordering/PathBasedOrderingRule.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Invert" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invert" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsIndexingQualifiers" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveInitialIndexQualifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.PredicateBasedOrderingRule" filename="/_/Src/FluentAssertions/Equivalency/Ordering/PredicateBasedOrderingRule.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Invert" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invert" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.OrderingRuleCollection" filename="/_/Src/FluentAssertions/Equivalency/OrderingRuleCollection.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IOrderingRule&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="(FluentAssertions.Equivalency.IOrderingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsOrderingStrictFor" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Property" filename="/_/Src/FluentAssertions/Equivalency/Property.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DeclaringType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReflectedType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsBrowsable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.PropertyInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.PropertyInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.AllFieldsSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/AllFieldsSelectionRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.AllPropertiesSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/AllPropertiesSelectionRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.CollectionMemberSelectionRuleDecorator" filename="/_/Src/FluentAssertions/Equivalency/Selection/CollectionMemberSelectionRuleDecorator.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IMemberSelectionRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.ExcludeMemberByPathSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/ExcludeMemberByPathSelectionRule.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrRemoveMembersFrom" signature="(System.Collections.Generic.List`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.INode,System.String,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendPath" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.ExcludeMemberByPredicateSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/ExcludeMemberByPredicateSelectionRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.ExcludeNonBrowsableMembersRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/ExcludeNonBrowsableMembersRule.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.IncludeMemberByPathSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/IncludeMemberByPathSelectionRule.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrRemoveMembersFrom" signature="(System.Collections.Generic.List`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.INode,System.String,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.IncludeMemberByPredicateSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/IncludeMemberByPredicateSelectionRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.MemberToMemberInfoAdapter" filename="/_/Src/FluentAssertions/Equivalency/Selection/MemberToMemberInfoAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeclaringType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IMember)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.SelectMemberByPathSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/SelectMemberByPathSelectionRule.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveRootIndexQualifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1" filename="/_/Src/FluentAssertions/Equivalency/SelfReferenceEquivalencyAssertionOptions.cs" line-rate="1" branch-rate="1" complexity="68">
          <methods>
            <method name="OrderingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_MatchingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_UserEquivalencySteps" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConversionSelector" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_OrderingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_IsRecursive" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_AllowInfiniteRecursion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_CyclicReferenceHandling" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_EnumEquivalencyHandling" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_UseRuntimeTyping" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_IncludedProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_IncludedFields" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_IgnoreNonBrowsableOnSubject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_ExcludeNonBrowsableOnExpectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareRecordsByValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="(FluentAssertions.Equivalency.Tracing.ITraceWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Equivalency.IEquivalencyAssertionOptions.GetEqualityStrategy" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludingAllDeclaredProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingAllRuntimeProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingFields" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingInternalFields" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExcludingFields" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingInternalProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExcludingProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExcludingNonBrowsableMembers" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IgnoringNonBrowsableMembersOnSubject" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RespectingRuntimeTypes" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RespectingDeclaredTypes" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Excluding" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Including" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingMissingMembers" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThrowingOnMissingMembers" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Using" signature="(System.Action`1&lt;FluentAssertions.Equivalency.IAssertionContext`1&lt;TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludingNestedObjects" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExcludingNestedObjects" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IgnoringCyclicReferences" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AllowingInfiniteRecursion" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithoutSelectionRules" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithoutMatchingRules" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Using" signature="(FluentAssertions.Equivalency.IMemberSelectionRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="(FluentAssertions.Equivalency.IMemberMatchingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="(FluentAssertions.Equivalency.IOrderingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="(FluentAssertions.Equivalency.IEquivalencyStep)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Using" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithStrictOrdering" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithStrictOrderingFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutStrictOrdering" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithoutStrictOrderingFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ComparingEnumsByName" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingEnumsByValue" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingRecordsByValue" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingRecordsByMembers" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingByMembers" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingByMembers" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ComparingByValue" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingByValue" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithTracing" signature="(FluentAssertions.Equivalency.Tracing.ITraceWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithAutoConversion" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithAutoConversionFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutAutoConversionFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="19">
              <lines />
            </method>
            <method name="RemoveSelectionRule" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="AddSelectionRule" signature="(FluentAssertions.Equivalency.IMemberSelectionRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMatchingRule" signature="(FluentAssertions.Equivalency.IMemberMatchingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrderingRule" signature="(FluentAssertions.Equivalency.IOrderingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddEquivalencyStep" signature="(FluentAssertions.Equivalency.IEquivalencyStep)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSelf,System.Action`1&lt;FluentAssertions.Equivalency.IAssertionContext`1&lt;TMember&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhenTypeIs" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="When" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions-Equivalency-IEquivalencyAssertionOptions-get_SelectionRules" signature="()" line-rate="1" branch-rate="1" complexity="13">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.AssertionContext`1" filename="/_/Src/FluentAssertions/Equivalency/Steps/AssertionContext.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SelectedNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Because" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Because" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseArgs" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseArgs" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.INode,TSubject,TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFrom" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.AssertionResultSet" filename="/_/Src/FluentAssertions/Equivalency/Steps/AssertionResultSet.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="AddSet" signature="(System.Object,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectClosestMatchFor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetBestResultSets" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ContainsSuccessfulSet" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.AssertionRuleEquivalencyStep`1" filename="/_/Src/FluentAssertions/Equivalency/Steps/AssertionRuleEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;,System.Action`1&lt;FluentAssertions.Equivalency.IAssertionContext`1&lt;TSubject&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppliesTo" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteAssertion" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanBeNull" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.AutoConversionStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/AutoConversionStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryChangeType" signature="(System.Object,System.Type,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.ConstraintCollectionEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/ConstraintCollectionEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.ConstraintEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/ConstraintEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareCommonProperties" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Data.Constraint,System.Data.Constraint,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareConstraints" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.UniqueConstraint,System.Data.UniqueConstraint,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareConstraints" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.ForeignKeyConstraint,System.Data.ForeignKeyConstraint,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareConstraintColumns" signature="(System.Data.DataColumn[],System.Data.DataColumn[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.INode,System.Object,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataColumnEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataColumnEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareSubjectAndExpectationOfTypeDataColumn" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareMember" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataRelationEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataRelationEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareScalarProperties" signature="(System.Data.DataRelation,System.Data.DataRelation,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareCollections" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareRelationConstraints" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataRelation,System.Data.DataRelation,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareDataRelationConstraints" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.DataRelation,System.Data.DataRelation,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func`2&lt;System.Data.DataRelation,System.Data.DataColumn[]&gt;,System.Func`2&lt;System.Data.DataRelation,System.Data.DataTable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareDataRelationColumns" signature="(System.Data.DataRelation,System.Data.DataRelation,System.Func`2&lt;System.Data.DataRelation,System.Data.DataColumn[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareDataRelationTable" signature="(System.Data.DataRelation,System.Data.DataRelation,System.Func`2&lt;System.Data.DataRelation,System.Data.DataTable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareDataRelationKeyConstraint" signature="(System.Data.DataRelation,System.Data.DataRelation,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.INode,System.Object,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataRowCollectionEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataRowCollectionEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRowsByIndexAndCompare" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataRowCollection,System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRowsByPrimaryKeyAndCompare" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.DataRowCollection,System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GatherPrimaryKeyColumnTypes" signature="(System.Data.DataTable,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ComparePrimaryKeyTypes" signature="(System.Type[],System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GatherRowsByPrimaryKeyAndCompareData" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.DataRowCollection,System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractPrimaryKey" signature="(System.Data.DataRow)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(FluentAssertions.Equivalency.Steps.DataRowCollectionEquivalencyStep/CompoundKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataRowEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataRowEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareScalarProperties" signature="(System.Data.DataRow,System.Data.DataRow,FluentAssertions.Equivalency.Steps.DataRowEquivalencyStep/SelectedDataRowMembers)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareFieldValues" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataRow,System.Data.DataRow,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataTable&gt;,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataRow&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareFieldValue" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataRow,System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion,System.Data.DataColumn,System.Data.DataRowVersion)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HasErrors" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasErrors" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RowState" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RowState" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataSetEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataSetEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareScalarProperties" signature="(System.Data.DataSet,System.Data.DataSet,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareCollections" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Data.DataSet,System.Data.DataSet,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareExtendedProperties" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTables" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataSet,System.Data.DataSet,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTable" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataSet,System.Data.DataSet,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataTableEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataTableEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareScalarProperties" signature="(System.Data.DataTable,System.Data.DataTable,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareCollections" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DictionaryEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DictionaryEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreconditionsAreMet" signature="(System.Collections.IDictionary,System.Collections.IDictionary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertEitherIsNotNull" signature="(System.Collections.IDictionary,System.Collections.IDictionary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertIsDictionary" signature="(System.Collections.IDictionary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSameLength" signature="(System.Collections.IDictionary,System.Collections.IDictionary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo" filename="/_/Src/FluentAssertions/Equivalency/Steps/DictionaryInterfaceInfo.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Key" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetFrom" signature="(System.Type,System.String,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetFromWithKey" signature="(System.Type,System.String,System.Type,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDictionaryInterfacesFrom" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryConvertFrom" signature="(System.Object,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToDictionaryInternal" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EnumEqualityStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/EnumEqualityStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleByValue" signature="(FluentAssertions.Equivalency.Comparands)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleByName" signature="(FluentAssertions.Equivalency.Comparands)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDisplayNameForEnumComparison" signature="(System.Object,System.Nullable`1&lt;System.Decimal&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractDecimal" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EnumerableEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/EnumerableEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSubjectIsCollection" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCollection" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EnumerableEquivalencyValidator" filename="/_/Src/FluentAssertions/Equivalency/Steps/EnumerableEquivalencyValidator.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Recursive" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Recursive" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrderingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrderingRules" signature="(FluentAssertions.Equivalency.OrderingRuleCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(System.Object[],T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertIsNotNull" signature="(System.Object,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionsHaveSameCount" signature="(System.Collections.Generic.ICollection`1&lt;System.Object&gt;,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertElementGraphEquivalency" signature="(System.Object[],T[],FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertElementGraphEquivalencyWithStrictOrdering" signature="(System.Object[],T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertElementGraphEquivalencyWithLooseOrdering" signature="(System.Object[],T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LooselyMatchAgainst" signature="(System.Collections.Generic.IList`1&lt;System.Object&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryToMatch" signature="(System.Object,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StrictlyMatchAgainst" signature="(System.Object[],T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EnumerableEquivalencyValidatorExtensions" filename="/_/Src/FluentAssertions/Equivalency/Steps/EnumerableEquivalencyValidatorExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssertEitherCollectionIsNotEmpty" signature="(FluentAssertions.Execution.IAssertionScope,System.Collections.Generic.ICollection`1&lt;System.Object&gt;,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasEnoughItems" signature="(FluentAssertions.Execution.IAssertionScope,System.Collections.Generic.ICollection`1&lt;System.Object&gt;,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasNotTooManyItems" signature="(FluentAssertions.Execution.IAssertionScope,System.Collections.Generic.ICollection`1&lt;System.Object&gt;,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EqualityComparerEquivalencyStep`1" filename="/_/Src/FluentAssertions/Equivalency/Steps/EqualityComparerEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EquivalencyValidationContextExtensions" filename="/_/Src/FluentAssertions/Equivalency/Steps/EquivalencyValidationContextExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AsCollectionItem" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.GenericDictionaryEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/GenericDictionaryEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSubjectIsNotNull" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertExpectationIsNotNull" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsureSubjectIsDictionary" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSameLength" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSameLength" signature="(System.Collections.Generic.IDictionary`2&lt;TSubjectKey,TSubjectValue&gt;,System.Collections.Generic.IDictionary`2&lt;TExpectedKey,TExpectedValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateKeyDifference" signature="(System.Collections.Generic.IDictionary`2&lt;TSubjectKey,TSubjectValue&gt;,System.Collections.Generic.IDictionary`2&lt;TExpectedKey,TExpectedValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertDictionaryEquivalence" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertDictionaryEquivalence" signature="(FluentAssertions.Equivalency.EquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.IDictionary`2&lt;TSubjectKey,TSubjectValue&gt;,System.Collections.Generic.IDictionary`2&lt;TExpectedKey,TExpectedValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MissingKeys" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdditionalKeys" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.List`1&lt;TExpectedKey&gt;,System.Collections.Generic.List`1&lt;TSubjectKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.GenericEnumerableEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/GenericEnumerableEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleImpl" signature="(FluentAssertions.Equivalency.Steps.EnumerableEquivalencyValidator,System.Object[],System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSubjectIsCollection" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCollection" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericCollection" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetIEnumerableInterfaces" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTypeOfEnumeration" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.ReferenceEqualityEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/ReferenceEqualityEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.RunAllUserStepsEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/RunAllUserStepsEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.SimpleEqualityEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/SimpleEqualityEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.StringEqualityEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/StringEqualityEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstNulls" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateSubjectIsString" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.StructuralEqualityEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/StructuralEqualityEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertMemberEquality" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.INode,System.Object,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.ValueTypeEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/ValueTypeEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.XAttributeEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/XAttributeEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.XDocumentEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/XDocumentEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.XElementEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/XElementEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.SubjectInfoExtensions" filename="/_/Src/FluentAssertions/Equivalency/SubjectInfoExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WhichSetterHas" signature="(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhichSetterDoesNotHave" signature="(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhichGetterHas" signature="(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhichGetterDoesNotHave" signature="(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Tracing.StringBuilderTraceWriter" filename="/_/Src/FluentAssertions/Equivalency/Tracing/StringBuilderTraceWriter.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="AddSingle" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddBlock" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteLine" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Tracing.Tracer" filename="/_/Src/FluentAssertions/Equivalency/Tracing/Tracer.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Tracing.ITraceWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteLine" signature="(FluentAssertions.Equivalency.Tracing.GetTraceMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteBlock" signature="(FluentAssertions.Equivalency.Tracing.GetTraceMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.EquivalencyPlan" filename="/_/Src/FluentAssertions/EquivalencyPlan.cs" line-rate="1" branch-rate="1" complexity="16">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AddAfter" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Insert" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InsertBefore" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Remove" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetDefaultSteps" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.EventRaisingExtensions" filename="/_/Src/FluentAssertions/EventRaisingExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WithSender" signature="(FluentAssertions.Events.IEventRecording,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithArgs" signature="(FluentAssertions.Events.IEventRecording,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithArgs" signature="(FluentAssertions.Events.IEventRecording,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventAssertions`1" filename="/_/Src/FluentAssertions/Events/EventAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Monitor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Events.IMonitor`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raise" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotRaise" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaisePropertyChangeFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Object&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotRaisePropertyChangeFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Object&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAffectedPropertyName" signature="(FluentAssertions.Events.OccurredEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventHandlerFactory" filename="/_/Src/FluentAssertions/Events/EventHandlerFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GenerateHandler" signature="(System.Type,FluentAssertions.Events.EventRecorder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDelegateReturnType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDelegateParameterTypes" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendParameterListThisReference" signature="(System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeIsDelegate" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelegateInvokeMethod" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventMetadata" filename="/_/Src/FluentAssertions/Events/EventMetadata.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="EventName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandlerType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventMonitor`1" filename="/_/Src/FluentAssertions/Events/EventMonitor.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MonitoredEvents" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OccurredEvents" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Func`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Should" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetRecordingFor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Attach" signature="(System.Type,System.Func`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPublicEvents" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="AttachEventHandler" signature="(System.Reflection.EventInfo,System.Func`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventRecorder" filename="/_/Src/FluentAssertions/Events/EventRecorder.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name="EventObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventObject" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlerType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlerType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.String,System.Func`1&lt;System.DateTime&gt;,FluentAssertions.Events.ThreadSafeSequenceGenerator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Attach" signature="(System.WeakReference,System.Reflection.EventInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="RecordEvent" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.FilteredEventRecording" filename="/_/Src/FluentAssertions/Events/FilteredEventRecording.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="EventObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlerType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Events.IEventRecording,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Events.OccurredEvent&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.OccurredEvent" filename="/_/Src/FluentAssertions/Events/OccurredEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="EventName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parameters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parameters" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TimestampUtc" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TimestampUtc" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sequence" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sequence" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.RecordedEvent" filename="/_/Src/FluentAssertions/Events/RecordedEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TimestampUtc" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parameters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sequence" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.DateTime,System.Int32,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.ThreadSafeSequenceGenerator" filename="/_/Src/FluentAssertions/Events/ThreadSafeSequenceGenerator.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Increment" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Exactly" filename="/_/Src/FluentAssertions/Exactly.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.ExceptionAssertionsExtensions" filename="/_/Src/FluentAssertions/ExceptionAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="21">
          <methods>
            <method name="WithParameterName" signature="(FluentAssertions.Specialized.ExceptionAssertions`1&lt;TException&gt;,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithInnerException" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithInnerException" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithInnerExceptionExactly" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithInnerExceptionExactly" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithMessage" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithParameterName" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.AssertionFailedException" filename="/_/Src/FluentAssertions/Execution/AssertionFailedException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.AssertionScope" filename="/_/Src/FluentAssertions/Execution/AssertionScope.cs" line-rate="1" branch-rate="1" complexity="18">
          <methods>
            <method name="Context" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Context" signature="(System.Lazy`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Current" signature="(FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UsingLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormattingOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Succeeded" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallerIdentity" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Execution.IAssertionScope.get_UsingLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.IAssertionStrategy)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Lazy`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.IAssertionStrategy,FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseOf" signature="(FluentAssertions.Execution.Reason)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseOf" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithExpectation" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TrackComparands" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClearExpectation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Given" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForCondition" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForConstraint" signature="(FluentAssertions.OccurrenceConstraint,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.Func`1&lt;FluentAssertions.Execution.FailReason&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWithPreFormatted" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.Func`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Func`1&lt;System.Object&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetIdentifier" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="AddPreFormattedFailure" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendTracing" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddNonReportable" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddReportable" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddReportable" signature="(System.String,System.Func`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Discard" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HasFailures" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Get" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="WithDefaultIdentifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssumeSingleCaller" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetCurrentAssertionScope" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SetCurrentAssertionScope" signature="(FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Execution.IAssertionScope.ForCondition" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Execution.IAssertionScope.BecauseOf" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Execution.IAssertionScope.WithExpectation" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Execution.IAssertionScope.WithDefaultIdentifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.CollectingAssertionStrategy" filename="/_/Src/FluentAssertions/Execution/CollectingAssertionStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="FailureMessages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscardFailures" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ThrowIfAny" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleFailure" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.ContextDataItems" filename="/_/Src/FluentAssertions/Execution/ContextDataItems.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="GetReportable" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="AsStringOrDefault" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(FluentAssertions.Execution.ContextDataItems)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(FluentAssertions.Execution.ContextDataItems/DataItem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Key" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reportable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RequiresFormatting" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object,System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.Continuation" filename="/_/Src/FluentAssertions/Execution/Continuation.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Then" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.AssertionScope,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(FluentAssertions.Execution.Continuation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.ContinuationOfGiven`1" filename="/_/Src/FluentAssertions/Execution/ContinuationOfGiven.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Then" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.GivenSelector`1&lt;TSubject&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(FluentAssertions.Execution.ContinuationOfGiven`1&lt;TSubject&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.ContinuedAssertionScope" filename="/_/Src/FluentAssertions/Execution/ContinuedAssertionScope.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="UsingLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.AssertionScope,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Given" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForCondition" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Func`1&lt;System.Object&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.Func`1&lt;FluentAssertions.Execution.FailReason&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseOf" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClearExpectation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithExpectation" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithDefaultIdentifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Discard" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.DefaultAssertionStrategy" filename="/_/Src/FluentAssertions/Execution/DefaultAssertionStrategy.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="FailureMessages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleFailure" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscardFailures" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ThrowIfAny" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.Execute" filename="/_/Src/FluentAssertions/Execution/Execute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Assertion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.FailReason" filename="/_/Src/FluentAssertions/Execution/FailReason.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Args" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.FallbackTestFramework" filename="/_/Src/FluentAssertions/Execution/FallbackTestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.GivenSelector`1" filename="/_/Src/FluentAssertions/Execution/GivenSelector.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Func`1&lt;T&gt;,FluentAssertions.Execution.AssertionScope,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForCondition" signature="(System.Func`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Given" signature="(System.Func`2&lt;T,TOut&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Func`2&lt;T,System.Object&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClearExpectation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.GivenSelectorExtensions" filename="/_/Src/FluentAssertions/Execution/GivenSelectorExtensions.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="AssertCollectionIsNotNull" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertEitherCollectionIsNotEmpty" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasEnoughItems" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasEnoughItems" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasNotTooManyItems" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionsHaveSameCount" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionsHaveSameItems" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;TActual&gt;&gt;,System.Collections.Generic.ICollection`1&lt;TExpected&gt;,System.Func`3&lt;System.Collections.Generic.ICollection`1&lt;TActual&gt;,System.Collections.Generic.ICollection`1&lt;TExpected&gt;,System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Items" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Index" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.ICollection`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Contains" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CopyTo" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Remove" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.LateBoundTestFramework" filename="/_/Src/FluentAssertions/Execution/LateBoundTestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.MessageBuilder" filename="/_/Src/FluentAssertions/Execution/MessageBuilder.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Formatting.FormattingOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Build" signature="(System.String,System.Object[],System.String,FluentAssertions.Execution.ContextDataItems,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstituteIdentifier" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstituteContextualTags" signature="(System.String,FluentAssertions.Execution.ContextDataItems)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatArgumentPlaceholders" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SanitizeReason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsurePrefix" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractLeadingBlanksFrom" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartsWithBlank" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.MSpecFramework" filename="/_/Src/FluentAssertions/Execution/MSpecFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssemblyName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionFullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.MSTestFrameworkV2" filename="/_/Src/FluentAssertions/Execution/MSTestFrameworkV2.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionFullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.NSpecFramework" filename="/_/Src/FluentAssertions/Execution/NSpecFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.NUnitTestFramework" filename="/_/Src/FluentAssertions/Execution/NUnitTestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssemblyName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionFullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.Reason" filename="/_/Src/FluentAssertions/Execution/Reason.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FormattedMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormattedMessage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.TestFrameworkProvider" filename="/_/Src/FluentAssertions/Execution/TestFrameworkProvider.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Common.Configuration)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DetectFramework" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="AttemptToDetectUsingAppSetting" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="AttemptToDetectUsingDynamicScanning" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.XUnit2TestFramework" filename="/_/Src/FluentAssertions/Execution/XUnit2TestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Extensions.FluentDateTimeExtensions" filename="/_/Src/FluentAssertions/Extensions/FluentDateTimeExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="January" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="February" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="March" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="April" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="May" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="June" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="July" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="August" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="September" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="October" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="November" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="December" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="At" signature="(System.DateTime,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="At" signature="(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="At" signature="(System.DateTimeOffset,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsUtc" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsLocal" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Before" signature="(System.TimeSpan,System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="After" signature="(System.TimeSpan,System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanosecond" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanosecond" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddNanoseconds" signature="(System.DateTime,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddNanoseconds" signature="(System.DateTimeOffset,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsecond" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsecond" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMicroseconds" signature="(System.DateTime,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMicroseconds" signature="(System.DateTimeOffset,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithOffset" signature="(System.DateTime,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Extensions.FluentTimeSpanExtensions" filename="/_/Src/FluentAssertions/Extensions/FluentTimeSpanExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Ticks" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Ticks" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanoseconds" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanoseconds" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanoseconds" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TotalNanoseconds" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microseconds" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microseconds" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microseconds" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TotalMicroseconds" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Milliseconds" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Milliseconds" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seconds" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seconds" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seconds" signature="(System.Int32,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Minutes" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Minutes" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Minutes" signature="(System.Int32,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hours" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hours" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hours" signature="(System.Int32,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Days" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Days" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Days" signature="(System.Int32,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="And" signature="(System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Extensions.OccurrenceConstraintExtensions" filename="/_/Src/FluentAssertions/Extensions/OccurrenceConstraintExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TimesExactly" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TimesOrLess" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TimesOrMore" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.FluentActions" filename="/_/Src/FluentAssertions/FluentActions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Invoking" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoking" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(System.Func`1&lt;System.Collections.IEnumerable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(System.Func`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.AggregateExceptionValueFormatter" filename="/_/Src/FluentAssertions/Formatting/AggregateExceptionValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.AttributeBasedFormatter" filename="/_/Src/FluentAssertions/Formatting/AttributeBasedFormatter.cs" line-rate="1" branch-rate="1" complexity="17">
          <methods>
            <method name="IsScanningEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Formatters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFormatter" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleValueFormatterDetectionModeChanges" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="FindCustomFormatters" signature="()" line-rate="1" branch-rate="1" complexity="15">
              <lines />
            </method>
            <method name="Applicable" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.ByteValueFormatter" filename="/_/Src/FluentAssertions/Formatting/ByteValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DateTimeOffsetValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DateTimeOffsetValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasTime" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasDate" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasMilliSeconds" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasMicroSeconds" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasNanoSeconds" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DecimalValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DecimalValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DefaultValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DefaultValueFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="SpacesPerIndentionLevel" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembers" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasDefaultToStringImplementation" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteTypeAndMemberValues" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeDisplayName" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteMemberValueTextFor" signature="(System.Object,System.Reflection.MemberInfo,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DictionaryValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DictionaryValueFormatter.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="MaxItems" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddLineOrFragment" signature="(FluentAssertions.Formatting.FormattedObjectGraph,System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AsEnumerable" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DoubleValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DoubleValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.EnumerableExtensions" filename="/_/Src/FluentAssertions/Formatting/EnumerableExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="JoinUsingWritingStyle" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.EnumerableValueFormatter" filename="/_/Src/FluentAssertions/Formatting/EnumerableValueFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="MaxItems" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddLineOrFragment" signature="(FluentAssertions.Formatting.FormattedObjectGraph,System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.EnumValueFormatter" filename="/_/Src/FluentAssertions/Formatting/EnumValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.ExceptionValueFormatter" filename="/_/Src/FluentAssertions/Formatting/ExceptionValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.ExpressionValueFormatter" filename="/_/Src/FluentAssertions/Formatting/ExpressionValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.FormattedObjectGraph" filename="/_/Src/FluentAssertions/Formatting/FormattedObjectGraph.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="SpacesPerIndentation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Whitespace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddFragmentOnNewLine" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddLine" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddFragment" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FlushCurrentLine" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="AppendSafely" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithIndentation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.Formatter" filename="/_/Src/FluentAssertions/Formatting/Formatter.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Formatters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="(System.Object,FluentAssertions.Formatting.FormattingOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatChild" signature="(System.String,System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormattingOptions,FluentAssertions.Formatting.Formatter/ObjectGraph)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveFormatter" signature="(FluentAssertions.Formatting.IValueFormatter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddFormatter" signature="(FluentAssertions.Formatting.IValueFormatter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Depth" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryPush" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFullPath" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Pop" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.FormattingContext" filename="/_/Src/FluentAssertions/Formatting/FormattingContext.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="UseLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseLineBreaks" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.FormattingOptions" filename="/_/Src/FluentAssertions/Formatting/FormattingOptions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="UseLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseLineBreaks" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxDepth" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxDepth" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxLines" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxLines" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.GuidValueFormatter" filename="/_/Src/FluentAssertions/Formatting/GuidValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.Int16ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/Int16ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.Int32ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/Int32ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.Int64ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/Int64ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.MaxLinesExceededException" filename="/_/Src/FluentAssertions/Formatting/MaxLinesExceededException.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.MultidimensionalArrayFormatter" filename="/_/Src/FluentAssertions/Formatting/MultidimensionalArrayFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFirstIteration" signature="(System.Array,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInnerMostLoop" signature="(System.Array,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLastIteration" signature="(System.Array,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.NullValueFormatter" filename="/_/Src/FluentAssertions/Formatting/NullValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.PredicateLambdaExpressionValueFormatter" filename="/_/Src/FluentAssertions/Formatting/PredicateLambdaExpressionValueFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReduceConstantSubExpressions" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractChainOfExpressionsJoinedWithAndOperator" signature="(System.Linq.Expressions.BinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasParameters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasParameters" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitParameter" signature="(System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasLiftedOperator" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpressionIsConstant" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AndChain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.PropertyInfoFormatter" filename="/_/Src/FluentAssertions/Formatting/PropertyInfoFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.SByteValueFormatter" filename="/_/Src/FluentAssertions/Formatting/SByteValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.SingleValueFormatter" filename="/_/Src/FluentAssertions/Formatting/SingleValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.StringValueFormatter" filename="/_/Src/FluentAssertions/Formatting/StringValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.TaskFormatter" filename="/_/Src/FluentAssertions/Formatting/TaskFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.TimeSpanValueFormatter" filename="/_/Src/FluentAssertions/Formatting/TimeSpanValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNonZeroFragments" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMicrosecondsIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddSecondsIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMilliSecondsIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMinutesIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddHoursIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddDaysIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.UInt16ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/UInt16ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.UInt32ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/UInt32ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.UInt64ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/UInt64ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.XAttributeValueFormatter" filename="/_/Src/FluentAssertions/Formatting/XAttributeValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.XDocumentValueFormatter" filename="/_/Src/FluentAssertions/Formatting/XDocumentValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.XElementValueFormatter" filename="/_/Src/FluentAssertions/Formatting/XElementValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatElementWithoutChildren" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatElementWithChildren" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitIntoSeparateLines" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.XmlReaderValueFormatter" filename="/_/Src/FluentAssertions/Formatting/XmlReaderValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.LessThan" filename="/_/Src/FluentAssertions/LessThan.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.MoreThan" filename="/_/Src/FluentAssertions/MoreThan.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.ByteAssertions" filename="/_/Src/FluentAssertions/Numeric/ByteAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Byte,System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.ComparableTypeAssertions`1" filename="/_/Src/FluentAssertions/Numeric/ComparableTypeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.IComparable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.ComparableTypeAssertions`2" filename="/_/Src/FluentAssertions/Numeric/ComparableTypeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.IComparable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeRankedEquallyTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeRankedEquallyTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThanOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThan" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThanOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInRange" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInRange" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.DecimalAssertions" filename="/_/Src/FluentAssertions/Numeric/DecimalAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Decimal,System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.DoubleAssertions" filename="/_/Src/FluentAssertions/Numeric/DoubleAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.Int16Assertions" filename="/_/Src/FluentAssertions/Numeric/Int16Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int16,System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.Int32Assertions" filename="/_/Src/FluentAssertions/Numeric/Int32Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.Int64Assertions" filename="/_/Src/FluentAssertions/Numeric/Int64Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableByteAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableByteAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Byte&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Byte,System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableDecimalAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableDecimalAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Decimal&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Decimal,System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableDoubleAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableDoubleAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Double&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableInt16Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableInt16Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Int16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int16,System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableInt32Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableInt32Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableInt64Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableInt64Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Int64&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableNumericAssertions`1" filename="/_/Src/FluentAssertions/Numeric/NullableNumericAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableNumericAssertions`2" filename="/_/Src/FluentAssertions/Numeric/NullableNumericAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Nullable`1&lt;T&gt;,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableSByteAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableSByteAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.SByte&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.SByte,System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableSingleAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableSingleAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Single&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableUInt16Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableUInt16Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.UInt16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt16,System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableUInt32Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableUInt32Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.UInt32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt32,System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableUInt64Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableUInt64Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.UInt64&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NumericAssertions`1" filename="/_/Src/FluentAssertions/Numeric/NumericAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NumericAssertions`2" filename="/_/Src/FluentAssertions/Numeric/NumericAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BePositive" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNegative" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThanOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThan" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThanOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInRange" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInRange" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateDifferenceMessage" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.SByteAssertions" filename="/_/Src/FluentAssertions/Numeric/SByteAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.SByte,System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.SingleAssertions" filename="/_/Src/FluentAssertions/Numeric/SingleAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.UInt16Assertions" filename="/_/Src/FluentAssertions/Numeric/UInt16Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt16,System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.UInt32Assertions" filename="/_/Src/FluentAssertions/Numeric/UInt32Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt32,System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.UInt64Assertions" filename="/_/Src/FluentAssertions/Numeric/UInt64Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.NumericAssertionsExtensions" filename="/_/Src/FluentAssertions/NumericAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.SByte&gt;,System.SByte,System.Byte,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Byte&gt;,System.Byte,System.Byte,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int16&gt;,System.Int16,System.UInt16,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt16&gt;,System.UInt16,System.UInt16,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int32&gt;,System.Int32,System.UInt32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt32&gt;,System.UInt32,System.UInt32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int64&gt;,System.Int64,System.UInt64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt64&gt;,System.UInt64,System.UInt64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailIfValueOutsideBounds" signature="(System.Boolean,TValue,TDelta,TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.SByte&gt;,System.SByte,System.Byte,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Byte&gt;,System.Byte,System.Byte,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int16&gt;,System.Int16,System.UInt16,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt16&gt;,System.UInt16,System.UInt16,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int32&gt;,System.Int32,System.UInt32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt32&gt;,System.UInt32,System.UInt32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int64&gt;,System.Int64,System.UInt64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt64&gt;,System.UInt64,System.UInt64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailIfValueInsideBounds" signature="(System.Boolean,TValue,TDelta,TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Single&gt;,System.Single,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Single&gt;,System.Nullable`1&lt;System.Single&gt;,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Single&gt;,System.Single,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Double&gt;,System.Double,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Double&gt;,System.Nullable`1&lt;System.Double&gt;,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Double&gt;,System.Double,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Decimal&gt;,System.Decimal,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Decimal&gt;,System.Nullable`1&lt;System.Decimal&gt;,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Decimal&gt;,System.Decimal,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailIfDifferenceOutsidePrecision" signature="(System.Boolean,FluentAssertions.Numeric.NumericAssertions`1&lt;T&gt;,T,T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Single&gt;,System.Single,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Single&gt;,System.Nullable`1&lt;System.Single&gt;,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Single&gt;,System.Single,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Double&gt;,System.Double,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Double&gt;,System.Nullable`1&lt;System.Double&gt;,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Double&gt;,System.Double,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Decimal&gt;,System.Decimal,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Decimal&gt;,System.Nullable`1&lt;System.Decimal&gt;,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Decimal&gt;,System.Decimal,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailIfDifferenceWithinPrecision" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;T&gt;,System.Boolean,T,T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMinValue" signature="(System.Int64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMaxValue" signature="(System.Int64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.ObjectAssertionsExtensions" filename="/_/Src/FluentAssertions/ObjectAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeBinarySerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeBinarySerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;T&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;T&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDataContractSerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDataContractSerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;T&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;T&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateCloneUsingBinarySerializer" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateCloneUsingDataContractSerializer" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeXmlSerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateCloneUsingXmlSerializer" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BindToType" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.OccurrenceConstraint" filename="/_/Src/FluentAssertions/OccurrenceConstraint.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExpectedCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RegisterReportables" signature="(FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.BooleanAssertions" filename="/_/Src/FluentAssertions/Primitives/BooleanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.BooleanAssertions`1" filename="/_/Src/FluentAssertions/Primitives/BooleanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeFalse" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeTrue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Boolean,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Boolean,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Imply" signature="(System.Boolean,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeAssertions" filename="/_/Src/FluentAssertions/Primitives/DateTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeAssertions`1" filename="/_/Src/FluentAssertions/Primitives/DateTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.DateTime&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;System.DateTime&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(System.DateTime,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(System.DateTime,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeBefore" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeBefore" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOnOrBefore" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOnOrBefore" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAfter" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAfter" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOnOrAfter" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOnOrAfter" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveYear" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveYear" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMonth" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMonth" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveDay" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveDay" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveHour" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveHour" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMinute" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMinute" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSecond" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSecond" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeMoreThan" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAtLeast" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeExactly" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWithin" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSameDateAs" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameDateAs" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Nullable`1&lt;System.DateTime&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.DateTime[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.DateTime&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Nullable`1&lt;System.DateTime&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeIn" signature="(System.DateTimeKind,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeOffsetAssertions" filename="/_/Src/FluentAssertions/Primitives/DateTimeOffsetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeOffsetAssertions`1" filename="/_/Src/FluentAssertions/Primitives/DateTimeOffsetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeExactly" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeExactly" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeExactly" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeExactly" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(System.DateTimeOffset,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(System.DateTimeOffset,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeBefore" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeBefore" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOnOrBefore" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOnOrBefore" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAfter" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAfter" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOnOrAfter" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOnOrAfter" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveYear" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveYear" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMonth" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMonth" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveDay" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveDay" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveHour" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveHour" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMinute" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMinute" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSecond" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSecond" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveOffset" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveOffset" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeMoreThan" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAtLeast" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeExactly" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWithin" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSameDateAs" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameDateAs" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.DateTimeOffset[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Nullable`1&lt;System.DateTimeOffset&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeOffsetRangeAssertions`1" filename="/_/Src/FluentAssertions/Primitives/DateTimeOffsetRangeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TAssertions,System.Nullable`1&lt;System.DateTimeOffset&gt;,FluentAssertions.Primitives.TimeSpanCondition,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Before" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="After" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PositionRelativeToTarget" signature="(System.DateTimeOffset,System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeRangeAssertions`1" filename="/_/Src/FluentAssertions/Primitives/DateTimeRangeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TAssertions,System.Nullable`1&lt;System.DateTime&gt;,FluentAssertions.Primitives.TimeSpanCondition,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Before" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="After" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PositionRelativeToTarget" signature="(System.DateTime,System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.EnumAssertions`1" filename="/_/Src/FluentAssertions/Primitives/EnumAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.EnumAssertions`2" filename="/_/Src/FluentAssertions/Primitives/EnumAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;TEnum&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(TEnum,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;TEnum&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(TEnum,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;TEnum&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDefined" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDefined" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameValueAs" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameValueAs" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameNameAs" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameNameAs" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveFlag" signature="(TEnum,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveFlag" signature="(TEnum,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Nullable`1&lt;TEnum&gt;,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(TEnum[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;TEnum&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetName" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.GuidAssertions" filename="/_/Src/FluentAssertions/Primitives/GuidAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.GuidAssertions`1" filename="/_/Src/FluentAssertions/Primitives/GuidAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Guid,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Guid,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.HttpResponseMessageAssertions" filename="/_/Src/FluentAssertions/Primitives/HttpResponseMessageAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Net.Http.HttpResponseMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.HttpResponseMessageAssertions`1" filename="/_/Src/FluentAssertions/Primitives/HttpResponseMessageAssertions.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Net.Http.HttpResponseMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSuccessful" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeRedirection" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveError" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveClientError" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveServerError" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveStatusCode" signature="(System.Net.HttpStatusCode,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveStatusCode" signature="(System.Net.HttpStatusCode,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsServerError" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="IsClientError" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NegatedStringStartValidator" filename="/_/Src/FluentAssertions/Primitives/NegatedStringStartValidator.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="ExpectationDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.StringComparison,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstMismatch" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableBooleanAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableBooleanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableBooleanAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableBooleanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeFalse" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeTrue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableDateTimeAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableDateTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableDateTimeAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableDateTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableDateTimeOffsetAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableDateTimeOffsetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableDateTimeOffsetAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableDateTimeOffsetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableEnumAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableEnumAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;TEnum&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableEnumAssertions`2" filename="/_/Src/FluentAssertions/Primitives/NullableEnumAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;TEnum&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableGuidAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableGuidAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableGuidAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableGuidAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.Guid&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableSimpleTimeSpanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableSimpleTimeSpanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.TimeSpan&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.ObjectAssertions" filename="/_/Src/FluentAssertions/Primitives/ObjectAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.ObjectAssertions`2" filename="/_/Src/FluentAssertions/Primitives/ObjectAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(TSubject[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;TSubject&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.ReferenceTypeAssertions`2" filename="/_/Src/FluentAssertions/Primitives/ReferenceTypeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSameAs" signature="(TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameAs" signature="(TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOfType" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOfType" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TSubject,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.SimpleTimeSpanAssertions" filename="/_/Src/FluentAssertions/Primitives/SimpleTimeSpanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.SimpleTimeSpanAssertions`1" filename="/_/Src/FluentAssertions/Primitives/SimpleTimeSpanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BePositive" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNegative" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThanOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThan" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThanOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringAssertions" filename="/_/Src/FluentAssertions/Primitives/StringAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringAssertions`1" filename="/_/Src/FluentAssertions/Primitives/StringAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotMatch" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotMatchEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRegex" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRegex" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRegex" signature="(System.Text.RegularExpressions.Regex,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRegex" signature="(System.Text.RegularExpressions.Regex,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotMatchRegex" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotMatchRegex" signature="(System.Text.RegularExpressions.Regex,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWith" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotStartWith" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWithEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotStartWithEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWith" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEndWith" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWithEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEndWithEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainEquivalentOf" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainAll" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainAll" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainAny" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainAny" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainAll" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainAll" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainAny" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainAny" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveLength" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNullOrEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNullOrEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNullOrWhiteSpace" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNullOrWhiteSpace" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeUpperCased" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeUpperCased" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLowerCased" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeLowerCased" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfValuesNullOrEmpty" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringEqualityValidator" filename="/_/Src/FluentAssertions/Primitives/StringEqualityValidator.cs" line-rate="1" branch-rate="1" complexity="8">
          <methods>
            <method name="ExpectationDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.StringComparison,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstSuperfluousWhitespace" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ValidateAgainstLengthDifferences" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetMismatchSegmentForStringsOfDifferentLengths" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ValidateAgainstMismatch" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringStartValidator" filename="/_/Src/FluentAssertions/Primitives/StringStartValidator.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="ExpectationDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.StringComparison,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstLengthDifferences" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ValidateAgainstMismatch" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringValidator" filename="/_/Src/FluentAssertions/Primitives/StringValidator.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expected" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assertion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assertion" signature="(FluentAssertions.Execution.IAssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Validate" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="ValidateAgainstNulls" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="IsLongOrMultiline" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstSuperfluousWhitespace" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ValidateAgainstLengthDifferences" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringWildcardMatchingValidator" filename="/_/Src/FluentAssertions/Primitives/StringWildcardMatchingValidator.cs" line-rate="1" branch-rate="1" complexity="8">
          <methods>
            <method name="ExpectationDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Negate" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Negate" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreNewLineDifferences" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreNewLineDifferences" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstMismatch" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="IsMatch" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ConvertWildcardToRegEx" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CleanNewLines" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.TimeSpanPredicate" filename="/_/Src/FluentAssertions/Primitives/TimeSpanPredicate.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisplayText" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`3&lt;System.TimeSpan,System.TimeSpan,System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatchedBy" signature="(System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Reflection.AssemblyAssertions" filename="/_/Src/FluentAssertions/Specialized/AssemblyAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReference" signature="(System.Reflection.Assembly,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reference" signature="(System.Reflection.Assembly,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefineType" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.ActionAssertions" filename="/_/Src/FluentAssertions/Specialized/ActionAssertions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeSubject" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.AsyncFunctionAssertions`2" filename="/_/Src/FluentAssertions/Specialized/AsyncFunctionAssertions.cs" line-rate="1" branch-rate="1" complexity="70">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;TTask&gt;,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;TTask&gt;,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertThrows" signature="(System.Exception,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfterAsync" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeWithTimer" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="&gt;c__DisplayClass13_0/&lt;&lt;NotThrowAfterAsync" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="CompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="CompletesWithinTimeoutAsync" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="InvokeWithInterceptionAsync" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="InvokeWithInterceptionAsync" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="NotCompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="NotThrowAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="NotThrowAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="ThrowAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ThrowExactlyAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ThrowWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.DelegateAssertions`2" filename="/_/Src/FluentAssertions/Specialized/DelegateAssertions.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name=".ctor" signature="(TDelegate,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDelegate,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrow" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrow" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowExactly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfter" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeSubjectWithInterception" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="FailIfSubjectIsAsyncVoid" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.DelegateAssertionsBase`2" filename="/_/Src/FluentAssertions/Specialized/DelegateAssertionsBase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Extractor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDelegate,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowInternal" signature="(System.Exception,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowInternal" signature="(System.Exception,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowInternal" signature="(System.Exception,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.ExceptionAssertions`1" filename="/_/Src/FluentAssertions/Specialized/ExceptionAssertions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="And" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Which" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SingleSubject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithMessage" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithInnerException" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithInnerException" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithInnerExceptionExactly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithInnerExceptionExactly" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TException,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertInnerExceptionExactly" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertInnerExceptions" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BuildExceptionsString" signature="(System.Collections.Generic.IEnumerable`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Context" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Execute" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.ExecutionTime" filename="/_/Src/FluentAssertions/Specialized/ExecutionTime.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="ElapsedTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRunning" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRunning" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ActionDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Task" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action,System.String,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;,System.String,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="&gt;c__DisplayClass4_0/&lt;&lt;-ctor" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.ExecutionTimeAssertions" filename="/_/Src/FluentAssertions/Specialized/ExecutionTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Specialized.ExecutionTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PollUntil" signature="(System.Func`2&lt;System.TimeSpan,System.Boolean&gt;,System.Boolean,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThanOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThanOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThan" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.FunctionAssertionHelpers" filename="/_/Src/FluentAssertions/Specialized/FunctionAssertionHelpers.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="NotThrow" signature="(System.Func`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfter" signature="(System.Func`1&lt;TResult&gt;,FluentAssertions.Common.IClock,System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.FunctionAssertions`1" filename="/_/Src/FluentAssertions/Specialized/FunctionAssertions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;T&gt;,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;T&gt;,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeSubject" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotThrow" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfter" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.GenericAsyncFunctionAssertions`1" filename="/_/Src/FluentAssertions/Specialized/GenericAsyncFunctionAssertions.cs" line-rate="1" branch-rate="1" complexity="23">
          <methods>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfterAsync" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="&gt;c__DisplayClass4_0/&lt;&lt;NotThrowAfterAsync" signature="()" line-rate="1" branch-rate="1" complexity="11">
              <lines />
            </method>
            <method name="CompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="NotThrowAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.MemberExecutionTime`1" filename="/_/Src/FluentAssertions/Specialized/MemberExecutionTime.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(T,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.NonGenericAsyncFunctionAssertions" filename="/_/Src/FluentAssertions/Specialized/NonGenericAsyncFunctionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.TaskCompletionSourceAssertions`1" filename="/_/Src/FluentAssertions/Specialized/TaskCompletionSourceAssertions.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name=".ctor" signature="(System.Threading.Tasks.TaskCompletionSource`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Threading.Tasks.TaskCompletionSource`1&lt;T&gt;,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="NotCompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.TaskCompletionSourceAssertionsBase" filename="/_/Src/FluentAssertions/Specialized/TaskCompletionSourceAssertionsBase.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="Clock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompletesWithinTimeoutAsync" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Streams.BufferedStreamAssertions" filename="/_/Src/FluentAssertions/Streams/BufferedStreamAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.IO.BufferedStream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Streams.BufferedStreamAssertions`1" filename="/_/Src/FluentAssertions/Streams/BufferedStreamAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.IO.BufferedStream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Streams.StreamAssertions" filename="/_/Src/FluentAssertions/Streams/StreamAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.IO.Stream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Streams.StreamAssertions`2" filename="/_/Src/FluentAssertions/Streams/StreamAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSeekable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSeekable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeReadable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeReadable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HavePosition" signature="(System.Int64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHavePosition" signature="(System.Int64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveLength" signature="(System.Int64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveLength" signature="(System.Int64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeReadOnly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeReadOnly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWriteOnly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeWriteOnly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.TypeEnumerableExtensions" filename="/_/Src/FluentAssertions/TypeEnumerableExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ThatAreDecoratedWith" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreDecoratedWithOrInherit" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWith" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWithOrInherit" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreInNamespace" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreUnderNamespace" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatDeriveFrom" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatImplement" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreClasses" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotClasses" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreStatic" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotStatic" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatSatisfy" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.Func`2&lt;System.Type,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapTaskTypes" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapEnumerableTypes" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.TypeExtensions" filename="/_/Src/FluentAssertions/TypeExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Types" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Types" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Types" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Methods" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Methods" signature="(FluentAssertions.Types.TypeSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="(FluentAssertions.Types.TypeSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.AllTypes" filename="/_/Src/FluentAssertions/Types/AllTypes.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="From" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.ConstructorInfoAssertions" filename="/_/Src/FluentAssertions/Types/ConstructorInfoAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SubjectDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.ConstructorInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionFor" signature="(System.Reflection.ConstructorInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MemberInfoAssertions`2" filename="/_/Src/FluentAssertions/Types/MemberInfoAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubjectDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MethodBaseAssertions`2" filename="/_/Src/FluentAssertions/Types/MethodBaseAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAccessModifier" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveAccessModifier" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterString" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MethodInfoAssertions" filename="/_/Src/FluentAssertions/Types/MethodInfoAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SubjectDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAsync" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAsync" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnVoid" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturnVoid" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturn" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturn" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionFor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MethodInfoSelector" filename="/_/Src/FluentAssertions/Types/MethodInfoSelector.cs" line-rate="1" branch-rate="1" complexity="33">
          <methods>
            <method name="ThatArePublicOrInternal" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatReturnVoid" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatDoNotReturnVoid" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatReturn" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatDoNotReturn" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreAbstract" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotAbstract" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreAsync" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotAsync" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreStatic" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotStatic" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreVirtual" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotVirtual" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ReturnTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HasSpecialName" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MethodInfoSelectorAssertions" filename="/_/Src/FluentAssertions/Types/MethodInfoSelectorAssertions.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="SubjectMethods" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Context" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.MethodInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAllNonVirtualMethodsFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAllVirtualMethodsFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="BeAsync" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAsync" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodsWithout" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodsWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionsFor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MethodInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.PropertyInfoAssertions" filename="/_/Src/FluentAssertions/Types/PropertyInfoAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SubjectDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWritable" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeReadable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeReadable" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeReadable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturn" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturn" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionFor" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.PropertyInfoSelector" filename="/_/Src/FluentAssertions/Types/PropertyInfoSelector.cs" line-rate="1" branch-rate="1" complexity="17">
          <methods>
            <method name="ThatArePublicOrInternal" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreAbstract" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotAbstract" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreStatic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotStatic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreVirtual" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotVirtual" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="OfType" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="NotOfType" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ReturnTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.PropertyInfoSelectorAssertions" filename="/_/Src/FluentAssertions/Types/PropertyInfoSelectorAssertions.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="SubjectProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Context" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.PropertyInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAllReadOnlyPropertiesFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAllWritablePropertiesFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAllNonVirtualPropertiesFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAllVirtualPropertiesFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPropertiesWithout" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetPropertiesWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetDescriptionsFor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.PropertyInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.TypeAssertions" filename="/_/Src/FluentAssertions/Types/TypeAssertions.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFailureMessageIfTypesAreDifferent" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWithOrInherit" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWithOrInherit" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWithOrInherit" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWithOrInherit" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Implement" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Implement" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotImplement" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotImplement" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDerivedFrom" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDerivedFrom" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDerivedFrom" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDerivedFrom" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSealed" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSealed" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAbstract" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAbstract" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeStatic" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeStatic" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveProperty" signature="(System.Type,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveProperty" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveProperty" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitProperty" signature="(System.Type,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitProperty" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitProperty" signature="(System.Type,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitProperty" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitMethod" signature="(System.Type,System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitMethod" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitMethod" signature="(System.Type,System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitMethod" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveIndexer" signature="(System.Type,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveIndexer" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMethod" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMethod" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveConstructor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveDefaultConstructor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveConstructor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveDefaultConstructor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterString" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAccessModifier" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveAccessModifier" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveImplicitConversionOperator" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveImplicitConversionOperator" signature="(System.Type,System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveImplicitConversionOperator" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveImplicitConversionOperator" signature="(System.Type,System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitConversionOperator" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitConversionOperator" signature="(System.Type,System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitConversionOperator" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitConversionOperator" signature="(System.Type,System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertThatSubjectIsClass" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.TypeSelector" filename="/_/Src/FluentAssertions/Types/TypeSelector.cs" line-rate="1" branch-rate="1" complexity="52">
          <methods>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ThatDeriveFrom" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatDoNotDeriveFrom" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatImplement" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatDoNotImplement" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreInNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotInNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreUnderNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotUnderNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreValueTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotValueTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreClasses" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotClasses" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreAbstract" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotAbstract" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreSealed" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotSealed" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreStatic" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotStatic" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatSatisfy" signature="(System.Func`2&lt;System.Type,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapTaskTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="UnwrapEnumerableTypes" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.TypeSelectorAssertions" filename="/_/Src/FluentAssertions/Types/TypeSelectorAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWithOrInherit" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWithOrInherit" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWithOrInherit" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWithOrInherit" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSealed" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSealed" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInNamespace" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInNamespace" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeUnderNamespace" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeUnderNamespace" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionsFor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionFor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.AttributeData" filename="/_/Src/FluentAssertions/Xml/Equivalency/AttributeData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="NamespaceUri" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LocalName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Prefix" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QualifiedName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.Failure" filename="/_/Src/FluentAssertions/Xml/Equivalency/Failure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FormatString" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatParams" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.Node" filename="/_/Src/FluentAssertions/Xml/Equivalency/Node.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name="Parent" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateRoot" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Xml.Equivalency.Node,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXPath" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Push" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pop" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AddChildNode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPath" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.XmlIterator" filename="/_/Src/FluentAssertions/Xml/Equivalency/XmlIterator.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="NodeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LocalName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NamespaceUri" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmptyElement" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEndOfDocument" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlReader)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Read" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="MoveToEndElement" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAttributes" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.XmlReaderValidator" filename="/_/Src/FluentAssertions/Xml/Equivalency/XmlReaderValidator.cs" line-rate="1" branch-rate="1" complexity="34">
          <methods>
            <method name=".ctor" signature="(System.Xml.XmlReader,System.Xml.XmlReader,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Validate" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Validate" signature="()" line-rate="1" branch-rate="1" complexity="21">
              <lines />
            </method>
            <method name="ValidateAttributes" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="ValidateStartElement" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ValidateText" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ValidateAgainstNulls" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XAttributeAssertions" filename="/_/Src/FluentAssertions/Xml/XAttributeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XAttribute)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Xml.Linq.XAttribute,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Xml.Linq.XAttribute,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XDocumentAssertions" filename="/_/Src/FluentAssertions/Xml/XDocumentAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Xml.Linq.XDocument,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Xml.Linq.XDocument,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Xml.Linq.XDocument,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Xml.Linq.XDocument,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveRoot" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveRoot" signature="(System.Xml.Linq.XName,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.Xml.Linq.XName,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.Xml.Linq.XName,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XElementAssertions" filename="/_/Src/FluentAssertions/Xml/XElementAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Xml.Linq.XElement,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Xml.Linq.XElement,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Xml.Linq.XElement,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Xml.Linq.XElement,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAttribute" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAttribute" signature="(System.Xml.Linq.XName,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.Xml.Linq.XName,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.Xml.Linq.XName,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XmlElementAssertions" filename="/_/Src/FluentAssertions/Xml/XmlElementAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveInnerText" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAttribute" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAttributeWithNamespace" signature="(System.String,System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElementWithNamespace" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XmlNodeAssertions" filename="/_/Src/FluentAssertions/Xml/XmlNodeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XmlNodeAssertions`2" filename="/_/Src/FluentAssertions/Xml/XmlNodeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Xml.XmlNode,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Xml.XmlNode,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XmlNodeFormatter" filename="/_/Src/FluentAssertions/Xml/XmlNodeFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.XmlAssertionExtensions" filename="/_/Src/FluentAssertions/Xml/XmlAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Xml.XmlElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Members" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Members" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Syntax" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Index" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Index.g.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Start" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="End" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFromEnd" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromStart" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromEnd" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOffset" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Index)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Implicit" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToStringFromEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ThrowValueArgumentOutOfRange_NeedNonNegNumException" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Range" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Range.g.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Start" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="End" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="All" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Index,System.Index)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Range)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="StartAt" signature="(System.Index)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndAt" signature="(System.Index)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOffsetAndLength" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Combine" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowArgumentOutOfRangeException" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FeatureName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOptional" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOptional" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.CompilerServices.ModuleInitializerAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.CompilerServices.ModuleInitializerAttribute.g.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.g.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Url" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Url" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.SystemExtensions" filename="/_/Src/FluentAssertions/SystemExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IndexOf" signature="(System.String,System.Char,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Replace" signature="(System.String,System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.String,System.Char,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartsWith" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Text.StringBuilderExtensions" filename="/_/Src/FluentAssertions/StringBuilderExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AppendLine" signature="(System.Text.StringBuilder,System.IFormatProvider,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendJoin" signature="(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="MethodsNUnitTests" line-rate="0.840909090909091" branch-rate="1" complexity="7">
      <classes>
        <class name="NumericMethodsLab1.MethodsTests" filename="D:\c#\NumericMethodsLab1\MethodsNUnitTests\MethodsTests.cs" line-rate="0.840909090909091" branch-rate="1" complexity="7">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="14" hits="6" branch="false" />
                <line number="15" hits="6" branch="false" />
                <line number="16" hits="6" branch="false" />
                <line number="17" hits="6" branch="false" />
                <line number="18" hits="6" branch="false" />
              </lines>
            </method>
            <method name="GetGap_ReturnsExpectedResult" signature="()" line-rate="0.857142857142857" branch-rate="1" complexity="1">
              <lines>
                <line number="22" hits="1" branch="false" />
                <line number="24" hits="1" branch="false" />
                <line number="25" hits="1" branch="false" />
                <line number="28" hits="1" branch="false" />
                <line number="31" hits="1" branch="false" />
                <line number="32" hits="1" branch="false" />
                <line number="33" hits="0" branch="false" />
              </lines>
            </method>
            <method name="GetGap_ThrowsException_WhenReadDataFails" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="37" hits="1" branch="false" />
                <line number="39" hits="1" branch="false" />
                <line number="42" hits="2" branch="false" />
                <line number="43" hits="1" branch="false" />
                <line number="44" hits="1" branch="false" />
              </lines>
            </method>
            <method name="GetGap_ThrowsException_WhenReadDataReturnsOutOfRangeValues" signature="()" line-rate="0.666666666666667" branch-rate="1" complexity="1">
              <lines>
                <line number="47" hits="1" branch="false" />
                <line number="49" hits="1" branch="false" />
                <line number="50" hits="1" branch="false" />
                <line number="53" hits="2" branch="false" />
                <line number="54" hits="0" branch="false" />
                <line number="55" hits="0" branch="false" />
              </lines>
            </method>
            <method name="GetGap_CallsReadData_Once" signature="()" line-rate="0.833333333333333" branch-rate="1" complexity="1">
              <lines>
                <line number="59" hits="1" branch="false" />
                <line number="61" hits="1" branch="false" />
                <line number="62" hits="1" branch="false" />
                <line number="65" hits="1" branch="false" />
                <line number="68" hits="1" branch="false" />
                <line number="69" hits="0" branch="false" />
              </lines>
            </method>
            <method name="GetGap_CallsReadData_Twice_WhenFirstCallFails" signature="()" line-rate="0.75" branch-rate="1" complexity="1">
              <lines>
                <line number="73" hits="1" branch="false" />
                <line number="75" hits="1" branch="false" />
                <line number="76" hits="1" branch="false" />
                <line number="77" hits="1" branch="false" />
                <line number="78" hits="1" branch="false" />
                <line number="81" hits="1" branch="false" />
                <line number="84" hits="0" branch="false" />
                <line number="85" hits="0" branch="false" />
              </lines>
            </method>
            <method name="Function_Throws_Exception" signature="()" line-rate="0.857142857142857" branch-rate="1" complexity="1">
              <lines>
                <line number="89" hits="1" branch="false" />
                <line number="91" hits="1" branch="false" />
                <line number="92" hits="1" branch="false" />
                <line number="94" hits="1" branch="false" />
                <line number="97" hits="2" branch="false" />
                <line number="100" hits="1" branch="false" />
                <line number="101" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="14" hits="6" branch="false" />
            <line number="15" hits="6" branch="false" />
            <line number="16" hits="6" branch="false" />
            <line number="17" hits="6" branch="false" />
            <line number="18" hits="6" branch="false" />
            <line number="22" hits="1" branch="false" />
            <line number="24" hits="1" branch="false" />
            <line number="25" hits="1" branch="false" />
            <line number="28" hits="1" branch="false" />
            <line number="31" hits="1" branch="false" />
            <line number="32" hits="1" branch="false" />
            <line number="33" hits="0" branch="false" />
            <line number="37" hits="1" branch="false" />
            <line number="39" hits="1" branch="false" />
            <line number="42" hits="2" branch="false" />
            <line number="43" hits="1" branch="false" />
            <line number="44" hits="1" branch="false" />
            <line number="47" hits="1" branch="false" />
            <line number="49" hits="1" branch="false" />
            <line number="50" hits="1" branch="false" />
            <line number="53" hits="2" branch="false" />
            <line number="54" hits="0" branch="false" />
            <line number="55" hits="0" branch="false" />
            <line number="59" hits="1" branch="false" />
            <line number="61" hits="1" branch="false" />
            <line number="62" hits="1" branch="false" />
            <line number="65" hits="1" branch="false" />
            <line number="68" hits="1" branch="false" />
            <line number="69" hits="0" branch="false" />
            <line number="73" hits="1" branch="false" />
            <line number="75" hits="1" branch="false" />
            <line number="76" hits="1" branch="false" />
            <line number="77" hits="1" branch="false" />
            <line number="78" hits="1" branch="false" />
            <line number="81" hits="1" branch="false" />
            <line number="84" hits="0" branch="false" />
            <line number="85" hits="0" branch="false" />
            <line number="89" hits="1" branch="false" />
            <line number="91" hits="1" branch="false" />
            <line number="92" hits="1" branch="false" />
            <line number="94" hits="1" branch="false" />
            <line number="97" hits="2" branch="false" />
            <line number="100" hits="1" branch="false" />
            <line number="101" hits="0" branch="false" />
          </lines>
        </class>
      </classes>
    </package>
    <package name="Moq" line-rate="0.16012084592145" branch-rate="0.07666015625" complexity="1937">
      <classes>
        <class name="Moq.ActionObserver" filename="C:\projects\moq4\src\Moq\ActionObserver.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReconstructExpression" signature="(System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateProxy" signature="(System.Type,System.Object[],Moq.MatcherObserver,Moq.ActionObserver/Recorder&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invocation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Next" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MatcherObserver)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Intercept" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.AsInterface`1" filename="C:\projects\moq4\src\Moq\AsInterface.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="AdditionalInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfiguredDefaultValues" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MutableInvocations" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsObjectInitialized" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MockedType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Behavior" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="(Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InheritedInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Object" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MutableSetups" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="(Moq.Switches)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="As" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnGetObject" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.Awaitable" filename="C:\projects\moq4\src\Moq\Async\Awaitable.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TryGetResultRecursive" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.AwaitableFactory" filename="C:\projects\moq4\src\Moq\Async\AwaitableFactory.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Create" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGet" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.AwaitableFactory`1" filename="C:\projects\moq4\src\Moq\Async\AwaitableFactory`1.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Async.IAwaitableFactory.get_ResultType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateCompleted" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateResultExpression" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.TryGetResult" signature="(System.Object,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.AwaitableFactory`2" filename="C:\projects\moq4\src\Moq\Async\AwaitableFactory`2.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ResultType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateCompleted" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.TryGetResult" signature="(System.Object,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.AwaitExpression" filename="C:\projects\moq4\src\Moq\Async\AwaitExpression.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="CanReduce" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NodeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Operand" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Async.IAwaitableFactory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VisitChildren" signature="(System.Linq.Expressions.ExpressionVisitor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.TaskFactory" filename="C:\projects\moq4\src\Moq\Async\TaskFactory.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateCompleted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.TaskFactory`1" filename="C:\projects\moq4\src\Moq\Async\TaskFactory`1.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateCompleted" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateResultExpression" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetResult" signature="(System.Threading.Tasks.Task`1&lt;TResult&gt;,TResult&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.ValueTaskFactory" filename="C:\projects\moq4\src\Moq\Async\ValueTaskFactory.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateCompleted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.ValueTaskFactory`1" filename="C:\projects\moq4\src\Moq\Async\ValueTaskFactory`1.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateCompleted" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateResultExpression" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetResult" signature="(System.Threading.Tasks.ValueTask`1&lt;TResult&gt;,TResult&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behavior" filename="C:\projects\moq4\src\Moq\Behavior.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.Callback" filename="C:\projects\moq4\src\Moq\Behaviors\Callback.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Action`1&lt;Moq.IInvocation&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.LimitInvocationCount" filename="C:\projects\moq4\src\Moq\Behaviors\LimitInvocationCount.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Moq.MethodCall,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.NoOp" filename="C:\projects\moq4\src\Moq\Behaviors\NoOp.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.RaiseEvent" filename="C:\projects\moq4\src\Moq\Behaviors\RaiseEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Delegate,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ReturnBase" filename="C:\projects\moq4\src\Moq\Behaviors\ReturnBase.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ReturnBaseOrDefaultValue" filename="C:\projects\moq4\src\Moq\Behaviors\ReturnBaseOrDefaultValue.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ReturnComputedValue" filename="C:\projects\moq4\src\Moq\Behaviors\ReturnComputedValue.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Func`2&lt;Moq.IInvocation,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ReturnValue" filename="C:\projects\moq4\src\Moq\Behaviors\ReturnValue.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ThrowComputedException" filename="C:\projects\moq4\src\Moq\Behaviors\ThrowComputedException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Func`2&lt;Moq.IInvocation,System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ThrowException" filename="C:\projects\moq4\src\Moq\Behaviors\ThrowException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Capture" filename="C:\projects\moq4\src\Moq\Capture.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="In" signature="(System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="In" signature="(System.Collections.Generic.IList`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="With" signature="(Moq.CaptureMatch`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.CaptureMatch`1" filename="C:\projects\moq4\src\Moq\CaptureMatch.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BuildCondition" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.CastleProxyFactory" filename="C:\projects\moq4\src\Moq\Interception\CastleProxyFactory.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateProxy" signature="(System.Type,Moq.IInterceptor,System.Type[],System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMethodVisible" signature="(System.Reflection.MethodInfo,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsTypeVisible" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.IInterceptor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Intercept" signature="(Castle.DynamicProxy.IInvocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Castle.DynamicProxy.IInvocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DetachFromUnderlying" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ShouldInterceptMethod" signature="(System.Type,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRelevantObjectMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Condition" filename="C:\projects\moq4\src\Moq\Condition.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="IsTrue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Boolean&gt;,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.DefaultExpressionCompiler" filename="C:\projects\moq4\src\Moq\DefaultExpressionCompiler.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Compile" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Compile" signature="(System.Linq.Expressions.Expression`1&lt;TDelegate&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.DefaultValueProvider" filename="C:\projects\moq4\src\Moq\DefaultValueProvider.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Kind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetDefaultParameterValue" signature="(System.Reflection.ParameterInfo,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultReturnValue" signature="(System.Reflection.MethodInfo,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.EmptyDefaultValueProvider" filename="C:\projects\moq4\src\Moq\EmptyDefaultValueProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Kind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateArray" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateEnumerable" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateEnumerableOf" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQueryable" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQueryableOf" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Evaluator" filename="C:\projects\moq4\src\Moq\Evaluator.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="PartialEval" signature="(System.Linq.Expressions.Expression,System.Func`2&lt;System.Linq.Expressions.Expression,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartialEval" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.HashSet`1&lt;System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Eval" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`2&lt;System.Linq.Expressions.Expression,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nominate" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.EventHandlerCollection" filename="C:\projects\moq4\src\Moq\EventHandlerCollection.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="(System.Reflection.EventInfo,System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Remove" signature="(System.Reflection.EventInfo,System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGet" signature="(System.Reflection.EventInfo,System.Delegate&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGet" signature="(System.Reflection.EventInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Expectation" filename="C:\projects\moq4\src\Moq\Expectation.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="HasResultExpression" signature="(Moq.Async.IAwaitableFactory&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionComparer" filename="C:\projects\moq4\src\Moq\ExpressionComparer.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt;,System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt;,System.Func`3&lt;T,T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsBinary" signature="(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.BinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsConditional" signature="(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.ConditionalExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsConstant" signature="(System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsElementInit" signature="(System.Linq.Expressions.ElementInit,System.Linq.Expressions.ElementInit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsIndex" signature="(System.Linq.Expressions.IndexExpression,System.Linq.Expressions.IndexExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsInvocation" signature="(System.Linq.Expressions.InvocationExpression,System.Linq.Expressions.InvocationExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsLambda" signature="(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsListInit" signature="(System.Linq.Expressions.ListInitExpression,System.Linq.Expressions.ListInitExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberAssignment" signature="(System.Linq.Expressions.MemberAssignment,System.Linq.Expressions.MemberAssignment)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberBinding" signature="(System.Linq.Expressions.MemberBinding,System.Linq.Expressions.MemberBinding)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMember" signature="(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberInit" signature="(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.MemberInitExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberListBinding" signature="(System.Linq.Expressions.MemberListBinding,System.Linq.Expressions.MemberListBinding)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberMemberBinding" signature="(System.Linq.Expressions.MemberMemberBinding,System.Linq.Expressions.MemberMemberBinding)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMethodCall" signature="(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsNewArray" signature="(System.Linq.Expressions.NewArrayExpression,System.Linq.Expressions.NewArrayExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsNew" signature="(System.Linq.Expressions.NewExpression,System.Linq.Expressions.NewExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsParameter" signature="(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsTypeBinary" signature="(System.Linq.Expressions.TypeBinaryExpression,System.Linq.Expressions.TypeBinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsUnary" signature="(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsExtension" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionCompiler" filename="C:\projects\moq4\src\Moq\ExpressionCompiler.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Default" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Instance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Instance" signature="(Moq.ExpressionCompiler)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionExtensions" filename="C:\projects\moq4\src\Moq\ExpressionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ConvertIfNeeded" signature="(System.Linq.Expressions.Expression,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileUsingExpressionCompiler" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileUsingExpressionCompiler" signature="(System.Linq.Expressions.Expression`1&lt;TDelegate&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatch" signature="(System.Linq.Expressions.Expression,Moq.Match&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanSplit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Split" signature="(System.Linq.Expressions.LambdaExpression,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetReboundProperty" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToPropertyInfo" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsProperty" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsPropertyIndexer" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssignItIsAny" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TMock,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartialEval" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartialMatcherAwareEval" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartialMatcherAwareEval_ShouldEvaluate" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToStringFixed" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionExtensions" filename="C:\projects\moq4\src\Moq\Expressions\Visitors\Apply.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Apply" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionVisitor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionReconstructor" filename="C:\projects\moq4\src\Moq\ExpressionReconstructor.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Instance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Instance" signature="(Moq.ExpressionReconstructor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Expressions.Visitors.ConstructorCallVisitor" filename="C:\projects\moq4\src\Moq\Expressions\Visitors\ConstructorCallVisitor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExtractArgumentValues" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitNew" signature="(System.Linq.Expressions.NewExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Expressions.Visitors.EvaluateCaptures" filename="C:\projects\moq4\src\Moq\Expressions\Visitors\EvaluateCaptures.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="VisitMember" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitUnary" signature="(System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Expressions.Visitors.UpgradePropertyAccessorMethods" filename="C:\projects\moq4\src\Moq\Expressions\Visitors\UpgradePropertyAccessorMethods.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="VisitMethodCall" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Extensions" filename="C:\projects\moq4\src\Moq\Extensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanCreateInstance" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanRead" signature="(System.Reflection.PropertyInfo,System.Reflection.MethodInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanRead" signature="(System.Reflection.PropertyInfo,System.Reflection.MethodInfo&amp;,System.Reflection.PropertyInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanWrite" signature="(System.Reflection.PropertyInfo,System.Reflection.MethodInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanWrite" signature="(System.Reflection.PropertyInfo,System.Reflection.MethodInfo&amp;,System.Reflection.PropertyInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultValue" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetImplementingMethod" signature="(System.Reflection.MethodInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokePreserveStack" signature="(System.Delegate,System.Collections.Generic.IReadOnlyList`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExtensionMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGetAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSetAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIndexerAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsPropertyAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEventAddAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEventRemoveAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDelegateType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMockable" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsTypeMatcher" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsTypeMatcher" signature="(System.Type,System.Type&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOrContainsTypeMatcher" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplementsTypeMatcherProtocol" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanOverride" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanOverrideGet" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanOverrideSet" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethods" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTo" signature="(TTypes,TOtherTypes,System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterTypeList" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterTypes" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareParameterTypesTo" signature="(System.Delegate,TOtherTypes)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInvokeMethodFromUntypedDelegateCallback" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstituteTypeMatchers" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindAllInnerMocks" signature="(Moq.SetupCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindLastInnerMock" signature="(Moq.SetupCollection,System.Func`2&lt;Moq.Setup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.FailForStrictMock" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.FindAndExecuteMatchingSetup" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.GeneratedReturnsExtensions" filename="C:\projects\moq4\src\Moq\ReturnsExtensions.Generated.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`3&lt;T1,T2,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`4&lt;T1,T2,T3,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`5&lt;T1,T2,T3,T4,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`6&lt;T1,T2,T3,T4,T5,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`7&lt;T1,T2,T3,T4,T5,T6,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`3&lt;T1,T2,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`4&lt;T1,T2,T3,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`5&lt;T1,T2,T3,T4,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`6&lt;T1,T2,T3,T4,T5,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`7&lt;T1,T2,T3,T4,T5,T6,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Guard" filename="C:\projects\moq4\src\Moq\Guard.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanCreateInstance" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplementsInterface" signature="(System.Type,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplementsTypeMatcherProtocol" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAssignmentToPropertyOrIndexer" signature="(System.Linq.Expressions.LambdaExpression,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOverridable" signature="(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsVisibleToProxyFactory" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEventAdd" signature="(System.Linq.Expressions.LambdaExpression,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEventRemove" signature="(System.Linq.Expressions.LambdaExpression,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotNull" signature="(System.Object,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotNullOrEmpty" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotField" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMockable" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Positive" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanRead" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanWrite" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.HandleEventSubscription" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.HandleWellKnownMethods" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleEquals" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleGetHashCode" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleToString" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleMockGetter" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsObjectMethodWithoutSetup" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ImmutablePopOnlyStack`1" filename="C:\projects\moq4\src\Moq\ImmutablePopOnlyStack.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pop" signature="(Moq.ImmutablePopOnlyStack`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.InnerMockSetup" filename="C:\projects\moq4\src\Moq\InnerMockSetup.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.MethodExpectation,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResetCore" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="VerifySelf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Internals.InterfaceProxy" filename="C:\projects\moq4\src\Moq\Interception\InterfaceProxy.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Invocation" filename="C:\projects\moq4\src\Moq\Invocation.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="Method" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodImplementation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IInvocation.get_Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchingSetup" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProxyType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnValue" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsVerified" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertResultToAwaitable" signature="(Moq.Async.IAwaitableFactory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MarkAsMatchedBy" signature="(Moq.Setup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MarkAsVerified" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MarkAsVerifiedIfMatchedBy" signature="(System.Func`2&lt;Moq.Setup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Exception" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.InvocationAction" filename="C:\projects\moq4\src\Moq\InvocationAction.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Action`1&lt;Moq.IInvocation&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.InvocationCollection" filename="C:\projects\moq4\src\Moq\InvocationCollection.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ToArray" signature="(System.Func`2&lt;Moq.Invocation,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.InvocationFunc" filename="C:\projects\moq4\src\Moq\InvocationFunc.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Func`2&lt;Moq.IInvocation,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.It" filename="C:\projects\moq4\src\Moq\It.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="IsAny" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="IsAny" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotNull" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="Is" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TValue,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Is" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`3&lt;System.Object,System.Type,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Is" signature="(TValue,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInRange" signature="(TValue,TValue,Moq.Range)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIn" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIn" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIn" signature="(TValue[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotIn" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotIn" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotIn" signature="(TValue[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRegex" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRegex" signature="(System.String,System.Text.RegularExpressions.RegexOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Moq.ITypeMatcher.Matches" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.ITypeMatcher.Matches" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.ITypeMatcher.Matches" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.NonVoidSetupPhrase`2" filename="C:\projects\moq4\src\Moq\Language\Flow\NonVoidSetupPhrase.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Moq.MethodCall)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(Moq.InvocationAction)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Language.ICallbackGetter&lt;T,TResult&gt;.Callback" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`1&lt;T1&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`3&lt;T1,T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`4&lt;T1,T2,T3,T4&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`5&lt;T1,T2,T3,T4,T5&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`6&lt;T1,T2,T3,T4,T5,T6&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`7&lt;T1,T2,T3,T4,T5,T6,T7&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`8&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.EventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`2&lt;T1,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`3&lt;T1,T2,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`4&lt;T1,T2,T3,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`5&lt;T1,T2,T3,T4,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`6&lt;T1,T2,T3,T4,T5,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`7&lt;T1,T2,T3,T4,T5,T6,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`17&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(Moq.InvocationFunc)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`2&lt;T1,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`3&lt;T1,T2,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`4&lt;T1,T2,T3,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`5&lt;T1,T2,T3,T4,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`6&lt;T1,T2,T3,T4,T5,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`7&lt;T1,T2,T3,T4,T5,T6,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`17&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.SetterSetupPhrase`2" filename="C:\projects\moq4\src\Moq\Language\Flow\SetterSetupPhrase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.MethodCall)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`1&lt;TProperty&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.SetupPhrase" filename="C:\projects\moq4\src\Moq\Language\Flow\SetupPhrase.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Setup" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MethodCall)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtMost" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtMostOnce" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Callback" signature="(Moq.InvocationAction)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`3&lt;T1,T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`4&lt;T1,T2,T3,T4&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`5&lt;T1,T2,T3,T4,T5&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`6&lt;T1,T2,T3,T4,T5,T6&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`7&lt;T1,T2,T3,T4,T5,T6,T7&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`8&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`2&lt;T,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`3&lt;T1,T2,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`4&lt;T1,T2,T3,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`5&lt;T1,T2,T3,T4,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`6&lt;T1,T2,T3,T4,T5,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`7&lt;T1,T2,T3,T4,T5,T6,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`17&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verifiable" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Verifiable" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.SetupSequencePhrase" filename="C:\projects\moq4\src\Moq\Language\Flow\SetupSequencePhrase.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(Moq.SequenceSetup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pass" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.SetupSequencePhrase`1" filename="C:\projects\moq4\src\Moq\Language\Flow\SetupSequencePhrase.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(Moq.SequenceSetup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Returns" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.VoidSetupPhrase`1" filename="C:\projects\moq4\src\Moq\Language\Flow\VoidSetupPhrase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.MethodCall)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.EventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`2&lt;T1,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`3&lt;T1,T2,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`4&lt;T1,T2,T3,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`5&lt;T1,T2,T3,T4,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`6&lt;T1,T2,T3,T4,T5,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`7&lt;T1,T2,T3,T4,T5,T6,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`17&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.WhenPhrase`1" filename="C:\projects\moq4\src\Moq\Language\Flow\WhenPhrase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.Mock`1&lt;T&gt;,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Linq.MockQueryable`1" filename="C:\projects\moq4\src\Moq\Linq\MockQuery.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="ElementType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Provider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQuery" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQuery" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Linq.MockSetupsBuilder" filename="C:\projects\moq4\src\Moq\Linq\MockSetupsBuilder.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="VisitBinary" signature="(System.Linq.Expressions.BinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMember" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMethodCall" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitUnary" signature="(System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToSetup" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToSetupReturns" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MockObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MockObjectParameter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMember" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitParameter" signature="(System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitUnary" signature="(System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.LookupOrFallbackDefaultValueProvider" filename="C:\projects\moq4\src\Moq\LookupOrFallbackDefaultValueProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Deregister" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Register" signature="(System.Type,System.Func`3&lt;System.Type,Moq.Mock,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultParameterValue" signature="(System.Reflection.ParameterInfo,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultReturnValue" signature="(System.Reflection.MethodInfo,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultValue" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFallbackDefaultValue" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateValueTupleOf" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Match" filename="C:\projects\moq4\src\Moq\Match.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="RenderExpression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RenderExpression" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matcher" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Moq.IMatcher.Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.IMatcher.SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Predicate`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Predicate`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Func`3&lt;System.Object,System.Type,System.Boolean&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Register" signature="(Moq.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Match`1" filename="C:\projects\moq4\src\Moq\Match.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Condition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Condition" signature="(System.Predicate`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Success" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Success" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Predicate`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;,System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanCast" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Match`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MatcherFactory" filename="C:\projects\moq4\src\Moq\MatcherFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateMatchers" signature="(System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;,System.Reflection.ParameterInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMatcher" signature="(System.Linq.Expressions.Expression,System.Reflection.ParameterInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMatcher" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MatcherObserver" filename="C:\projects\moq4\src\Moq\MatcherObserver.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Activate" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="IsActive" signature="(Moq.MatcherObserver&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetNextTimestamp" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMatch" signature="(Moq.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetLastMatch" signature="(Moq.Match&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchesBetween" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,Moq.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.AnyMatcher" filename="C:\projects\moq4\src\Moq\Matchers\AnyMatcher.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Instance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.ConstantMatcher" filename="C:\projects\moq4\src\Moq\Matchers\ConstantMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchesEnumerable" signature="(System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.ExpressionMatcher" filename="C:\projects\moq4\src\Moq\Matchers\ExpressionMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.LazyEvalMatcher" filename="C:\projects\moq4\src\Moq\Matchers\LazyEvalMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.MatcherAttributeMatcher" filename="C:\projects\moq4\src\Moq\Matchers\MatcherAttributeMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveValidatorMethod" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.ParamArrayMatcher" filename="C:\projects\moq4\src\Moq\Matchers\ParamArrayMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.IMatcher[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.RefMatcher" filename="C:\projects\moq4\src\Moq\Matchers\RefMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MatchExpression" filename="C:\projects\moq4\src\Moq\MatchExpression.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="NodeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanReduce" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitChildren" signature="(System.Linq.Expressions.ExpressionVisitor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MatchFactory" filename="C:\projects\moq4\src\Moq\Match.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Func`3&lt;System.Object,System.Type,System.Boolean&gt;,System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanCast" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MethodCall" filename="C:\projects\moq4\src\Moq\MethodCall.cs" line-rate="1" branch-rate="1" complexity="19">
          <methods>
            <method name="FailMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Condition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.Condition,Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetUserCodeCallSite" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetCallBaseBehavior" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="SetCallbackBehavior" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetFailMessage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetRaiseEventBehavior" signature="(System.Action`1&lt;TMock&gt;,System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetRaiseEventBehavior" signature="(System.Action`1&lt;TMock&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetReturnValueBehavior" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetReturnComputedValueBehavior" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetThrowExceptionBehavior" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetThrowComputedExceptionBehavior" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResetCore" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="AtMost" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ValidateNumberOfCallbackParameters" signature="(System.Delegate,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateCallbackReturnType" signature="(System.Reflection.MethodInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get_InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MethodExpectation" filename="C:\projects\moq4\src\Moq\MethodExpectation.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFrom" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.LambdaExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;,System.Boolean,System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddResultExpression" signature="(System.Func`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;,Moq.Async.IAwaitableFactory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasResultExpression" signature="(Moq.Async.IAwaitableFactory&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deconstruct" signature="(System.Linq.Expressions.LambdaExpression&amp;,System.Reflection.MethodInfo&amp;,System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatch" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOverride" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Expectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartiallyEvaluateArguments" signature="(System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MethodSetup" filename="C:\projects\moq4\src\Moq\MethodSetup.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Method" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock" filename="C:\projects\moq4\src\Moq\Interception\Mock.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Moq.IInterceptor.Intercept" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock" filename="C:\projects\moq4\src\Moq\Linq\Mock.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Of" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Of" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock" filename="C:\projects\moq4\src\Moq\Mock.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="DefaultValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="(Moq.DefaultValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Object" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invocations" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setups" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Get" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(Moq.Mock[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAll" signature="(Moq.Mock[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VerifyAll" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Verify" signature="(System.Func`2&lt;Moq.ISetup,System.Boolean&gt;,System.Collections.Generic.HashSet`1&lt;Moq.Mock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyNoOtherCalls" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyNoOtherCalls" signature="(Moq.Mock,System.Collections.Generic.HashSet`1&lt;Moq.Mock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingInvocationCount" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.List`1&lt;Moq.Pair`2&lt;Moq.Invocation,Moq.MethodExpectation&gt;&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingInvocationCount" signature="(Moq.Mock,Moq.ImmutablePopOnlyStack`1&lt;Moq.MethodExpectation&gt;&amp;,System.Collections.Generic.HashSet`1&lt;Moq.Mock&gt;,System.Collections.Generic.List`1&lt;Moq.Pair`2&lt;Moq.Invocation,Moq.MethodExpectation&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupReturns" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupAdd" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupRemove" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupProperty" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupRecursive" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Func`4&lt;Moq.Mock,System.Linq.Expressions.Expression,Moq.MethodExpectation,TSetup&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupRecursive" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Stack`1&lt;Moq.MethodExpectation&gt;,System.Func`4&lt;Moq.Mock,System.Linq.Expressions.Expression,Moq.MethodExpectation,TSetup&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupAllProperties" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaiseEvent" signature="(Moq.Mock,System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaiseEvent" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Stack`1&lt;Moq.MethodExpectation&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplementsInterface" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetReturnsDefault" signature="(TReturn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultValue" signature="(System.Reflection.MethodInfo,Moq.Mock&amp;,Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock`1" filename="C:\projects\moq4\src\Moq\Mock`1.cs" line-rate="1" branch-rate="1" complexity="19">
          <methods>
            <method name="Behavior" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfiguredDefaultValues" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="(Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdditionalInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MutableInvocations" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsObjectInitialized" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Object" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MockedType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MutableSetups" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InheritedInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="(Moq.Switches)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MockBehavior,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateUniqueDefaultMockName" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CheckParameters" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InitializeInstance" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnGetObject" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="As" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupAdd" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupRemove" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupProperty" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupProperty" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupAllProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="When" signature="(System.Func`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyNoOtherCalls" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Raise" signature="(System.Action`1&lt;T&gt;,System.EventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raise" signature="(System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock`1" filename="C:\projects\moq4\src\Moq\Obsolete\Mock.Generic.Legacy.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Expect" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expect" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectSet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectSet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockDefaultValueProvider" filename="C:\projects\moq4\src\Moq\MockDefaultValueProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Kind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetFallbackDefaultValue" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockException" filename="C:\projects\moq4\src\Moq\MockException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Reasons" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsVerificationError" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MoreThanOneCall" signature="(Moq.MethodCall,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MoreThanNCalls" signature="(Moq.MethodCall,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoMatchingCalls" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.String,Moq.Times,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoSetup" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnValueRequired" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnmatchedSetup" signature="(Moq.Setup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromInnerMockOf" signature="(Moq.ISetup,Moq.MockException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Combined" signature="(System.Collections.Generic.IEnumerable`1&lt;Moq.MockException&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnverifiedInvocations" signature="(Moq.Mock,System.Collections.Generic.IEnumerable`1&lt;Moq.Invocation&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MockExceptionReasons,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetObjectData" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockExtensions" filename="C:\projects\moq4\src\Moq\MockExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Reset" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockExtensions" filename="C:\projects\moq4\src\Moq\Obsolete\MockExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ResetCalls" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockFactory" filename="C:\projects\moq4\src\Moq\Obsolete\MockFactory.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="Behavior" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="(Moq.DefaultValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="(Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mocks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="(Moq.Switches)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Create" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(Moq.MockBehavior,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMock" signature="(Moq.MockBehavior,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VerifyAll" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VerifyNoOtherCalls" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VerifyMocks" signature="(System.Action`1&lt;Moq.Mock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockLegacyExtensions" filename="C:\projects\moq4\src\Moq\Obsolete\Mock.Generic.Legacy.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SetupSet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockRepository" filename="C:\projects\moq4\src\Moq\Linq\MockRepository.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="Of" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Of" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneOf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OneOf" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneOf" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneOf" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMockQuery" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQueryable" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMocks" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockRepository" filename="C:\projects\moq4\src\Moq\MockRepository.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mocks" filename="C:\projects\moq4\src\Moq\Linq\Mocks.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="Of" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Of" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneOf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OneOf" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMockQuery" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQueryable" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMocks" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockSequence" filename="C:\projects\moq4\src\Moq\MockSequence.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Cyclic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cyclic" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NextStep" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="For" signature="(Moq.Mock`1&lt;TMock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockSequenceHelper" filename="C:\projects\moq4\src\Moq\MockSequence.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="InSequence" signature="(Moq.Mock`1&lt;TMock&gt;,Moq.MockSequence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ObsoleteMockExtensions" filename="C:\projects\moq4\src\Moq\Obsolete\ObsoleteMockExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SetupSet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Pair`2" filename="C:\projects\moq4\src\Moq\Pair.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name=".ctor" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deconstruct" signature="(T1&amp;,T2&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Pair`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="11">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ParameterTypes" filename="C:\projects\moq4\src\Moq\ParameterTypes.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.ParameterInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Protected.ItExpr" filename="C:\projects\moq4\src\Moq\Protected\ItExpr.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="IsNull" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsAny" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Is" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TValue,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInRange" signature="(TValue,TValue,Moq.Range)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRegex" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRegex" signature="(System.String,System.Text.RegularExpressions.RegexOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAny" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Protected.ProtectedAsMock`2" filename="C:\projects\moq4\src\Moq\Protected\ProtectedAsMock.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Moq.Mock`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;TAnalog&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;TAnalog&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;TAnalog&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupProperty" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;TAnalog&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;TAnalog&gt;&gt;,System.Nullable`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TResult&gt;&gt;,System.Nullable`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;TAnalog&gt;,System.Nullable`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TProperty&gt;&gt;,System.Nullable`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReconstructAndReplaceSetter" signature="(System.Action`1&lt;TAnalog&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReplaceDuck" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMethodCall" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitIndex" signature="(System.Linq.Expressions.IndexExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMember" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindCorrespondingMember" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindCorrespondingMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindCorrespondingProperty" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCorrespondingMethod" signature="(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCorrespondingProperty" signature="(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Protected.ProtectedExtension" filename="C:\projects\moq4\src\Moq\Protected\ProtectedExtension.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Protected" signature="(Moq.Mock`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Protected.ProtectedMock`1" filename="C:\projects\moq4\src\Moq\Protected\ProtectedMock.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name=".ctor" signature="(Moq.Mock`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="As" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalSetup" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalSetup" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalSetupSequence" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalSetupSequence" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,Moq.Times,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,System.Type[],Moq.Times,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,System.Type[],Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalVerify" signature="(System.String,System.Type[],Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,Moq.Times,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,System.Type[],Moq.Times,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,System.Type[],Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalVerify" signature="(System.String,System.Type[],Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.String,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.String,Moq.Times,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMemberAccess" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethod" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodCall" signature="(System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodCall" signature="(System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetProperty" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSetterExpression" signature="(System.Reflection.PropertyInfo,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfMemberMissing" signature="(System.String,System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfMethodMissing" signature="(System.String,System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfPublicMethod" signature="(System.Reflection.MethodInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfPublicGetter" signature="(System.Reflection.PropertyInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfPublicSetter" signature="(System.Reflection.PropertyInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfVoidMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArgTypes" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsItRefAny" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ItRefAnyField" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToExpressionArg" signature="(System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToExpressionArgs" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ProxyFactory" filename="C:\projects\moq4\src\Moq\Interception\ProxyFactory.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Instance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.RecordInvocation" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Return" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ReturnsExtensions" filename="C:\projects\moq4\src\Moq\ReturnsExtensions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNullResult" signature="(System.Delegate,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDelay" signature="(System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayedResult" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayedResult" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayedException" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayedException" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SequenceExtensions" filename="C:\projects\moq4\src\Moq\Obsolete\SequenceExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SetupSequence" signature="(Moq.Mock`1&lt;TMock&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TMock,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(Moq.Mock`1&lt;TMock&gt;,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;TMock&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SequenceExtensions" filename="C:\projects\moq4\src\Moq\SequenceExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PassAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PassAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SequenceSetup" filename="C:\projects\moq4\src\Moq\SequenceSetup.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddBehavior" signature="(Moq.Behavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Setup" filename="C:\projects\moq4\src\Moq\Setup.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="Condition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ISetup.get_InnerMock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsConditional" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOverridden" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsVerifiable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OriginalExpression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatched" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.Expectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MarkAsOverridden" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MarkAsVerifiable" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Matches" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetOutParameters" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Verify" signature="(System.Boolean,System.Func`2&lt;Moq.ISetup,System.Boolean&gt;,System.Collections.Generic.HashSet`1&lt;Moq.Mock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySelf" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ResetCore" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Verify" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAll" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Verify" signature="(System.Boolean,System.Func`2&lt;Moq.ISetup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetInnerMockFrom" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SetupCollection" filename="C:\projects\moq4\src\Moq\SetupCollection.cs" line-rate="1" branch-rate="1" complexity="14">
          <methods>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="(Moq.Setup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MarkOverriddenSetups" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="FindAll" signature="(System.Func`2&lt;Moq.Setup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindLast" signature="(System.Func`2&lt;Moq.Setup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SetupWithOutParameterSupport" filename="C:\projects\moq4\src\Moq\SetupWithOutParameterSupport.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetOutParameters" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOutValues" signature="(System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;,System.Reflection.ParameterInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.StringBuilderExtensions" filename="C:\projects\moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendElementInit" signature="(System.Text.StringBuilder,System.Linq.Expressions.ElementInit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.BinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.TypeBinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.ConditionalExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.IndexExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.NewExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.NewArrayExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.InvocationExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.MemberInitExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.ListInitExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,Moq.MatchExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.StringBuilderExtensions" filename="C:\projects\moq4\src\Moq\StringBuilderExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Append" signature="(System.Text.StringBuilder,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendCommaSeparated" signature="(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Func`3&lt;System.Text.StringBuilder,T,System.Text.StringBuilder&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendCommaSeparated" signature="(System.Text.StringBuilder,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Func`3&lt;System.Text.StringBuilder,T,System.Text.StringBuilder&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendIndented" signature="(System.Text.StringBuilder,System.String,System.Int32,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendNameOf" signature="(System.Text.StringBuilder,System.Reflection.MethodBase,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendNameOf" signature="(System.Text.StringBuilder,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendParameterType" signature="(System.Text.StringBuilder,System.Reflection.ParameterInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendValueOf" signature="(System.Text.StringBuilder,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TrimEnd" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.StubbedPropertiesSetup" filename="C:\projects\moq4\src\Moq\StubbedPropertiesSetup.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="DefaultValueProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Mock,Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetProperty" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySelf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Expectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsMatch" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get_InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.StubbedPropertySetup" filename="C:\projects\moq4\src\Moq\StubbedPropertySetup.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name=".ctor" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="VerifySelf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.LambdaExpression,System.Reflection.MethodInfo,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Expectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="IsMatch" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get_InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Times" filename="C:\projects\moq4\src\Moq\Times.cs" line-rate="1" branch-rate="1" complexity="16">
          <methods>
            <method name=".ctor" signature="(Moq.Times/Kind,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deconstruct" signature="(System.Int32&amp;,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtLeast" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtLeastOnce" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AtMost" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtMostOnce" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Between" signature="(System.Int32,System.Int32,Moq.Range)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exactly" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Never" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Equality" signature="(Moq.Times,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Inequality" signature="(Moq.Times,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="11">
              <lines />
            </method>
            <method name="GetExceptionMessage" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Validate" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.TypeMatcherAttribute" filename="C:\projects\moq4\src\Moq\TypeMatcherAttribute.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="TypeNameFormatter.TypeName" filename="C:\projects\moq4\src\Moq\obj\TypeNameFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AppendFormattedName" signature="(System.Text.StringBuilder,System.Type,TypeNameFormatter.TypeNameFormatOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFormattedName" signature="(System.Type,TypeNameFormatter.TypeNameFormatOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendFormattedName" signature="(System.Text.StringBuilder,System.Type,TypeNameFormatter.TypeNameFormatOptions,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSet" signature="(TypeNameFormatter.TypeNameFormatOptions,TypeNameFormatter.TypeNameFormatOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDeclaredProperties" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetGenericTypeArguments" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsConstructedGenericType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="NUnit3.TestAdapter" line-rate="0.294253760123409" branch-rate="0.134840218238504" complexity="1088">
      <classes>
        <class name="NUnit.VisualStudio.TestAdapter.AdapterSettings" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\AdapterSettings.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="MaxCpuCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxCpuCount" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResultsDirectory" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResultsDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetPlatform" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetPlatform" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFrameworkVersion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFrameworkVersion" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAdapterPaths" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAdapterPaths" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectSourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectSourceInformation" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableAppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableAppDomain" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelization" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelization" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DesignMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DesignMode" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestProperties" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalTraceLevel" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalTraceLevel" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalTraceLevelEnum" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalTraceLevelEnum" signature="(NUnit.Engine.InternalTraceLevel)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkDirectory" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputXml" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputXml" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseTestOutputXml" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OutputXmlFolderMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OutputXmlFolderMode" signature="(NUnit.VisualStudio.TestAdapter.OutputXmlFolderMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputFolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputFolder" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewOutputXmlFileForEachRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewOutputXmlFileForEachRun" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTimeout" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTimeout" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NumberOfTestWorkers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NumberOfTestWorkers" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopyFiles" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopyFiles" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verbosity" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verbosity" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseVsKeepEngineRunning" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseVsKeepEngineRunning" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BasePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BasePath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrivateBinPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrivateBinPath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RandomSeed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RandomSeed" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RandomSeedSpecified" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RandomSeedSpecified" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectDataForEachTestSeparately" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectDataForEachTestSeparately" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InProcDataCollectorsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InProcDataCollectorsAvailable" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronousEvents" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronousEvents" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DomainUsage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DomainUsage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShowInternalProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShowInternalProperties" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseParentFQNForParametrizedTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseParentFQNForParametrizedTests" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseNUnitIdforTestCaseId" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseNUnitIdforTestCaseId" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleOut" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleOut" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnError" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnError" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoveryMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoveryMethod" signature="(NUnit.VisualStudio.TestAdapter.DiscoveryMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipNonTestAssemblies" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipNonTestAssemblies" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblySelectLimit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblySelectLimit" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseNUnitFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseNUnitFilter" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludeStackTraceForSuites" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludeStackTraceForSuites" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestCategoryType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestCategoryType" signature="(NUnit.VisualStudio.TestAdapter.VsTestCategoryType)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTestNamePattern" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTestNamePattern" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreFilter" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapWarningTo" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapWarningTo" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseTestNameInConsoleOutput" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseTestNameInConsoleOutput" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(NUnit.VisualStudio.TestAdapter.DisplayNameOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullnameSeparator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullnameSeparator" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExplicitMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExplicitMode" signature="(NUnit.VisualStudio.TestAdapter.ExplicitModeEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipExecutionWhenNoTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipExecutionWhenNoTests" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpXmlTestDiscovery" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpXmlTestDiscovery" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpXmlTestResults" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpXmlTestResults" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVsInput" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVsInput" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FreakMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FreakMode" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Debug" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Debug" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugExecution" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugExecution" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugDiscovery" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugDiscovery" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsureAttachmentFileScheme" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsureAttachmentFileScheme" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Load" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,NUnit.VisualStudio.TestAdapter.TestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Load" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseOutputXml" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetTestOutputFolder" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractNUnitDiagnosticSettings" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseInternalTraceLevel" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateTestProperties" signature="(System.Xml.XmlDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractRunConfiguration" signature="(System.Xml.XmlDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapTestCategory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapDisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SaveRandomSeed" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RestoreRandomSeed" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateNumberOfTestWorkers" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="GetInnerTextWithLog" signature="(System.Xml.XmlNode,System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerText" signature="(System.Xml.XmlNode,System.String,System.Boolean,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerTextAsInt" signature="(System.Xml.XmlNode,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerTextAsNullableInt" signature="(System.Xml.XmlNode,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerTextAsBool" signature="(System.Xml.XmlNode,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log" signature="(System.String,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapWarningOutcome" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapEnum" signature="(System.String,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.CategoryList" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\CategoryList.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="LastNodeListCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LastNodeListCount" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddRange" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProcessTestCaseProperties" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestCasePropertyInfo,System.Boolean,System.String,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInternalProperty" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTraitsToCache" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCachedInfo" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateCategoriesToVs" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Dump.DumpXml" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Dump\DumpXml.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.String,NUnit.VisualStudio.TestAdapter.Dump.IFile)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dump2File" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsurePathExist" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpForDiscovery" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DumpForExecution" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RandomName" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AddTestEvent" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVSInputFilter" signature="(NUnit.Engine.TestFilter,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVSInput" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVSInput2NUnit" signature="(NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpFromVSInput" signature="(System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,NUnit.Engine.TestFilter,NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartDiscoveryInExecution" signature="(System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,NUnit.Engine.TestFilter,NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartExecution" signature="(NUnit.Engine.TestFilter,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDump" signature="(System.String,System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Dump.File" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Dump\DumpXml.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WriteAllText" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DirectoryExist" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Dump.XmlNodeExtension" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Dump\XmlNodeExtension.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AsString" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Execution" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="TestOutputXmlFolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestLog" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Settings" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dump" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitEngineAdapter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.IExecutionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter,NUnit.VisualStudio.TestAdapter.NUnit3TestExecutor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestFilterBuilder" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateConverter" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.ExecutionFactory" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Create" signature="(NUnit.VisualStudio.TestAdapter.IExecutionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.IdeExecution" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.IExecutionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilterInCurrentMode" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Internal.StringExtensions" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Internal\Extensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsNullOrWhiteSpace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Internal.TimingLogger" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Internal\TimingLogger.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Stopwatch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings,NUnit.VisualStudio.TestAdapter.ITestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReStart" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="LogTime" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Metadata.AppDomainMetadataProvider" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Metadata\AppDomainMetadataProvider.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHelper" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetDeclaringType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStateMachineType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDeclaringType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStateMachineType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Metadata.DirectReflectionMetadataProvider" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Metadata\DirectReflectionMetadataProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="GetDeclaringType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStateMachineType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetSingleMethod" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Metadata.TypeInfo" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Metadata\TypeInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssemblyPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NavigationData" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NavigationData.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="FilePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsValid" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NavigationDataProvider" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NavigationDataProvider.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.String,NUnit.VisualStudio.TestAdapter.ITestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMetadataProvider" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,NUnit.VisualStudio.TestAdapter.ITestLogger,NUnit.VisualStudio.TestAdapter.Metadata.IMetadataProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetNavigationData" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoWithBreaker" signature="(System.Func`4&lt;System.String,System.String,System.String,System.Nullable`1&lt;NUnit.VisualStudio.TestAdapter.Metadata.TypeInfo&gt;&gt;,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetSessionData" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetSessionData" signature="(System.Nullable`1&lt;NUnit.VisualStudio.TestAdapter.Metadata.TypeInfo&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NTrait" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TraitsFeature.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NTraitNameComparer" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Equals" signature="(NUnit.VisualStudio.TestAdapter.NTrait,NUnit.VisualStudio.TestAdapter.NTrait)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(NUnit.VisualStudio.TestAdapter.NTrait)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnit3TestDiscoverer" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnit3TestDiscoverer.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="DiscoverTests" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProcessTestCases" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink,NUnit.VisualStudio.TestAdapter.TestConverterForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfDebug" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnit3TestExecutor" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnit3TestExecutor.cs" line-rate="1" branch-rate="1" complexity="18">
          <methods>
            <method name="RunType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunType" signature="(NUnit.VisualStudio.TestAdapter.RunType)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunContext" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunContext" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FrameworkHandle" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FrameworkHandle" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EngineAdapter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputXmlFolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputXmlFolder" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dump" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dump" signature="(NUnit.VisualStudio.TestAdapter.Dump.IDumpXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetRunTypeByStrings" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInProcDataCollectorsSpecifiedWithMultipleAssemblies" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.Cancel" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InitializeForExecution" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAssembly" signature="(System.String,System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogActionAndSelection" signature="(System.String,NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RestoreRandomSeed" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestFilterBuilder" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateTestOutputFolder" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="StopRun" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="CheckIfDebug" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\DiscoveryConverter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Properties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Id" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fullname" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunState" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Int32,NUnit.VisualStudio.TestAdapter.NUnitEngine.RunStateEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\DiscoveryConverter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestConverterForXml" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestConverter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestRun" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDiscoveryMethodCurrent" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CurrentTestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TopLevelTestSuite" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicitRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfExplicitTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasExplicitTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LoadedTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfLoadedTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyPath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Settings" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestLog" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfLoadedTestCasesAboveLimit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExplicitTestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestLogger,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Convert" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertXml" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestSuite" signature="(System.Xml.Linq.XElement,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractAllFixtures" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestFixtures" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractParameterizedMethodsAndTheories" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestCases" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestCases,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestCase" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestCases,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractGenericTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractSetUpTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractParameterizedTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestAssembly" signature="(System.Xml.Linq.XElement,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractSuiteBasePropertiesClass" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestRun" signature="(System.Xml.Linq.XDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractRunState" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryException" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\DiscoveryException.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.Extensions" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\Extensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AllWithEmptyFalse" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Func`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCategoryFilter" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNegativeCategoryFilter" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitAttachment" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FilePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestCases" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfActualTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestCase" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestSuites" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetUpFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParameterizedFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfActualTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestSuite" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestSuite)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestGenericFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddSetUpFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySetUpFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddParameterizedFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedTestFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericMethod" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedMethod" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsParameterizedMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedTestFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryProperties" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="TheProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllInternal" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySetUpFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySuiteBase" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Id" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunState" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parent" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitDiscoveryProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicitReverse" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsParameterizedMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddToAllTestCases" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AllTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnableTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfExplicitTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestSuiteToAssembly" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestSuite)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddToAllTestCases" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seed" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestCases,System.String,System.String,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterizedMethods" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Theories" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfActualTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericMethods" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddParameterizedMethod" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTheory" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTheory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddGenericMethod" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestAssembly" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestSuite" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParentAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentAssembly" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTheory" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEngineAdapter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitEngineAdapter.cs" line-rate="1" branch-rate="1" complexity="14">
          <methods>
            <method name="TestEngine" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestEngine" signature="(NUnit.Engine.ITestEngine)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Runner" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Runner" signature="(NUnit.Engine.ITestRunner)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EngineEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="InitializeSettingsAndLogging" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings,NUnit.VisualStudio.TestAdapter.ITestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateRunner" signature="(NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Explore" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Explore" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(NUnit.Engine.ITestEventListener,NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogTiming" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.Internal.TimingLogger,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetService" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="StopRun" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="CloseRunner" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GenerateTestOutput" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXmlFilePath" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitEventTestCase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsTestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsParameterizedMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunState" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parent" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventWrongTypeException" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitFailure" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Stacktrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInternal" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitResults.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="TopNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRunnable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullTopNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasNoNUnitTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhatSkipReason" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEvent" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="15">
          <methods>
            <method name="IsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Label" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIgnored" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Duration" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitAttachments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestType" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Site" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartTime" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="EndTime" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventHeader" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventHeader.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Node" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventStartTest" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventStartTest.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventSuiteFinished" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventSuiteFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReasonMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailureMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasFailure" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventTestCase" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventTestCase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Failure" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReasonMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasFailure" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailureStackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventTestOutput" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventTestOutput.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Stream" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestId" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsProgressStream" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsErrorStream" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNullOrEmptyStream" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Content" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestNode" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestNode.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Node" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Node" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Id" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNull" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.UnicodeEscapeHelper" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\UnicodeEscapeHelper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="UnEscapeUnicodeCharacters" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryUnEscapeOneCharacter" signature="(System.String,System.Int32,System.Char&amp;,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEventListener" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEventListener.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="InitializeLifetimeService" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestConverterCommon,NUnit.VisualStudio.TestAdapter.INUnit3TestExecutor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestEvent" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finalize" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="TestStarted" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventStartTest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFinished" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SuiteFinished" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventSuiteFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutput" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitTestAdapter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitTestAdapter.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name="Settings" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Settings" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdapterVersion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdapterVersion" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitEngineAdapter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitEngineAdapter" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEngineAdapter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestLog" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestLog" signature="(NUnit.VisualStudio.TestAdapter.TestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkDir" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkDir" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhoIsCallingUsEntry" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRunningUnderIde" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForbiddenFolders" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForbiddenFolders" signature="(System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Initialize" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitializeForbiddenFolders" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="SetCurrentWorkingDirectory" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="CheckDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestPackage" signature="(System.String,System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetWorkDir" signature="(System.String,NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetTestParameters" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CleanUpRegisteredChannels" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Unload" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitTestFilterBuilder" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitTestFilterBuilder.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(NUnit.Engine.ITestFilterService,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertTfsFilterToNUnitFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter,System.Collections.Generic.IList`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertVsTestFilterToNUnitFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertVsTestFilterToNUnitFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertTfsFilterToNUnitFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterByWhere" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterByList" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Seed" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Seed.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestConverter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestConverter.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="CollectSourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitsCache" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestLogger,System.String,NUnit.VisualStudio.TestAdapter.IAdapterSettings,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ConvertTestCase" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCachedTestCase" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetVsTestResults" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase,System.Collections.Generic.ICollection`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTestCaseFromDiscoveryNode" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDisplayName" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTestResultFromLegacyXmlNode" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase,System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetBasicResult" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent,System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FillResultFromOutputNodes" signature="(System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseAttachments" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestOutcome" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestConverterForXml" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestConverterForXml.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="CollectSourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitsCache" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestLogger,System.String,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ConvertTestCase" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCachedTestCase" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetVsTestResults" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase,System.Collections.Generic.ICollection`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTestCaseFromXmlNode" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDisplayName" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTestResultFromLegacyXmlNode" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase,System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetBasicResult" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent,System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FillResultFromOutputNodes" signature="(System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseAttachments" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestOutcome" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="TestResults" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestResults" signature="(System.Collections.Generic.IList`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseResult" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseResult" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleOutput" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleOutput" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterCombiner" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(NUnit.Engine.TestFilter,NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFilter" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="StripFilter" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterConverter.TestFilterParser" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestFilterConverter\TestFilterParser.cs" line-rate="1" branch-rate="1" complexity="20">
          <methods>
            <method name="LookAhead" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parse" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseFilterExpression" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ParseFilterTerm" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ParseFilterCondition" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="UnEscape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitFullNameFilter" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitCategoryFilter" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitNameFilter" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitFilter" signature="(System.String,NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitPropertyFilter" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EscapeRhsValue" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseExpressionInParentheses" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Expect" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expect" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvalidTokenError" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LookingAt" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NextToken" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="EscapeRegexChars" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="XmlEscape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterConverter.TestFilterParserException" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestFilterConverter\TestFilterParserException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestFilterConverter\Tokenizer.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Kind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Text" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pos" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pos" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="op_Equality" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Inequality" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterConverter.Tokenizer" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestFilterConverter\Tokenizer.cs" line-rate="1" branch-rate="1" complexity="18">
          <methods>
            <method name="LookAhead" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NextChar" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NextToken" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetNextToken" signature="()" line-rate="1" branch-rate="1" complexity="9">
              <lines />
            </method>
            <method name="IsWordChar" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetWordOrFqn" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="CollectWordChars" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectBalancedParentheticalExpression" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectQuotedString" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetChar" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="SkipBlanks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestLogger" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestLogger.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="MessageLogger" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verbosity" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verbosity" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitSettings" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Error" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Error" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Warning" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Warning" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Info" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Debug" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendMessage" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendMessage" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugRunfrom" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InfoNoTests" signature="(System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InfoNoTests" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TraitsFeature" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TraitsFeature.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="AddTrait" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTraitsFromTestNode" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,NUnit.VisualStudio.TestAdapter.ITestLogger,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddingToCache" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,System.String,NUnit.VisualStudio.TestAdapter.CategoryList,T,System.Func`5&lt;T,System.Boolean,System.String,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTraitsFromXmlTestNode" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,NUnit.VisualStudio.TestAdapter.ITestLogger,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTraits" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCategories" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Traits" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Explicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Explicit" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TryParse" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TryParse.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="EnumTryParse" signature="(System.String,T&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestExecution" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.IExecutionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter,NUnit.VisualStudio.TestAdapter.NUnit3TestExecutor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckVsTestFilter" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter,NUnit.VisualStudio.TestAdapter.IVsTestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilterInCurrentMode" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckAssemblySelectLimit" signature="(NUnit.Engine.TestFilter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="TfsTestCaseFilterExpression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyValueProvider" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitContains" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="LocalPropertyProvider" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyProvider" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitProvider" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilterFactory" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateVsTestFilter" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilterIde" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilterLegacy" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilterNonIde" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.XmlHelper" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\XmlHelper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateTopLevelElement" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateXmlNode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToXml" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddAttribute" signature="(System.Xml.XmlNode,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddElement" signature="(System.Xml.XmlNode,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddElementWithCDataSection" signature="(System.Xml.XmlNode,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttribute" signature="(System.Xml.XmlNode,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttribute" signature="(System.Xml.XmlNode,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttribute" signature="(System.Xml.XmlNode,System.String,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttribute" signature="(System.Xml.XmlNode,System.String,System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="WindowsFormsApp1" line-rate="0.0674418604651163" branch-rate="0.133333333333333" complexity="49">
      <classes>
        <class name="NumericMethodsLab1.FileDataService" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\FileDataService.cs" line-rate="0" branch-rate="0" complexity="5">
          <methods>
            <method name="ReadData" signature="()" line-rate="0" branch-rate="0" complexity="4">
              <lines>
                <line number="15" hits="0" branch="false" />
                <line number="18" hits="0" branch="false" />
                <line number="19" hits="0" branch="false" />
                <line number="20" hits="0" branch="false" />
                <line number="21" hits="0" branch="false" />
                <line number="22" hits="0" branch="false" />
                <line number="23" hits="0" branch="false" />
                <line number="26" hits="0" branch="false" />
                <line number="28" hits="0" branch="true" condition-coverage="0% (0/2)" />
                <line number="29" hits="0" branch="false" />
                <line number="30" hits="0" branch="false" />
                <line number="33" hits="0" branch="true" condition-coverage="0% (0/4)" />
                <line number="34" hits="0" branch="false" />
                <line number="35" hits="0" branch="false" />
                <line number="36" hits="0" branch="false" />
                <line number="40" hits="0" branch="false" />
                <line number="41" hits="0" branch="false" />
              </lines>
            </method>
            <method name=".ctor" signature="()" line-rate="0" branch-rate="1" complexity="1">
              <lines>
                <line number="12" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="12" hits="0" branch="false" />
            <line number="15" hits="0" branch="false" />
            <line number="18" hits="0" branch="false" />
            <line number="19" hits="0" branch="false" />
            <line number="20" hits="0" branch="false" />
            <line number="21" hits="0" branch="false" />
            <line number="22" hits="0" branch="false" />
            <line number="23" hits="0" branch="false" />
            <line number="26" hits="0" branch="false" />
            <line number="28" hits="0" branch="true" condition-coverage="0% (0/2)" />
            <line number="29" hits="0" branch="false" />
            <line number="30" hits="0" branch="false" />
            <line number="33" hits="0" branch="true" condition-coverage="0% (0/4)" />
            <line number="34" hits="0" branch="false" />
            <line number="35" hits="0" branch="false" />
            <line number="36" hits="0" branch="false" />
            <line number="40" hits="0" branch="false" />
            <line number="41" hits="0" branch="false" />
          </lines>
        </class>
        <class name="NumericMethodsLab1.Methods" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\Methods.cs" line-rate="0.258928571428571" branch-rate="0.2" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="0.428571428571429" branch-rate="1" complexity="1">
              <lines>
                <line number="8" hits="6" branch="false" />
                <line number="9" hits="18" branch="false" />
                <line number="10" hits="6" branch="false" />
                <line number="13" hits="0" branch="false" />
                <line number="14" hits="0" branch="false" />
                <line number="15" hits="0" branch="false" />
                <line number="16" hits="0" branch="false" />
              </lines>
            </method>
            <method name=".ctor" signature="(NumericMethodsLab1.IFileDataService)" line-rate="0.636363636363636" branch-rate="1" complexity="NaN">
              <lines>
                <line number="8" hits="6" branch="false" />
                <line number="9" hits="18" branch="false" />
                <line number="10" hits="6" branch="false" />
                <line number="13" hits="0" branch="false" />
                <line number="14" hits="0" branch="false" />
                <line number="15" hits="0" branch="false" />
                <line number="16" hits="0" branch="false" />
                <line number="18" hits="6" branch="false" />
                <line number="19" hits="6" branch="false" />
                <line number="20" hits="6" branch="false" />
                <line number="21" hits="6" branch="false" />
              </lines>
            </method>
            <method name="GetGap" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="25" hits="5" branch="false" />
                <line number="26" hits="5" branch="false" />
                <line number="27" hits="3" branch="false" />
                <line number="28" hits="3" branch="false" />
                <line number="29" hits="3" branch="false" />
              </lines>
            </method>
            <method name="Function" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="32" hits="42" branch="false" />
                <line number="33" hits="42" branch="false" />
                <line number="34" hits="42" branch="false" />
              </lines>
            </method>
            <method name="Function_Der" signature="(System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="36" hits="0" branch="false" />
                <line number="37" hits="0" branch="false" />
                <line number="38" hits="0" branch="false" />
              </lines>
            </method>
            <method name="Function_Der2" signature="(System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="40" hits="0" branch="false" />
                <line number="41" hits="0" branch="false" />
                <line number="42" hits="0" branch="false" />
              </lines>
            </method>
            <method name="FiFunc" signature="(System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="44" hits="0" branch="false" />
                <line number="45" hits="0" branch="false" />
                <line number="46" hits="0" branch="false" />
                <line number="47" hits="0" branch="false" />
                <line number="48" hits="0" branch="false" />
              </lines>
            </method>
            <method name="FiFuncDer" signature="(System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="50" hits="0" branch="false" />
                <line number="51" hits="0" branch="false" />
                <line number="52" hits="0" branch="false" />
                <line number="53" hits="0" branch="false" />
              </lines>
            </method>
            <method name="Dichotomy" signature="(System.Double,System.Double)" line-rate="0.823529411764706" branch-rate="0.666666666666667" complexity="NaN">
              <lines>
                <line number="56" hits="1" branch="false" />
                <line number="57" hits="1" branch="false" />
                <line number="58" hits="15" branch="true" condition-coverage="100% (2/2)" />
                <line number="59" hits="14" branch="false" />
                <line number="60" hits="14" branch="false" />
                <line number="61" hits="14" branch="true" condition-coverage="50% (1/2)" />
                <line number="62" hits="0" branch="false" />
                <line number="63" hits="0" branch="false" />
                <line number="64" hits="0" branch="false" />
                <line number="66" hits="14" branch="false" />
                <line number="67" hits="14" branch="false" />
                <line number="68" hits="14" branch="false" />
                <line number="69" hits="14" branch="false" />
                <line number="70" hits="14" branch="true" condition-coverage="50% (1/2)" />
                <line number="71" hits="14" branch="false" />
                <line number="72" hits="1" branch="false" />
                <line number="73" hits="1" branch="false" />
              </lines>
            </method>
            <method name="MNewtonMethod" signature="(System.Double,System.Double)" line-rate="0" branch-rate="0" complexity="NaN">
              <lines>
                <line number="76" hits="0" branch="false" />
                <line number="78" hits="0" branch="true" condition-coverage="0% (0/2)" />
                <line number="79" hits="0" branch="false" />
                <line number="80" hits="0" branch="false" />
                <line number="81" hits="0" branch="false" />
                <line number="83" hits="0" branch="false" />
                <line number="84" hits="0" branch="false" />
                <line number="85" hits="0" branch="false" />
                <line number="86" hits="0" branch="false" />
                <line number="87" hits="0" branch="true" condition-coverage="0% (0/2)" />
                <line number="88" hits="0" branch="false" />
                <line number="89" hits="0" branch="false" />
              </lines>
            </method>
            <method name="SimpleIteration" signature="(System.Double,System.Double,System.Double)" line-rate="0" branch-rate="0" complexity="NaN">
              <lines>
                <line number="92" hits="0" branch="false" />
                <line number="93" hits="0" branch="false" />
                <line number="94" hits="0" branch="false" />
                <line number="95" hits="0" branch="false" />
                <line number="96" hits="0" branch="true" condition-coverage="0% (0/2)" />
                <line number="97" hits="0" branch="false" />
                <line number="98" hits="0" branch="false" />
                <line number="101" hits="0" branch="true" condition-coverage="0% (0/2)" />
                <line number="102" hits="0" branch="false" />
                <line number="103" hits="0" branch="false" />
                <line number="104" hits="0" branch="false" />
                <line number="105" hits="0" branch="false" />
                <line number="108" hits="0" branch="false" />
                <line number="109" hits="0" branch="false" />
                <line number="110" hits="0" branch="false" />
                <line number="111" hits="0" branch="false" />
                <line number="112" hits="0" branch="true" condition-coverage="0% (0/2)" />
                <line number="113" hits="0" branch="false" />
                <line number="114" hits="0" branch="false" />
              </lines>
            </method>
            <method name="CheckFI" signature="(System.Double,System.Double,System.Double,System.Double)" line-rate="0" branch-rate="0" complexity="NaN">
              <lines>
                <line number="117" hits="0" branch="false" />
                <line number="118" hits="0" branch="true" condition-coverage="0% (0/2)" />
                <line number="119" hits="0" branch="false" />
                <line number="120" hits="0" branch="false" />
                <line number="121" hits="0" branch="true" condition-coverage="0% (0/2)" />
                <line number="122" hits="0" branch="false" />
                <line number="123" hits="0" branch="false" />
                <line number="125" hits="0" branch="false" />
                <line number="126" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AprioriSI" signature="(System.Double,System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="129" hits="0" branch="false" />
                <line number="130" hits="0" branch="false" />
                <line number="131" hits="0" branch="false" />
                <line number="132" hits="0" branch="false" />
                <line number="133" hits="0" branch="false" />
              </lines>
            </method>
            <method name="APrioriDichotomy" signature="(System.Double,System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="136" hits="0" branch="false" />
                <line number="137" hits="0" branch="false" />
                <line number="138" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AllRoots" signature="(System.Double,System.Double,System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="141" hits="0" branch="false" />
                <line number="142" hits="0" branch="false" />
                <line number="143" hits="0" branch="false" />
                <line number="144" hits="0" branch="false" />
                <line number="145" hits="0" branch="false" />
                <line number="146" hits="0" branch="false" />
                <line number="147" hits="0" branch="false" />
              </lines>
            </method>
            <method name="KindsOfFunction" signature="(System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="150" hits="0" branch="false" />
                <line number="151" hits="0" branch="false" />
                <line number="152" hits="0" branch="false" />
                <line number="153" hits="0" branch="false" />
                <line number="154" hits="0" branch="false" />
                <line number="155" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="8" hits="6" branch="false" />
            <line number="9" hits="18" branch="false" />
            <line number="10" hits="6" branch="false" />
            <line number="13" hits="0" branch="false" />
            <line number="14" hits="0" branch="false" />
            <line number="15" hits="0" branch="false" />
            <line number="16" hits="0" branch="false" />
            <line number="18" hits="6" branch="false" />
            <line number="19" hits="6" branch="false" />
            <line number="20" hits="6" branch="false" />
            <line number="21" hits="6" branch="false" />
            <line number="25" hits="5" branch="false" />
            <line number="26" hits="5" branch="false" />
            <line number="27" hits="3" branch="false" />
            <line number="28" hits="3" branch="false" />
            <line number="29" hits="3" branch="false" />
            <line number="32" hits="42" branch="false" />
            <line number="33" hits="42" branch="false" />
            <line number="34" hits="42" branch="false" />
            <line number="36" hits="0" branch="false" />
            <line number="37" hits="0" branch="false" />
            <line number="38" hits="0" branch="false" />
            <line number="40" hits="0" branch="false" />
            <line number="41" hits="0" branch="false" />
            <line number="42" hits="0" branch="false" />
            <line number="44" hits="0" branch="false" />
            <line number="45" hits="0" branch="false" />
            <line number="46" hits="0" branch="false" />
            <line number="47" hits="0" branch="false" />
            <line number="48" hits="0" branch="false" />
            <line number="50" hits="0" branch="false" />
            <line number="51" hits="0" branch="false" />
            <line number="52" hits="0" branch="false" />
            <line number="53" hits="0" branch="false" />
            <line number="56" hits="1" branch="false" />
            <line number="57" hits="1" branch="false" />
            <line number="58" hits="15" branch="true" condition-coverage="100% (2/2)" />
            <line number="59" hits="14" branch="false" />
            <line number="60" hits="14" branch="false" />
            <line number="61" hits="14" branch="true" condition-coverage="50% (1/2)" />
            <line number="62" hits="0" branch="false" />
            <line number="63" hits="0" branch="false" />
            <line number="64" hits="0" branch="false" />
            <line number="66" hits="14" branch="false" />
            <line number="67" hits="14" branch="false" />
            <line number="68" hits="14" branch="false" />
            <line number="69" hits="14" branch="false" />
            <line number="70" hits="14" branch="true" condition-coverage="50% (1/2)" />
            <line number="71" hits="14" branch="false" />
            <line number="72" hits="1" branch="false" />
            <line number="73" hits="1" branch="false" />
            <line number="76" hits="0" branch="false" />
            <line number="78" hits="0" branch="true" condition-coverage="0% (0/2)" />
            <line number="79" hits="0" branch="false" />
            <line number="80" hits="0" branch="false" />
            <line number="81" hits="0" branch="false" />
            <line number="83" hits="0" branch="false" />
            <line number="84" hits="0" branch="false" />
            <line number="85" hits="0" branch="false" />
            <line number="86" hits="0" branch="false" />
            <line number="87" hits="0" branch="true" condition-coverage="0% (0/2)" />
            <line number="88" hits="0" branch="false" />
            <line number="89" hits="0" branch="false" />
            <line number="92" hits="0" branch="false" />
            <line number="93" hits="0" branch="false" />
            <line number="94" hits="0" branch="false" />
            <line number="95" hits="0" branch="false" />
            <line number="96" hits="0" branch="true" condition-coverage="0% (0/2)" />
            <line number="97" hits="0" branch="false" />
            <line number="98" hits="0" branch="false" />
            <line number="101" hits="0" branch="true" condition-coverage="0% (0/2)" />
            <line number="102" hits="0" branch="false" />
            <line number="103" hits="0" branch="false" />
            <line number="104" hits="0" branch="false" />
            <line number="105" hits="0" branch="false" />
            <line number="108" hits="0" branch="false" />
            <line number="109" hits="0" branch="false" />
            <line number="110" hits="0" branch="false" />
            <line number="111" hits="0" branch="false" />
            <line number="112" hits="0" branch="true" condition-coverage="0% (0/2)" />
            <line number="113" hits="0" branch="false" />
            <line number="114" hits="0" branch="false" />
            <line number="117" hits="0" branch="false" />
            <line number="118" hits="0" branch="true" condition-coverage="0% (0/2)" />
            <line number="119" hits="0" branch="false" />
            <line number="120" hits="0" branch="false" />
            <line number="121" hits="0" branch="true" condition-coverage="0% (0/2)" />
            <line number="122" hits="0" branch="false" />
            <line number="123" hits="0" branch="false" />
            <line number="125" hits="0" branch="false" />
            <line number="126" hits="0" branch="false" />
            <line number="129" hits="0" branch="false" />
            <line number="130" hits="0" branch="false" />
            <line number="131" hits="0" branch="false" />
            <line number="132" hits="0" branch="false" />
            <line number="133" hits="0" branch="false" />
            <line number="136" hits="0" branch="false" />
            <line number="137" hits="0" branch="false" />
            <line number="138" hits="0" branch="false" />
            <line number="141" hits="0" branch="false" />
            <line number="142" hits="0" branch="false" />
            <line number="143" hits="0" branch="false" />
            <line number="144" hits="0" branch="false" />
            <line number="145" hits="0" branch="false" />
            <line number="146" hits="0" branch="false" />
            <line number="147" hits="0" branch="false" />
            <line number="150" hits="0" branch="false" />
            <line number="151" hits="0" branch="false" />
            <line number="152" hits="0" branch="false" />
            <line number="153" hits="0" branch="false" />
            <line number="154" hits="0" branch="false" />
            <line number="155" hits="0" branch="false" />
          </lines>
        </class>
        <class name="NumericMethodsLab1.NumericMethods" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\NumericMethods.cs" line-rate="0" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="15" hits="0" branch="false" />
                <line number="18" hits="0" branch="false" />
                <line number="19" hits="0" branch="false" />
                <line number="20" hits="0" branch="false" />
                <line number="21" hits="0" branch="false" />
                <line number="22" hits="0" branch="false" />
                <line number="23" hits="0" branch="false" />
                <line number="24" hits="0" branch="false" />
                <line number="25" hits="0" branch="false" />
                <line number="27" hits="0" branch="false" />
              </lines>
            </method>
            <method name="Form1_Load" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="30" hits="0" branch="false" />
                <line number="32" hits="0" branch="false" />
              </lines>
            </method>
            <method name="label1_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="35" hits="0" branch="false" />
                <line number="37" hits="0" branch="false" />
              </lines>
            </method>
            <method name="label3_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="40" hits="0" branch="false" />
                <line number="42" hits="0" branch="false" />
              </lines>
            </method>
            <method name="label5_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="45" hits="0" branch="false" />
                <line number="47" hits="0" branch="false" />
              </lines>
            </method>
            <method name="dichotomyAprior_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="50" hits="0" branch="false" />
                <line number="52" hits="0" branch="false" />
              </lines>
            </method>
            <method name="dichotomy_checkbox_CheckedChanged" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="55" hits="0" branch="false" />
                <line number="57" hits="0" branch="false" />
              </lines>
            </method>
            <method name="checkBox1_CheckedChanged" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="60" hits="0" branch="false" />
                <line number="62" hits="0" branch="false" />
              </lines>
            </method>
            <method name="checkBox2_CheckedChanged" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="65" hits="0" branch="false" />
                <line number="67" hits="0" branch="false" />
              </lines>
            </method>
            <method name="button2_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="70" hits="0" branch="false" />
                <line number="72" hits="0" branch="false" />
                <line number="73" hits="0" branch="false" />
                <line number="74" hits="0" branch="false" />
                <line number="75" hits="0" branch="false" />
                <line number="76" hits="0" branch="false" />
                <line number="77" hits="0" branch="false" />
                <line number="78" hits="0" branch="false" />
                <line number="79" hits="0" branch="false" />
              </lines>
            </method>
            <method name="button3_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="82" hits="0" branch="false" />
                <line number="84" hits="0" branch="false" />
                <line number="85" hits="0" branch="false" />
                <line number="86" hits="0" branch="false" />
                <line number="87" hits="0" branch="false" />
                <line number="88" hits="0" branch="false" />
                <line number="89" hits="0" branch="false" />
                <line number="90" hits="0" branch="false" />
                <line number="91" hits="0" branch="false" />
                <line number="92" hits="0" branch="false" />
              </lines>
            </method>
            <method name="button4_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="95" hits="0" branch="false" />
                <line number="97" hits="0" branch="false" />
                <line number="98" hits="0" branch="false" />
                <line number="99" hits="0" branch="false" />
                <line number="100" hits="0" branch="false" />
                <line number="101" hits="0" branch="false" />
                <line number="102" hits="0" branch="false" />
                <line number="103" hits="0" branch="false" />
                <line number="104" hits="0" branch="false" />
                <line number="105" hits="0" branch="false" />
                <line number="106" hits="0" branch="false" />
              </lines>
            </method>
            <method name="label3_Click_1" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="109" hits="0" branch="false" />
                <line number="111" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="15" hits="0" branch="false" />
            <line number="18" hits="0" branch="false" />
            <line number="19" hits="0" branch="false" />
            <line number="20" hits="0" branch="false" />
            <line number="21" hits="0" branch="false" />
            <line number="22" hits="0" branch="false" />
            <line number="23" hits="0" branch="false" />
            <line number="24" hits="0" branch="false" />
            <line number="25" hits="0" branch="false" />
            <line number="27" hits="0" branch="false" />
            <line number="30" hits="0" branch="false" />
            <line number="32" hits="0" branch="false" />
            <line number="35" hits="0" branch="false" />
            <line number="37" hits="0" branch="false" />
            <line number="40" hits="0" branch="false" />
            <line number="42" hits="0" branch="false" />
            <line number="45" hits="0" branch="false" />
            <line number="47" hits="0" branch="false" />
            <line number="50" hits="0" branch="false" />
            <line number="52" hits="0" branch="false" />
            <line number="55" hits="0" branch="false" />
            <line number="57" hits="0" branch="false" />
            <line number="60" hits="0" branch="false" />
            <line number="62" hits="0" branch="false" />
            <line number="65" hits="0" branch="false" />
            <line number="67" hits="0" branch="false" />
            <line number="70" hits="0" branch="false" />
            <line number="72" hits="0" branch="false" />
            <line number="73" hits="0" branch="false" />
            <line number="74" hits="0" branch="false" />
            <line number="75" hits="0" branch="false" />
            <line number="76" hits="0" branch="false" />
            <line number="77" hits="0" branch="false" />
            <line number="78" hits="0" branch="false" />
            <line number="79" hits="0" branch="false" />
            <line number="82" hits="0" branch="false" />
            <line number="84" hits="0" branch="false" />
            <line number="85" hits="0" branch="false" />
            <line number="86" hits="0" branch="false" />
            <line number="87" hits="0" branch="false" />
            <line number="88" hits="0" branch="false" />
            <line number="89" hits="0" branch="false" />
            <line number="90" hits="0" branch="false" />
            <line number="91" hits="0" branch="false" />
            <line number="92" hits="0" branch="false" />
            <line number="95" hits="0" branch="false" />
            <line number="97" hits="0" branch="false" />
            <line number="98" hits="0" branch="false" />
            <line number="99" hits="0" branch="false" />
            <line number="100" hits="0" branch="false" />
            <line number="101" hits="0" branch="false" />
            <line number="102" hits="0" branch="false" />
            <line number="103" hits="0" branch="false" />
            <line number="104" hits="0" branch="false" />
            <line number="105" hits="0" branch="false" />
            <line number="106" hits="0" branch="false" />
            <line number="109" hits="0" branch="false" />
            <line number="111" hits="0" branch="false" />
          </lines>
        </class>
        <class name="NumericMethodsLab1.NumericMethods" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\NumericMethods.Designer.cs" line-rate="0" branch-rate="0" complexity="1">
          <methods>
            <method name="Dispose" signature="(System.Boolean)" line-rate="0" branch-rate="0" complexity="NaN">
              <lines>
                <line number="15" hits="0" branch="false" />
                <line number="16" hits="0" branch="true" condition-coverage="0% (0/4)" />
                <line number="17" hits="0" branch="false" />
                <line number="18" hits="0" branch="false" />
                <line number="19" hits="0" branch="false" />
                <line number="20" hits="0" branch="false" />
                <line number="21" hits="0" branch="false" />
              </lines>
            </method>
            <method name="InitializeComponent" signature="()" line-rate="0" branch-rate="1" complexity="1">
              <lines>
                <line number="30" hits="0" branch="false" />
                <line number="31" hits="0" branch="false" />
                <line number="32" hits="0" branch="false" />
                <line number="33" hits="0" branch="false" />
                <line number="34" hits="0" branch="false" />
                <line number="35" hits="0" branch="false" />
                <line number="36" hits="0" branch="false" />
                <line number="37" hits="0" branch="false" />
                <line number="38" hits="0" branch="false" />
                <line number="39" hits="0" branch="false" />
                <line number="40" hits="0" branch="false" />
                <line number="41" hits="0" branch="false" />
                <line number="42" hits="0" branch="false" />
                <line number="43" hits="0" branch="false" />
                <line number="44" hits="0" branch="false" />
                <line number="45" hits="0" branch="false" />
                <line number="46" hits="0" branch="false" />
                <line number="47" hits="0" branch="false" />
                <line number="48" hits="0" branch="false" />
                <line number="49" hits="0" branch="false" />
                <line number="50" hits="0" branch="false" />
                <line number="51" hits="0" branch="false" />
                <line number="52" hits="0" branch="false" />
                <line number="53" hits="0" branch="false" />
                <line number="54" hits="0" branch="false" />
                <line number="55" hits="0" branch="false" />
                <line number="56" hits="0" branch="false" />
                <line number="57" hits="0" branch="false" />
                <line number="58" hits="0" branch="false" />
                <line number="59" hits="0" branch="false" />
                <line number="60" hits="0" branch="false" />
                <line number="61" hits="0" branch="false" />
                <line number="65" hits="0" branch="false" />
                <line number="66" hits="0" branch="false" />
                <line number="67" hits="0" branch="false" />
                <line number="68" hits="0" branch="false" />
                <line number="69" hits="0" branch="false" />
                <line number="70" hits="0" branch="false" />
                <line number="71" hits="0" branch="false" />
                <line number="72" hits="0" branch="false" />
                <line number="73" hits="0" branch="false" />
                <line number="77" hits="0" branch="false" />
                <line number="78" hits="0" branch="false" />
                <line number="79" hits="0" branch="false" />
                <line number="80" hits="0" branch="false" />
                <line number="81" hits="0" branch="false" />
                <line number="85" hits="0" branch="false" />
                <line number="86" hits="0" branch="false" />
                <line number="87" hits="0" branch="false" />
                <line number="88" hits="0" branch="false" />
                <line number="89" hits="0" branch="false" />
                <line number="90" hits="0" branch="false" />
                <line number="91" hits="0" branch="false" />
                <line number="92" hits="0" branch="false" />
                <line number="96" hits="0" branch="false" />
                <line number="97" hits="0" branch="false" />
                <line number="98" hits="0" branch="false" />
                <line number="99" hits="0" branch="false" />
                <line number="100" hits="0" branch="false" />
                <line number="101" hits="0" branch="false" />
                <line number="102" hits="0" branch="false" />
                <line number="103" hits="0" branch="false" />
                <line number="107" hits="0" branch="false" />
                <line number="108" hits="0" branch="false" />
                <line number="109" hits="0" branch="false" />
                <line number="110" hits="0" branch="false" />
                <line number="111" hits="0" branch="false" />
                <line number="112" hits="0" branch="false" />
                <line number="113" hits="0" branch="false" />
                <line number="117" hits="0" branch="false" />
                <line number="118" hits="0" branch="false" />
                <line number="119" hits="0" branch="false" />
                <line number="120" hits="0" branch="false" />
                <line number="121" hits="0" branch="false" />
                <line number="122" hits="0" branch="false" />
                <line number="123" hits="0" branch="false" />
                <line number="127" hits="0" branch="false" />
                <line number="128" hits="0" branch="false" />
                <line number="129" hits="0" branch="false" />
                <line number="130" hits="0" branch="false" />
                <line number="131" hits="0" branch="false" />
                <line number="132" hits="0" branch="false" />
                <line number="133" hits="0" branch="false" />
                <line number="137" hits="0" branch="false" />
                <line number="138" hits="0" branch="false" />
                <line number="139" hits="0" branch="false" />
                <line number="140" hits="0" branch="false" />
                <line number="141" hits="0" branch="false" />
                <line number="142" hits="0" branch="false" />
                <line number="143" hits="0" branch="false" />
                <line number="147" hits="0" branch="false" />
                <line number="148" hits="0" branch="false" />
                <line number="149" hits="0" branch="false" />
                <line number="150" hits="0" branch="false" />
                <line number="151" hits="0" branch="false" />
                <line number="152" hits="0" branch="false" />
                <line number="153" hits="0" branch="false" />
                <line number="157" hits="0" branch="false" />
                <line number="158" hits="0" branch="false" />
                <line number="159" hits="0" branch="false" />
                <line number="160" hits="0" branch="false" />
                <line number="161" hits="0" branch="false" />
                <line number="162" hits="0" branch="false" />
                <line number="163" hits="0" branch="false" />
                <line number="167" hits="0" branch="false" />
                <line number="168" hits="0" branch="false" />
                <line number="169" hits="0" branch="false" />
                <line number="170" hits="0" branch="false" />
                <line number="171" hits="0" branch="false" />
                <line number="172" hits="0" branch="false" />
                <line number="173" hits="0" branch="false" />
                <line number="177" hits="0" branch="false" />
                <line number="178" hits="0" branch="false" />
                <line number="179" hits="0" branch="false" />
                <line number="180" hits="0" branch="false" />
                <line number="181" hits="0" branch="false" />
                <line number="182" hits="0" branch="false" />
                <line number="183" hits="0" branch="false" />
                <line number="187" hits="0" branch="false" />
                <line number="188" hits="0" branch="false" />
                <line number="189" hits="0" branch="false" />
                <line number="190" hits="0" branch="false" />
                <line number="191" hits="0" branch="false" />
                <line number="192" hits="0" branch="false" />
                <line number="193" hits="0" branch="false" />
                <line number="194" hits="0" branch="false" />
                <line number="195" hits="0" branch="false" />
                <line number="196" hits="0" branch="false" />
                <line number="200" hits="0" branch="false" />
                <line number="201" hits="0" branch="false" />
                <line number="202" hits="0" branch="false" />
                <line number="203" hits="0" branch="false" />
                <line number="204" hits="0" branch="false" />
                <line number="205" hits="0" branch="false" />
                <line number="206" hits="0" branch="false" />
                <line number="207" hits="0" branch="false" />
                <line number="208" hits="0" branch="false" />
                <line number="209" hits="0" branch="false" />
                <line number="213" hits="0" branch="false" />
                <line number="214" hits="0" branch="false" />
                <line number="215" hits="0" branch="false" />
                <line number="216" hits="0" branch="false" />
                <line number="217" hits="0" branch="false" />
                <line number="218" hits="0" branch="false" />
                <line number="219" hits="0" branch="false" />
                <line number="220" hits="0" branch="false" />
                <line number="221" hits="0" branch="false" />
                <line number="222" hits="0" branch="false" />
                <line number="226" hits="0" branch="false" />
                <line number="227" hits="0" branch="false" />
                <line number="228" hits="0" branch="false" />
                <line number="229" hits="0" branch="false" />
                <line number="230" hits="0" branch="false" />
                <line number="231" hits="0" branch="false" />
                <line number="232" hits="0" branch="false" />
                <line number="236" hits="0" branch="false" />
                <line number="237" hits="0" branch="false" />
                <line number="238" hits="0" branch="false" />
                <line number="239" hits="0" branch="false" />
                <line number="240" hits="0" branch="false" />
                <line number="241" hits="0" branch="false" />
                <line number="242" hits="0" branch="false" />
                <line number="246" hits="0" branch="false" />
                <line number="247" hits="0" branch="false" />
                <line number="248" hits="0" branch="false" />
                <line number="249" hits="0" branch="false" />
                <line number="250" hits="0" branch="false" />
                <line number="251" hits="0" branch="false" />
                <line number="252" hits="0" branch="false" />
                <line number="256" hits="0" branch="false" />
                <line number="257" hits="0" branch="false" />
                <line number="258" hits="0" branch="false" />
                <line number="259" hits="0" branch="false" />
                <line number="260" hits="0" branch="false" />
                <line number="261" hits="0" branch="false" />
                <line number="262" hits="0" branch="false" />
                <line number="266" hits="0" branch="false" />
                <line number="267" hits="0" branch="false" />
                <line number="268" hits="0" branch="false" />
                <line number="269" hits="0" branch="false" />
                <line number="270" hits="0" branch="false" />
                <line number="271" hits="0" branch="false" />
                <line number="272" hits="0" branch="false" />
                <line number="276" hits="0" branch="false" />
                <line number="280" hits="0" branch="false" />
                <line number="281" hits="0" branch="false" />
                <line number="282" hits="0" branch="false" />
                <line number="283" hits="0" branch="false" />
                <line number="284" hits="0" branch="false" />
                <line number="285" hits="0" branch="false" />
                <line number="286" hits="0" branch="false" />
                <line number="287" hits="0" branch="false" />
                <line number="291" hits="0" branch="false" />
                <line number="292" hits="0" branch="false" />
                <line number="293" hits="0" branch="false" />
                <line number="294" hits="0" branch="false" />
                <line number="295" hits="0" branch="false" />
                <line number="296" hits="0" branch="false" />
                <line number="297" hits="0" branch="false" />
                <line number="298" hits="0" branch="false" />
                <line number="299" hits="0" branch="false" />
                <line number="300" hits="0" branch="false" />
                <line number="301" hits="0" branch="false" />
                <line number="302" hits="0" branch="false" />
                <line number="303" hits="0" branch="false" />
                <line number="304" hits="0" branch="false" />
                <line number="305" hits="0" branch="false" />
                <line number="306" hits="0" branch="false" />
                <line number="307" hits="0" branch="false" />
                <line number="308" hits="0" branch="false" />
                <line number="309" hits="0" branch="false" />
                <line number="310" hits="0" branch="false" />
                <line number="311" hits="0" branch="false" />
                <line number="312" hits="0" branch="false" />
                <line number="313" hits="0" branch="false" />
                <line number="314" hits="0" branch="false" />
                <line number="315" hits="0" branch="false" />
                <line number="316" hits="0" branch="false" />
                <line number="317" hits="0" branch="false" />
                <line number="318" hits="0" branch="false" />
                <line number="319" hits="0" branch="false" />
                <line number="320" hits="0" branch="false" />
                <line number="321" hits="0" branch="false" />
                <line number="322" hits="0" branch="false" />
                <line number="323" hits="0" branch="false" />
                <line number="324" hits="0" branch="false" />
                <line number="325" hits="0" branch="false" />
                <line number="326" hits="0" branch="false" />
                <line number="328" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="8" hits="0" branch="false" />
            <line number="15" hits="0" branch="false" />
            <line number="16" hits="0" branch="true" condition-coverage="0% (0/4)" />
            <line number="17" hits="0" branch="false" />
            <line number="18" hits="0" branch="false" />
            <line number="19" hits="0" branch="false" />
            <line number="20" hits="0" branch="false" />
            <line number="21" hits="0" branch="false" />
            <line number="30" hits="0" branch="false" />
            <line number="31" hits="0" branch="false" />
            <line number="32" hits="0" branch="false" />
            <line number="33" hits="0" branch="false" />
            <line number="34" hits="0" branch="false" />
            <line number="35" hits="0" branch="false" />
            <line number="36" hits="0" branch="false" />
            <line number="37" hits="0" branch="false" />
            <line number="38" hits="0" branch="false" />
            <line number="39" hits="0" branch="false" />
            <line number="40" hits="0" branch="false" />
            <line number="41" hits="0" branch="false" />
            <line number="42" hits="0" branch="false" />
            <line number="43" hits="0" branch="false" />
            <line number="44" hits="0" branch="false" />
            <line number="45" hits="0" branch="false" />
            <line number="46" hits="0" branch="false" />
            <line number="47" hits="0" branch="false" />
            <line number="48" hits="0" branch="false" />
            <line number="49" hits="0" branch="false" />
            <line number="50" hits="0" branch="false" />
            <line number="51" hits="0" branch="false" />
            <line number="52" hits="0" branch="false" />
            <line number="53" hits="0" branch="false" />
            <line number="54" hits="0" branch="false" />
            <line number="55" hits="0" branch="false" />
            <line number="56" hits="0" branch="false" />
            <line number="57" hits="0" branch="false" />
            <line number="58" hits="0" branch="false" />
            <line number="59" hits="0" branch="false" />
            <line number="60" hits="0" branch="false" />
            <line number="61" hits="0" branch="false" />
            <line number="65" hits="0" branch="false" />
            <line number="66" hits="0" branch="false" />
            <line number="67" hits="0" branch="false" />
            <line number="68" hits="0" branch="false" />
            <line number="69" hits="0" branch="false" />
            <line number="70" hits="0" branch="false" />
            <line number="71" hits="0" branch="false" />
            <line number="72" hits="0" branch="false" />
            <line number="73" hits="0" branch="false" />
            <line number="77" hits="0" branch="false" />
            <line number="78" hits="0" branch="false" />
            <line number="79" hits="0" branch="false" />
            <line number="80" hits="0" branch="false" />
            <line number="81" hits="0" branch="false" />
            <line number="85" hits="0" branch="false" />
            <line number="86" hits="0" branch="false" />
            <line number="87" hits="0" branch="false" />
            <line number="88" hits="0" branch="false" />
            <line number="89" hits="0" branch="false" />
            <line number="90" hits="0" branch="false" />
            <line number="91" hits="0" branch="false" />
            <line number="92" hits="0" branch="false" />
            <line number="96" hits="0" branch="false" />
            <line number="97" hits="0" branch="false" />
            <line number="98" hits="0" branch="false" />
            <line number="99" hits="0" branch="false" />
            <line number="100" hits="0" branch="false" />
            <line number="101" hits="0" branch="false" />
            <line number="102" hits="0" branch="false" />
            <line number="103" hits="0" branch="false" />
            <line number="107" hits="0" branch="false" />
            <line number="108" hits="0" branch="false" />
            <line number="109" hits="0" branch="false" />
            <line number="110" hits="0" branch="false" />
            <line number="111" hits="0" branch="false" />
            <line number="112" hits="0" branch="false" />
            <line number="113" hits="0" branch="false" />
            <line number="117" hits="0" branch="false" />
            <line number="118" hits="0" branch="false" />
            <line number="119" hits="0" branch="false" />
            <line number="120" hits="0" branch="false" />
            <line number="121" hits="0" branch="false" />
            <line number="122" hits="0" branch="false" />
            <line number="123" hits="0" branch="false" />
            <line number="127" hits="0" branch="false" />
            <line number="128" hits="0" branch="false" />
            <line number="129" hits="0" branch="false" />
            <line number="130" hits="0" branch="false" />
            <line number="131" hits="0" branch="false" />
            <line number="132" hits="0" branch="false" />
            <line number="133" hits="0" branch="false" />
            <line number="137" hits="0" branch="false" />
            <line number="138" hits="0" branch="false" />
            <line number="139" hits="0" branch="false" />
            <line number="140" hits="0" branch="false" />
            <line number="141" hits="0" branch="false" />
            <line number="142" hits="0" branch="false" />
            <line number="143" hits="0" branch="false" />
            <line number="147" hits="0" branch="false" />
            <line number="148" hits="0" branch="false" />
            <line number="149" hits="0" branch="false" />
            <line number="150" hits="0" branch="false" />
            <line number="151" hits="0" branch="false" />
            <line number="152" hits="0" branch="false" />
            <line number="153" hits="0" branch="false" />
            <line number="157" hits="0" branch="false" />
            <line number="158" hits="0" branch="false" />
            <line number="159" hits="0" branch="false" />
            <line number="160" hits="0" branch="false" />
            <line number="161" hits="0" branch="false" />
            <line number="162" hits="0" branch="false" />
            <line number="163" hits="0" branch="false" />
            <line number="167" hits="0" branch="false" />
            <line number="168" hits="0" branch="false" />
            <line number="169" hits="0" branch="false" />
            <line number="170" hits="0" branch="false" />
            <line number="171" hits="0" branch="false" />
            <line number="172" hits="0" branch="false" />
            <line number="173" hits="0" branch="false" />
            <line number="177" hits="0" branch="false" />
            <line number="178" hits="0" branch="false" />
            <line number="179" hits="0" branch="false" />
            <line number="180" hits="0" branch="false" />
            <line number="181" hits="0" branch="false" />
            <line number="182" hits="0" branch="false" />
            <line number="183" hits="0" branch="false" />
            <line number="187" hits="0" branch="false" />
            <line number="188" hits="0" branch="false" />
            <line number="189" hits="0" branch="false" />
            <line number="190" hits="0" branch="false" />
            <line number="191" hits="0" branch="false" />
            <line number="192" hits="0" branch="false" />
            <line number="193" hits="0" branch="false" />
            <line number="194" hits="0" branch="false" />
            <line number="195" hits="0" branch="false" />
            <line number="196" hits="0" branch="false" />
            <line number="200" hits="0" branch="false" />
            <line number="201" hits="0" branch="false" />
            <line number="202" hits="0" branch="false" />
            <line number="203" hits="0" branch="false" />
            <line number="204" hits="0" branch="false" />
            <line number="205" hits="0" branch="false" />
            <line number="206" hits="0" branch="false" />
            <line number="207" hits="0" branch="false" />
            <line number="208" hits="0" branch="false" />
            <line number="209" hits="0" branch="false" />
            <line number="213" hits="0" branch="false" />
            <line number="214" hits="0" branch="false" />
            <line number="215" hits="0" branch="false" />
            <line number="216" hits="0" branch="false" />
            <line number="217" hits="0" branch="false" />
            <line number="218" hits="0" branch="false" />
            <line number="219" hits="0" branch="false" />
            <line number="220" hits="0" branch="false" />
            <line number="221" hits="0" branch="false" />
            <line number="222" hits="0" branch="false" />
            <line number="226" hits="0" branch="false" />
            <line number="227" hits="0" branch="false" />
            <line number="228" hits="0" branch="false" />
            <line number="229" hits="0" branch="false" />
            <line number="230" hits="0" branch="false" />
            <line number="231" hits="0" branch="false" />
            <line number="232" hits="0" branch="false" />
            <line number="236" hits="0" branch="false" />
            <line number="237" hits="0" branch="false" />
            <line number="238" hits="0" branch="false" />
            <line number="239" hits="0" branch="false" />
            <line number="240" hits="0" branch="false" />
            <line number="241" hits="0" branch="false" />
            <line number="242" hits="0" branch="false" />
            <line number="246" hits="0" branch="false" />
            <line number="247" hits="0" branch="false" />
            <line number="248" hits="0" branch="false" />
            <line number="249" hits="0" branch="false" />
            <line number="250" hits="0" branch="false" />
            <line number="251" hits="0" branch="false" />
            <line number="252" hits="0" branch="false" />
            <line number="256" hits="0" branch="false" />
            <line number="257" hits="0" branch="false" />
            <line number="258" hits="0" branch="false" />
            <line number="259" hits="0" branch="false" />
            <line number="260" hits="0" branch="false" />
            <line number="261" hits="0" branch="false" />
            <line number="262" hits="0" branch="false" />
            <line number="266" hits="0" branch="false" />
            <line number="267" hits="0" branch="false" />
            <line number="268" hits="0" branch="false" />
            <line number="269" hits="0" branch="false" />
            <line number="270" hits="0" branch="false" />
            <line number="271" hits="0" branch="false" />
            <line number="272" hits="0" branch="false" />
            <line number="276" hits="0" branch="false" />
            <line number="280" hits="0" branch="false" />
            <line number="281" hits="0" branch="false" />
            <line number="282" hits="0" branch="false" />
            <line number="283" hits="0" branch="false" />
            <line number="284" hits="0" branch="false" />
            <line number="285" hits="0" branch="false" />
            <line number="286" hits="0" branch="false" />
            <line number="287" hits="0" branch="false" />
            <line number="291" hits="0" branch="false" />
            <line number="292" hits="0" branch="false" />
            <line number="293" hits="0" branch="false" />
            <line number="294" hits="0" branch="false" />
            <line number="295" hits="0" branch="false" />
            <line number="296" hits="0" branch="false" />
            <line number="297" hits="0" branch="false" />
            <line number="298" hits="0" branch="false" />
            <line number="299" hits="0" branch="false" />
            <line number="300" hits="0" branch="false" />
            <line number="301" hits="0" branch="false" />
            <line number="302" hits="0" branch="false" />
            <line number="303" hits="0" branch="false" />
            <line number="304" hits="0" branch="false" />
            <line number="305" hits="0" branch="false" />
            <line number="306" hits="0" branch="false" />
            <line number="307" hits="0" branch="false" />
            <line number="308" hits="0" branch="false" />
            <line number="309" hits="0" branch="false" />
            <line number="310" hits="0" branch="false" />
            <line number="311" hits="0" branch="false" />
            <line number="312" hits="0" branch="false" />
            <line number="313" hits="0" branch="false" />
            <line number="314" hits="0" branch="false" />
            <line number="315" hits="0" branch="false" />
            <line number="316" hits="0" branch="false" />
            <line number="317" hits="0" branch="false" />
            <line number="318" hits="0" branch="false" />
            <line number="319" hits="0" branch="false" />
            <line number="320" hits="0" branch="false" />
            <line number="321" hits="0" branch="false" />
            <line number="322" hits="0" branch="false" />
            <line number="323" hits="0" branch="false" />
            <line number="324" hits="0" branch="false" />
            <line number="325" hits="0" branch="false" />
            <line number="326" hits="0" branch="false" />
            <line number="328" hits="0" branch="false" />
          </lines>
        </class>
        <class name="NumericMethodsLab1.Program" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\Program.cs" line-rate="0" branch-rate="1" complexity="1">
          <methods>
            <method name="Main" signature="()" line-rate="0" branch-rate="1" complexity="1">
              <lines>
                <line number="13" hits="0" branch="false" />
                <line number="14" hits="0" branch="false" />
                <line number="15" hits="0" branch="false" />
                <line number="16" hits="0" branch="false" />
                <line number="17" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="13" hits="0" branch="false" />
            <line number="14" hits="0" branch="false" />
            <line number="15" hits="0" branch="false" />
            <line number="16" hits="0" branch="false" />
            <line number="17" hits="0" branch="false" />
          </lines>
        </class>
      </classes>
    </package>
    <package name="xunit.assert" line-rate="0.0926301555104801" branch-rate="0.0436893203883495" complexity="662">
      <classes>
        <class name="System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" filename="/_1/tunnelvisionlabs.referenceassemblyannotator/1.0.0-alpha.160/build/NullableAttributes.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" filename="/_1/tunnelvisionlabs.referenceassemblyannotator/1.0.0-alpha.160/build/NullableAttributes.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" filename="/_1/tunnelvisionlabs.referenceassemblyannotator/1.0.0-alpha.160/build/NullableAttributes.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" filename="/_1/tunnelvisionlabs.referenceassemblyannotator/1.0.0-alpha.160/build/NullableAttributes.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/Assert.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReferenceEquals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/BooleanAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="False" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="False" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="False" signature="(System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="False" signature="(System.Nullable`1&lt;System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="True" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="True" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="True" signature="(System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="True" signature="(System.Nullable`1&lt;System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/CollectionAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="All" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="All" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Action`2&lt;T,System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Collection" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Action`1&lt;T&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(T,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(T,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Predicate`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(TKey,System.Collections.Generic.IReadOnlyDictionary`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(TKey,System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Distinct" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Distinct" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotContain" signature="(T,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotContain" signature="(T,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotContain" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Predicate`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotContain" signature="(TKey,System.Collections.Generic.IReadOnlyDictionary`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotContain" signature="(TKey,System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="(System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEmpty" signature="(System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Single" signature="(System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Single" signature="(System.Collections.IEnumerable,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Single" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Single" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Predicate`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSingleResult" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Predicate`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/Comparers.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="GetComparer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEqualityComparer" signature="(System.Collections.IEqualityComparer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/EqualityAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Equal" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(T,T,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Double,System.Double,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Double,System.Double,System.Int32,System.MidpointRounding)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Double,System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Single,System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Decimal,System.Decimal,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.DateTime,System.DateTime,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StrictEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(T,T,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(System.Double,System.Double,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(System.Decimal,System.Decimal,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotStrictEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/EquivalenceAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Equivalent" signature="(System.Object,System.Object,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/EventAsserts.cs" line-rate="1" branch-rate="1" complexity="13">
          <methods>
            <method name="Raises" signature="(System.Action`1&lt;System.EventHandler`1&lt;T&gt;&gt;,System.Action`1&lt;System.EventHandler`1&lt;T&gt;&gt;,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaisesAny" signature="(System.Action`1&lt;System.EventHandler`1&lt;T&gt;&gt;,System.Action`1&lt;System.EventHandler`1&lt;T&gt;&gt;,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaisesInternal" signature="(System.Action`1&lt;System.EventHandler`1&lt;T&gt;&gt;,System.Action`1&lt;System.EventHandler`1&lt;T&gt;&gt;,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sender" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaisesAnyAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="RaisesAsync" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="RaisesAsyncInternal" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/ExceptionAsserts.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="Throws" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAny" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAny" signature="(System.Func`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Type,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Type,System.Func`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.String,System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Type,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAny" signature="(System.Type,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.String,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.String,System.Func`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.String,System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAnyAsync" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/FailAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Fail" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/Guards.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GuardArgumentNotNull" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/IdentityAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="NotSame" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Same" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/MultipleAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Multiple" signature="(System.Action[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/NullAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="NotNull" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Null" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/PropertyAsserts.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="PropertyChanged" signature="(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyChanged" signature="(System.ComponentModel.INotifyPropertyChanged,System.String,System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyChangedAsync" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/RangeAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="InRange" signature="(T,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InRange" signature="(T,T,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotInRange" signature="(T,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotInRange" signature="(T,T,T,System.Collections.Generic.IComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/Record.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="RecordException" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RecordException" signature="(System.Func`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RecordException" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RecordExceptionAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/SetAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ProperSubset" signature="(System.Collections.Generic.ISet`1&lt;T&gt;,System.Collections.Generic.ISet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProperSuperset" signature="(System.Collections.Generic.ISet`1&lt;T&gt;,System.Collections.Generic.ISet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subset" signature="(System.Collections.Generic.ISet`1&lt;T&gt;,System.Collections.Generic.ISet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Superset" signature="(System.Collections.Generic.ISet`1&lt;T&gt;,System.Collections.Generic.ISet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/StringAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Contains" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotContain" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotContain" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartsWith" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartsWith" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndsWith" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndsWith" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Text.RegularExpressions.Regex,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotMatch" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoesNotMatch" signature="(System.Text.RegularExpressions.Regex,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLineEnding" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWhiteSpace" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipLineEnding" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipWhitespace" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Assert" filename="/_/src/xunit.assert/Asserts/TypeAsserts.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAssignableFrom" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAssignableFrom" signature="(System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotType" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotType" signature="(System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsType" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsType" signature="(System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Internal.AssertHelper" filename="/_/src/xunit.assert/Asserts/Sdk/AssertHelper.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="GetGettersForType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyEquivalence" signature="(System.Object,System.Object,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyEquivalence" signature="(System.Object,System.Object,System.Boolean,System.String,System.Collections.Generic.HashSet`1&lt;System.Object&gt;,System.Collections.Generic.HashSet`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyEquivalenceEnumerable" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Boolean,System.String,System.Collections.Generic.HashSet`1&lt;System.Object&gt;,System.Collections.Generic.HashSet`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyEquivalenceReference" signature="(System.Object,System.Object,System.Boolean,System.String,System.Collections.Generic.HashSet`1&lt;System.Object&gt;,System.Collections.Generic.HashSet`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AllException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/AllException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Failures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,System.Tuple`3&lt;System.Int32,System.Object,System.Exception&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ArgumentFormatter" filename="/_/src/xunit.assert/Asserts/Sdk/ArgumentFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Format" signature="(System.Object,System.Nullable`1&lt;System.Int32&gt;&amp;,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatInner" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,System.Int32,System.Nullable`1&lt;System.Int32&gt;&amp;,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatComplexValue" signature="(System.Object,System.Int32,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatEnumerable" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;,System.Int32,System.Nullable`1&lt;System.Int32&gt;,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatTypeName" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WrapAndGetFormattedValue" signature="(System.Func`1&lt;System.Object&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapException" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EscapeString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetEscapeSequence" signature="(System.Char,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertActualExpectedException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/AssertActualExpectedException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Actual" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ActualTitle" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expected" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectedTitle" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object,System.String,System.String,System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToSimpleTypeName" signature="(System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToString" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertCollectionCountException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/AssertCollectionCountException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertComparer`1" filename="/_/src/xunit.assert/Asserts/Sdk/AssertComparer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertEqualityComparer`1" filename="/_/src/xunit.assert/Asserts/Sdk/AssertEqualityComparer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Collections.IEqualityComparer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(T,T,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfEnumerablesAreEqual" signature="(T,T,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfDictionariesAreEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfSetsAreEqual" signature="(T,T,System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTypedSets" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSet" signature="(System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.IEqualityComparer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsGeneric" signature="(U,U)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertEqualityComparerAdapter`1" filename="/_/src/xunit.assert/Asserts/Sdk/AssertEqualityComparerAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.CollectionException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/CollectionException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Collection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Collection" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ActualCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ActualCount" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectedCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectedCount" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndexFailurePoint" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndexFailurePoint" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Int32,System.Int32,System.Int32,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatInnerException" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ContainsDuplicateException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/ContainsDuplicateException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Collection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DuplicateObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ContainsException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/ContainsException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DoesNotContainException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/DoesNotContainException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DoesNotMatchException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/DoesNotMatchException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.EmptyException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/EmptyException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.EndsWithException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/EndsWithException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShortenExpected" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShortenActual" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.EqualException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/EqualException.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="ActualIndex" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectedIndex" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PointerPosition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PointerPosition" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Int32,System.Int32,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessage" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="FromEnumerable" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShortenAndEncode" signature="(System.String,System.Int32,System.Char,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.EquivalentException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/EquivalentException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatMemberNameList" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForCircularReference" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForMemberListMismatch" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForMemberValueMismatch" signature="(System.Object,System.Object,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForMissingCollectionValue" signature="(System.Object,System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForExtraCollectionValue" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;,System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;,System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.FailException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/FailException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.FalseException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/FalseException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.InRangeException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/InRangeException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Actual" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="High" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Low" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.IsAssignableFromException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/IsAssignableFromException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.IsNotTypeException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/IsNotTypeException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.IsTypeException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/IsTypeException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.MatchesException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/MatchesException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.MultipleException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/MultipleException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="InnerExceptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.NotEmptyException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/NotEmptyException.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.NotEqualException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/NotEqualException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.NotInRangeException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/NotInRangeException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Actual" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="High" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Low" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.NotNullException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/NotNullException.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.NotSameException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/NotSameException.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.NullException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/NullException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ProperSubsetException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/ProperSubsetException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ProperSupersetException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/ProperSupersetException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.PropertyChangedException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/PropertyChangedException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.RaisesException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/RaisesException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Actual" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expected" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToSimpleTypeName" signature="(System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SameException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/SameException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SingleException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/SingleException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MoreThanOne" signature="(System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SkipException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/SkipException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.StartsWithException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/StartsWithException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShortenActual" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SubsetException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/SubsetException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SupersetException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/SupersetException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ThrowsException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/ThrowsException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.String,System.String,System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TrueException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/TrueException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitException" filename="/_/src/xunit.assert/Asserts/Sdk/Exceptions/XunitException.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UserMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UserMessage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="xunit.core" line-rate="0.0660869565217391" branch-rate="0.0194444444444444" complexity="288">
      <classes>
        <class name="ExceptionExtensions" filename="/_/src/common/ExceptionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="RethrowWithNoStackTraceLoss" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unwrap" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Guard" filename="/_/src/common/Guard.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ArgumentNotNull" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgumentNotNullOrEmpty" signature="(System.String,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgumentValid" signature="(System.String,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AssemblyTraitAttribute" filename="/_/src/xunit.core/AssemblyTraitAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ClassDataAttribute" filename="/_/src/xunit.core/ClassDataAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Class" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Class" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetData" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.CollectionAttribute" filename="/_/src/xunit.core/CollectionAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.CollectionBehaviorAttribute" filename="/_/src/xunit.core/CollectionBehaviorAttribute.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="DisableTestParallelization" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableTestParallelization" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxParallelThreads" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxParallelThreads" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.CollectionBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.CollectionDefinitionAttribute" filename="/_/src/xunit.core/CollectionDefinitionAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisableParallelization" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelization" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Extensions.PropertyDataAttribute" filename="/_/src/xunit.core/Extensions/PropertyDataAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="PropertyType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.FactAttribute" filename="/_/src/xunit.core/FactAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skip" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skip" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Timeout" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Timeout" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.InlineDataAttribute" filename="/_/src/xunit.core/InlineDataAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetData" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.MemberDataAttribute" filename="/_/src/xunit.core/MemberDataAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertDataItem" signature="(System.Reflection.MethodInfo,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.MemberDataAttributeBase" filename="/_/src/xunit.core/MemberDataAttributeBase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisableDiscoveryEnumeration" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableDiscoveryEnumeration" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MemberName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MemberName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MemberType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MemberType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parameters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parameters" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetData" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFieldAccessor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodAccessor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPropertyAccessor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParameterTypesCompatible" signature="(System.Reflection.ParameterInfo[],System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Record" filename="/_/src/xunit.core/Record.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Exception" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="(System.Func`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GuardArgumentNotNull" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ArgumentFormatter" filename="/_/src/xunit.assert/Asserts/Sdk/ArgumentFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Format" signature="(System.Object,System.Nullable`1&lt;System.Int32&gt;&amp;,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatInner" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,System.Int32,System.Nullable`1&lt;System.Int32&gt;&amp;,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatComplexValue" signature="(System.Object,System.Int32,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatEnumerable" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;,System.Int32,System.Nullable`1&lt;System.Int32&gt;,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatTypeName" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WrapAndGetFormattedValue" signature="(System.Func`1&lt;System.Object&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapException" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EscapeString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetEscapeSequence" signature="(System.Char,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssemblyTraitDiscoverer" filename="/_/src/xunit.core/Sdk/AssemblyTraitDiscoverer.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="GetTraits" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertEqualityComparer`1" filename="/_/src/xunit.assert/Asserts/Sdk/AssertEqualityComparer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Collections.IEqualityComparer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(T,T,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfEnumerablesAreEqual" signature="(T,T,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfDictionariesAreEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfSetsAreEqual" signature="(T,T,System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTypedSets" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSet" signature="(System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.IEqualityComparer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsGeneric" signature="(U,U)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertEqualityComparerAdapter`1" filename="/_/src/xunit.assert/Asserts/Sdk/AssertEqualityComparerAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.BeforeAfterTestAttribute" filename="/_/src/xunit.core/Sdk/BeforeAfterTestAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="After" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Before" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DataAttribute" filename="/_/src/xunit.core/Sdk/DataAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Skip" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skip" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DataDiscoverer" filename="/_/src/xunit.core/Sdk/DataDiscoverer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetData" signature="(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SupportsDiscoveryEnumeration" signature="(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DataDiscovererAttribute" filename="/_/src/xunit.core/Sdk/DataDiscovererAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ExceptionAggregator" filename="/_/src/xunit.core/Sdk/ExceptionAggregator.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name="HasExceptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregate" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Run" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToException" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.InlineDataDiscoverer" filename="/_/src/xunit.core/Sdk/InlineDataDiscoverer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetData" signature="(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SupportsDiscoveryEnumeration" signature="(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.MemberDataDiscoverer" filename="/_/src/xunit.core/Sdk/MemberDataDiscoverer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SupportsDiscoveryEnumeration" signature="(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.RunSummary" filename="/_/src/xunit.core/Sdk/RunSummary.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Aggregate" signature="(Xunit.Sdk.RunSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestFrameworkDiscovererAttribute" filename="/_/src/xunit.core/Sdk/TestFrameworkDiscovererAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TraitDiscoverer" filename="/_/src/xunit.core/Sdk/TraitDiscoverer.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="GetTraits" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TraitDiscovererAttribute" filename="/_/src/xunit.core/Sdk/TraitDiscovererAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestCaseDiscovererAttribute" filename="/_/src/xunit.core/Sdk/XunitTestCaseDiscovererAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCaseOrdererAttribute" filename="/_/src/xunit.core/TestCaseOrdererAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCollectionOrdererAttribute" filename="/_/src/xunit.core/TestCollectionOrdererAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestFrameworkAttribute" filename="/_/src/xunit.core/TestFrameworkAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="AddRow" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`1" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`10" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`2" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`3" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`4" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`5" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`6" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2,T3,T4,T5,T6)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`7" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2,T3,T4,T5,T6,T7)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`8" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2,T3,T4,T5,T6,T7,T8)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TheoryData`9" filename="/_/src/xunit.core/TheoryData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(T1,T2,T3,T4,T5,T6,T7,T8,T9)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TraitAttribute" filename="/_/src/xunit.core/TraitAttribute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="xunit.execution.desktop" line-rate="0.404169628050225" branch-rate="0.216441207075963" complexity="1761">
      <classes>
        <class name="AssemblyExtensions" filename="/_/src/common/AssemblyExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetLocalCodeBase" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetLocalCodeBase" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="CommonTasks" filename="/_/src/common/CommonTasks.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="DictionaryExtensions" filename="/_/src/common/DictionaryExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,System.Collections.Generic.List`1&lt;TValue&gt;&gt;,TKey,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrGet" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrGet" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;,TKey,System.Func`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,System.Collections.Generic.List`1&lt;TValue&gt;&gt;,TKey,TValue,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDictionaryIgnoringDuplicateKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Func`2&lt;TValue,TKey&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDictionaryIgnoringDuplicateKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TInput&gt;,System.Func`2&lt;TInput,TKey&gt;,System.Func`2&lt;TInput,TValue&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="ExceptionExtensions" filename="/_/src/common/ExceptionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="RethrowWithNoStackTraceLoss" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unwrap" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Guard" filename="/_/src/common/Guard.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ArgumentNotNull" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgumentNotNullOrEmpty" signature="(System.String,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgumentValid" signature="(System.String,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NewReflectionExtensions" filename="/_/src/common/NewReflectionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetAssembly" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnum" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFromLocalAssembly" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericTypeDefinition" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNullableEnum" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsValueType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapNullable" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetGenericArguments" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInterfaces" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAssignableFrom" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="ReflectionAbstractionExtensions" filename="/_/src/xunit.execution/Extensions/ReflectionAbstractionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateTestClass" signature="(Xunit.Abstractions.ITest,System.Type,System.Object[],Xunit.Sdk.IMessageBus,Xunit.Sdk.ExecutionTimer,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisposeTestClass" signature="(Xunit.Abstractions.ITest,System.Object,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExecutionTimer,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodInfoFromIMethodInfo" signature="(System.Type,Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingMethods" signature="(System.Type,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(Xunit.Abstractions.IAssemblyInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(Xunit.Abstractions.IAttributeInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(Xunit.Abstractions.IMethodInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(Xunit.Abstractions.ITypeInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToRuntimeMethod" signature="(Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToRuntimeType" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="TestFrameworkOptionsReadExtensions" filename="/_/src/xunit.execution/Extensions/TestFrameworkOptionsReadExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessagesOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplay" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplayOptions" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplayOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplayOptionsOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreEnumerateTheories" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreEnumerateTheoriesOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronousMessageReporting" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronousMessageReportingOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessagesOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelization" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelizationOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxParallelThreads" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxParallelThreadsOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnTestFail" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnTestFailOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronousMessageReporting" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronousMessageReportingOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="TestOptionsNames" filename="/_/src/common/TestOptionsNames.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ExecutionHelper" filename="/_/src/common/ExecutionHelper.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="PlatformSuffix" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.LongLivedMarshalByRefObject" filename="/_/src/common/LongLivedMarshalByRefObject.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DisconnectAll" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="InitializeLifetimeService" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AfterTestFinished" filename="/_/src/messages/AfterTestFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AttributeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AfterTestStarting" filename="/_/src/messages/AfterTestStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AttributeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ArgumentFormatter" filename="/_/src/xunit.assert/Asserts/Sdk/ArgumentFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Format" signature="(System.Object,System.Nullable`1&lt;System.Int32&gt;&amp;,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatInner" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,System.Int32,System.Nullable`1&lt;System.Int32&gt;&amp;,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatComplexValue" signature="(System.Object,System.Int32,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatEnumerable" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;,System.Int32,System.Nullable`1&lt;System.Int32&gt;,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatTypeName" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WrapAndGetFormattedValue" signature="(System.Func`1&lt;System.Object&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapException" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EscapeString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetEscapeSequence" signature="(System.Char,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertEqualityComparer`1" filename="/_/src/xunit.assert/Asserts/Sdk/AssertEqualityComparer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Collections.IEqualityComparer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(T,T,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfEnumerablesAreEqual" signature="(T,T,System.Nullable`1&lt;System.Int32&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfDictionariesAreEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfSetsAreEqual" signature="(T,T,System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTypedSets" signature="(System.Collections.IEnumerable,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSet" signature="(System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.IEqualityComparer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsGeneric" signature="(U,U)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AssertEqualityComparerAdapter`1" filename="/_/src/xunit.assert/Asserts/Sdk/AssertEqualityComparerAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AsyncManualResetEvent" filename="/_/src/xunit.execution/Sdk/Utility/AsyncManualResetEvent.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="IsSet" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WaitAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Set" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.AsyncTestSyncContext" filename="/_/src/xunit.execution/Sdk/AsyncTestSyncContext.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name=".ctor" signature="(System.Threading.SynchronizationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OperationCompleted" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="OperationStarted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Post" signature="(System.Threading.SendOrPostCallback,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Send" signature="(System.Threading.SendOrPostCallback,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WaitForCompletionAsync" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.BeforeTestFinished" filename="/_/src/messages/BeforeTestFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AttributeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.BeforeTestStarting" filename="/_/src/messages/BeforeTestStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AttributeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.CollectionExtensions" filename="/_/src/xunit.execution/Sdk/Utility/CollectionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CastOrToList" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CastOrToArray" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory" filename="/_/src/xunit.execution/Sdk/Frameworks/CollectionPerAssemblyTestCollectionFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestAssembly,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCollection" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.CollectionPerClassTestCollectionFactory" filename="/_/src/xunit.execution/Sdk/Frameworks/CollectionPerClassTestCollectionFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestAssembly,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateCollection" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DefaultTestCaseOrderer" filename="/_/src/xunit.execution/Sdk/DefaultTestCaseOrderer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrderTestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Randomize" signature="(System.Collections.Generic.List`1&lt;TTestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Compare" signature="(TTestCase,TTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DefaultTestCollectionOrderer" filename="/_/src/xunit.execution/Sdk/DefaultTestCollectionOrderer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OrderTestCollections" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCollection&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Compare" signature="(TTestCollection,TTestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DelegatingMessageBus" filename="/_/src/xunit.execution/Sdk/Messages/DelegatingMessageBus.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Xunit.Sdk.IMessageBus,System.Action`1&lt;Xunit.Abstractions.IMessageSinkMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QueueMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DelegatingMessageBus`1" filename="/_/src/xunit.execution/Sdk/Messages/DelegatingMessageBus.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FinalMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FinalMessage" signature="(TFinalMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="(System.Threading.ManualResetEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.IMessageBus,System.Action`1&lt;Xunit.Abstractions.IMessageSinkMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QueueMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DelegatingMessageSink" filename="/_/src/xunit.execution/Sdk/Messages/DelegatingMessageSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,System.Action`1&lt;Xunit.Abstractions.IMessageSinkMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DelegatingMessageSink`1" filename="/_/src/xunit.execution/Sdk/Messages/DelegatingMessageSink.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FinalMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FinalMessage" signature="(TFinalMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="(System.Threading.ManualResetEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,System.Action`1&lt;Xunit.Abstractions.IMessageSinkMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DiagnosticMessage" filename="/_/src/messages/DiagnosticMessage.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="InterfaceTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DisplayNameFormatter" filename="/_/src/xunit.execution/Sdk/Frameworks/DisplayNameFormatter.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.TestMethodDisplay,Xunit.Sdk.TestMethodDisplayOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormattedDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Buffer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasMoreText" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadNext" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Flush" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Next" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Next" signature="(Xunit.Sdk.DisplayNameFormatter/CharacterRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(Xunit.Sdk.DisplayNameFormatter/FormatContext,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(Xunit.Sdk.DisplayNameFormatter/FormatContext,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryConsumeMoniker" signature="(Xunit.Sdk.DisplayNameFormatter/FormatContext,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Evaluate" signature="(Xunit.Sdk.DisplayNameFormatter/FormatContext,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(Xunit.Sdk.DisplayNameFormatter/FormatContext,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryConsumeEscapeSequence" signature="(Xunit.Sdk.DisplayNameFormatter/FormatContext,System.Char,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsHex" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HexToInt32" signature="(System.Char[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(Xunit.Sdk.DisplayNameFormatter/FormatContext,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(Xunit.Sdk.DisplayNameFormatter/FormatContext,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.DisposalTracker" filename="/_/src/xunit.execution/Sdk/DisposalTracker.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Add" signature="(System.IDisposable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ErrorMessage" filename="/_/src/messages/ErrorMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ExceptionUtility" filename="/_/src/common/ExceptionUtility.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="CombineMessages" signature="(Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CombineStackTraces" signature="(Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerExceptions" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeStackFrame" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterStackTrace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAt" signature="(System.String[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAt" signature="(System.Int32[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMessage" signature="(Xunit.Abstractions.IFailureInformation,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStackTrace" signature="(Xunit.Abstractions.IFailureInformation,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertExceptionToFailureInformation" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertExceptionToFailureInformation" signature="(System.Exception,System.Int32,System.Collections.Generic.List`1&lt;System.String&gt;,System.Collections.Generic.List`1&lt;System.String&gt;,System.Collections.Generic.List`1&lt;System.String&gt;,System.Collections.Generic.List`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitLines" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ExecutionContextHelper" filename="/_/src/xunit.execution/Sdk/Utility/ExecutionContextHelper.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IsSupported" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Capture" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Run" signature="(System.Object,System.Action`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ExecutionErrorTestCase" filename="/_/src/xunit.execution/Sdk/Frameworks/ExecutionErrorTestCase.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ErrorMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ErrorMessage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Sdk.TestMethodDisplayOptions,Xunit.Abstractions.ITestMethod,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAsync" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ExecutionErrorTestCaseRunner" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/ExecutionErrorTestCaseRunner.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="(Xunit.Sdk.ExecutionErrorTestCase,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ExecutionTimer" filename="/_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Total" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregate" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregate" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AggregateAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ExtensibilityPointFactory" filename="/_/src/xunit.execution/Sdk/ExtensibilityPointFactory.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="CreateInstance" signature="(Xunit.Abstractions.IMessageSink,System.Type,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Get" signature="(Xunit.Abstractions.IMessageSink,System.Type,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDataDiscoverer" signature="(Xunit.Abstractions.IMessageSink,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDataDiscoverer" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCaseOrderer" signature="(Xunit.Abstractions.IMessageSink,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCaseOrderer" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCollectionOrderer" signature="(Xunit.Abstractions.IMessageSink,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCollectionOrderer" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestFrameworkTypeDiscoverer" signature="(Xunit.Abstractions.IMessageSink,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestFrameworkTypeDiscoverer" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTraitDiscoverer" signature="(Xunit.Abstractions.IMessageSink,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTraitDiscoverer" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXunitTestCaseDiscoverer" signature="(Xunit.Abstractions.IMessageSink,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXunitTestCollectionFactory" signature="(Xunit.Abstractions.IMessageSink,System.Type,Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXunitTestCollectionFactory" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCollectionFactoryType" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.FactDiscoverer" filename="/_/src/xunit.execution/Sdk/Frameworks/FactDiscoverer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCase" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Discover" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.GeneralDigest" filename="/_/src/xunit.execution/Sdk/Utility/Sha1Digest.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.GeneralDigest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CopyIn" signature="(Xunit.Sdk.GeneralDigest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Update" signature="(System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BlockUpdate" signature="(System.Byte[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetByteLength" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.MaxConcurrencySyncContext" filename="/_/src/xunit.execution/Sdk/MaxConcurrencySyncContext.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="IsSupported" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Post" signature="(System.Threading.SendOrPostCallback,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Send" signature="(System.Threading.SendOrPostCallback,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkerThreadProc" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunOnSyncContext" signature="(System.Threading.SendOrPostCallback,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.MessageBus" filename="/_/src/xunit.execution/Sdk/MessageBus.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DispatchMessages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="QueueMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReporterWorker" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.NullMessageSink" filename="/_/src/common/NullMessageSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.Pack" filename="/_/src/xunit.execution/Sdk/Utility/Sha1Digest.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="UInt16_To_BE" signature="(System.UInt16,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt16_To_BE" signature="(System.UInt16,System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BE_To_UInt16" signature="(System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BE_To_UInt16" signature="(System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_BE" signature="(System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_BE" signature="(System.UInt32,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_BE" signature="(System.UInt32,System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_BE" signature="(System.UInt32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_BE" signature="(System.UInt32[],System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BE_To_UInt32" signature="(System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BE_To_UInt32" signature="(System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BE_To_UInt32" signature="(System.Byte[],System.Int32,System.UInt32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt64_To_BE" signature="(System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt64_To_BE" signature="(System.UInt64,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt64_To_BE" signature="(System.UInt64,System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BE_To_UInt64" signature="(System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BE_To_UInt64" signature="(System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt16_To_LE" signature="(System.UInt16,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt16_To_LE" signature="(System.UInt16,System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LE_To_UInt16" signature="(System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LE_To_UInt16" signature="(System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_LE" signature="(System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_LE" signature="(System.UInt32,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_LE" signature="(System.UInt32,System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_LE" signature="(System.UInt32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32_To_LE" signature="(System.UInt32[],System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LE_To_UInt32" signature="(System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LE_To_UInt32" signature="(System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LE_To_UInt32" signature="(System.Byte[],System.Int32,System.UInt32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LE_To_UInt32" signature="(System.Byte[],System.Int32,System.UInt32[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt64_To_LE" signature="(System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt64_To_LE" signature="(System.UInt64,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt64_To_LE" signature="(System.UInt64,System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LE_To_UInt64" signature="(System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LE_To_UInt64" signature="(System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ReflectionAssemblyInfo" filename="/_/src/xunit.execution/Sdk/Reflection/ReflectionAssemblyInfo.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assembly" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetType" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTypes" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ReflectionAttributeInfo" filename="/_/src/xunit.execution/Sdk/Reflection/ReflectionAttributeInfo.cs" line-rate="1" branch-rate="1" complexity="14">
          <methods>
            <method name="Attribute" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Attribute" signature="(System.Attribute)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeData" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeData" signature="(System.Reflection.CustomAttributeData)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.CustomAttributeData)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttributeUsage" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Type,System.Type,System.AttributeUsageAttribute)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNamedArgument" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Instantiate" signature="(System.Reflection.CustomAttributeData)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTypedValue" signature="(System.Reflection.CustomAttributeTypedArgument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Convert" signature="()" line-rate="1" branch-rate="1" complexity="11">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ReflectionAttributeNameCache" filename="/_/src/xunit.execution/Sdk/Reflection/ReflectionAttributeNameCache.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="GetType" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ReflectionMethodInfo" filename="/_/src/xunit.execution/Sdk/Reflection/ReflectionMethodInfo.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="IsAbstract" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericMethodDefinition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsPublic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsStatic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodInfo" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodInfo" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Reflection.MethodInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Reflection.MethodInfo,System.Type,System.AttributeUsageAttribute)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetGenericArguments" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetParent" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParametersHaveSameTypes" signature="(System.Reflection.ParameterInfo[],System.Reflection.ParameterInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeGenericMethod" signature="(Xunit.Abstractions.ITypeInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetParameters" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ReflectionParameterInfo" filename="/_/src/xunit.execution/Sdk/Reflection/ReflectionParameterInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParameterInfo" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParameterInfo" signature="(System.Reflection.ParameterInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParameterType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.ParameterInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.ReflectionTypeInfo" filename="/_/src/xunit.execution/Sdk/Reflection/ReflectionTypeInfo.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BaseType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Interfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAbstract" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericParameter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSealed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsValueType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetGenericArguments" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetMethod" signature="(System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethods" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.Reflector" filename="/_/src/xunit.execution/Sdk/Reflection/Reflector.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ConvertArguments" signature="(System.Object[],System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertArgument" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Wrap" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Wrap" signature="(System.Reflection.CustomAttributeData)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Wrap" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Wrap" signature="(System.Reflection.ParameterInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Wrap" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SerializationHelper" filename="/_/src/common/SerializationHelper.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Deserialize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSerializable" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetType" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetType" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTypeNameForSerialization" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstringTrim" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitAtOuterCommas" signature="(System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.Sha1Digest" filename="/_/src/xunit.execution/Sdk/Utility/Sha1Digest.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="AlgorithmName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.Sha1Digest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CopyIn" signature="(Xunit.Sdk.Sha1Digest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDigestSize" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ProcessWord" signature="(System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProcessLength" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoFinal" signature="(System.Byte[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="F" signature="(System.UInt32,System.UInt32,System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="H" signature="(System.UInt32,System.UInt32,System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="G" signature="(System.UInt32,System.UInt32,System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProcessBlock" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="Reset" signature="(Xunit.Sdk.Sha1Digest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SourceInformation" filename="/_/src/common/SourceInformation.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SynchronousMessageBus" filename="/_/src/xunit.execution/Sdk/SynchronousMessageBus.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="QueueMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestAssembly" filename="/_/src/xunit.execution/Sdk/Frameworks/TestAssembly.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assembly" signature="(Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigFileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigFileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Version" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Version" signature="(System.Version)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IAssemblyInfo,System.String,System.Version)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestAssemblyCleanupFailure" filename="/_/src/messages/TestAssemblyCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestAssemblyFinished" filename="/_/src/messages/TestAssemblyFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestAssemblyMessage" filename="/_/src/messages/BaseMessages/TestAssemblyMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="(Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestAssemblyRunner`1" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/TestAssemblyRunner.cs" line-rate="1" branch-rate="1" complexity="33">
          <methods>
            <method name="Aggregator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregator" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionOptions" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionMessageSink" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="(Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseOrderer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseOrderer" signature="(Xunit.Sdk.ITestCaseOrderer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollectionOrderer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollectionOrderer" signature="(Xunit.ITestCollectionOrderer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestAssembly,System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetTestFrameworkEnvironment" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetVersion" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="AfterTestAssemblyStartingAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="BeforeTestAssemblyFinishedAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateMessageBus" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="OrderTestCollections" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="14">
              <lines />
            </method>
            <method name="RunTestCollectionsAsync" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestAssemblyStarting" filename="/_/src/messages/TestAssemblyStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="StartTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartTime" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestEnvironment" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestEnvironment" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly,System.DateTime,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCaseBulkDeserializer" filename="/_/src/xunit.execution/Sdk/TestCaseBulkDeserializer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Object,System.Object,System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.ITestFrameworkDiscoverer,Xunit.Abstractions.ITestFrameworkExecutor,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCaseCleanupFailure" filename="/_/src/messages/TestCaseCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCaseDescriptorFactory" filename="/_/src/xunit.execution/Sdk/TestCaseDescriptorFactory.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Object,System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Encode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCaseDiscoveryMessage" filename="/_/src/messages/TestCaseDiscoveryMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCaseFinished" filename="/_/src/messages/TestCaseFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCaseMessage" filename="/_/src/messages/BaseMessages/TestCaseMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCaseRunner`1" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/TestCaseRunner.cs" line-rate="1" branch-rate="1" complexity="15">
          <methods>
            <method name="Aggregator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregator" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="(System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="(Xunit.Sdk.IMessageBus)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="(TTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TTestCase,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AfterTestCaseStartingAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="BeforeTestCaseFinishedAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="13">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCaseStarting" filename="/_/src/messages/TestCaseStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClass" filename="/_/src/xunit.execution/Sdk/Frameworks/TestClass.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Class" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Class" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollection" signature="(Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassCleanupFailure" filename="/_/src/messages/TestClassCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassComparer" filename="/_/src/xunit.execution/Sdk/Frameworks/TestClassComparer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Equals" signature="(Xunit.Abstractions.ITestClass,Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassConstructionFinished" filename="/_/src/messages/TestClassConstructionFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassConstructionStarting" filename="/_/src/messages/TestClassConstructionStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassDisposeFinished" filename="/_/src/messages/TestClassDisposeFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassDisposeStarting" filename="/_/src/messages/TestClassDisposeStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassException" filename="/_/src/xunit.execution/Sdk/TestClassException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassFinished" filename="/_/src/messages/TestClassFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassMessage" filename="/_/src/messages/BaseMessages/TestClassMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestClass" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="(Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassRunner`1" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/TestClassRunner.cs" line-rate="1" branch-rate="1" complexity="37">
          <methods>
            <method name="Aggregator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregator" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="(System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Class" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Class" signature="(Xunit.Abstractions.IReflectionTypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="(Xunit.Sdk.IMessageBus)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseOrderer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseOrderer" signature="(Xunit.Sdk.ITestCaseOrderer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="(Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestClassConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="FormatConstructorArgsMissingMessage" signature="(System.Reflection.ConstructorInfo,System.Collections.Generic.IReadOnlyList`1&lt;System.Tuple`2&lt;System.Int32,System.Reflection.ParameterInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AfterTestClassStartingAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="BeforeTestClassFinishedAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SelectTestClassConstructor" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="TryGetConstructorArgument" signature="(System.Reflection.ConstructorInfo,System.Int32,System.Reflection.ParameterInfo,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="13">
              <lines />
            </method>
            <method name="RunTestMethodsAsync" signature="()" line-rate="1" branch-rate="1" complexity="9">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestClassStarting" filename="/_/src/messages/TestClassStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCleanupFailure" filename="/_/src/messages/TestCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCollection" filename="/_/src/xunit.execution/Sdk/Frameworks/TestCollection.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="CollectionDefinition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectionDefinition" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="(Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="(System.Guid)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestAssembly,Xunit.Abstractions.ITypeInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestAssembly,Xunit.Abstractions.ITypeInfo,System.String,System.Guid)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCollectionCleanupFailure" filename="/_/src/messages/TestCollectionCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCollectionComparer" filename="/_/src/xunit.execution/Sdk/Frameworks/TestCollectionComparer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Equals" signature="(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCollectionFactoryHelper" filename="/_/src/xunit.execution/Sdk/Frameworks/TestCollectionFactoryHelper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetTestCollectionDefinitions" signature="(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCollectionFinished" filename="/_/src/messages/TestCollectionFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCollectionMessage" filename="/_/src/messages/BaseMessages/TestCollectionMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollection" signature="(Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCollectionRunner`1" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/TestCollectionRunner.cs" line-rate="1" branch-rate="1" complexity="24">
          <methods>
            <method name="Aggregator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregator" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="(System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="(Xunit.Sdk.IMessageBus)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseOrderer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseOrderer" signature="(Xunit.Sdk.ITestCaseOrderer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollection" signature="(Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;,Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AfterTestCollectionStartingAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="BeforeTestCollectionFinishedAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="13">
              <lines />
            </method>
            <method name="RunTestClassesAsync" signature="()" line-rate="1" branch-rate="1" complexity="9">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestCollectionStarting" filename="/_/src/messages/TestCollectionStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestDiscoveryVisitor" filename="/_/src/xunit.execution/Sdk/TestDiscoveryVisitor.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestFailed" filename="/_/src/messages/TestFailed.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestFinished" filename="/_/src/messages/TestFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestFramework" filename="/_/src/xunit.execution/Sdk/Frameworks/TestFramework.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisposalTracker" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisposalTracker" signature="(Xunit.Sdk.DisposalTracker)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformationProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformationProvider" signature="(Xunit.Abstractions.ISourceInformationProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDiscoverer" signature="(Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExecutor" signature="(System.Reflection.AssemblyName)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSourceInformation" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestFrameworkDiscoverer" filename="/_/src/xunit.execution/Sdk/Frameworks/TestFrameworkDiscoverer.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="AssemblyInfo" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyInfo" signature="(Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisposalTracker" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisposalTracker" signature="(Xunit.Sdk.DisposalTracker)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceProvider" signature="(Xunit.Abstractions.ISourceInformationProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFramework" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Find" signature="(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageBus" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindTestsForTypeAndWrapExceptions" signature="(Xunit.Abstractions.ITestClass,System.Boolean,Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsValidTestClass" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReportDiscoveredTestCase" signature="(Xunit.Abstractions.ITestCase,System.Boolean,Xunit.Sdk.IMessageBus)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestFrameworkExecutor`1" filename="/_/src/xunit.execution/Sdk/Frameworks/TestFrameworkExecutor.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="AssemblyInfo" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyInfo" signature="(Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisposalTracker" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisposalTracker" signature="(Xunit.Sdk.DisposalTracker)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformationProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformationProvider" signature="(Xunit.Abstractions.ISourceInformationProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.AssemblyName,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RunAll" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestFrameworkProxy" filename="/_/src/xunit.execution/Sdk/Frameworks/TestFrameworkProxy.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="InnerTestFramework" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InnerTestFramework" signature="(Xunit.Abstractions.ITestFramework)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformationProvider" signature="(Xunit.Abstractions.ISourceInformationProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateInnerTestFramework" signature="(System.Type,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDiscoverer" signature="(Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExecutor" signature="(System.Reflection.AssemblyName)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestFrameworkType" signature="(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestFrameworkTypeDiscoverer" filename="/_/src/xunit.execution/Sdk/TestFrameworkTypeDiscoverer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetTestFrameworkType" signature="(Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestInvoker`1" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs" line-rate="1" branch-rate="1" complexity="46">
          <methods>
            <method name="Aggregator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregator" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="(System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="(Xunit.Sdk.IMessageBus)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Test" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Test" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Timer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Timer" signature="(Xunit.Sdk.ExecutionTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestClass" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="AfterTestMethodInvokedAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="BeforeTestMethodInvokedAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CallTestMethod" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTaskFromResult" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SetSynchronizationContext" signature="(System.Threading.SynchronizationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="&lt;RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="19">
              <lines />
            </method>
            <method name="&gt;c__DisplayClass48_0/&lt;&lt;InvokeTestMethodAsync" signature="()" line-rate="1" branch-rate="1" complexity="16">
              <lines />
            </method>
            <method name="InvokeTestMethodAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMessage" filename="/_/src/messages/BaseMessages/TestMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Test" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Test" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMethod" filename="/_/src/xunit.execution/Sdk/Frameworks/TestMethod.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Method" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Method" signature="(Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="(Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMethodCleanupFailure" filename="/_/src/messages/TestMethodCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMethodComparer" filename="/_/src/xunit.execution/Sdk/Frameworks/TestMethodComparer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Equals" signature="(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMethodFinished" filename="/_/src/messages/TestMethodFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMethodMessage" filename="/_/src/messages/BaseMessages/TestMethodMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="(Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMethodRunner`1" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/TestMethodRunner.cs" line-rate="1" branch-rate="1" complexity="19">
          <methods>
            <method name="Aggregator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregator" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="(System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Class" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Class" signature="(Xunit.Abstractions.IReflectionTypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="(Xunit.Sdk.IMessageBus)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Method" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Method" signature="(Xunit.Abstractions.IReflectionMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="(Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IReflectionTypeInfo,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable`1&lt;TTestCase&gt;,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AfterTestMethodStarting" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="BeforeTestMethodFinished" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="9">
              <lines />
            </method>
            <method name="RunTestCasesAsync" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMethodStarting" filename="/_/src/messages/TestMethodStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestMethodTestCase" filename="/_/src/xunit.execution/Sdk/Frameworks/TestMethodTestCase.cs" line-rate="1" branch-rate="1" complexity="19">
          <methods>
            <method name="BaseDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultMethodDisplay" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultMethodDisplay" signature="(Xunit.Sdk.TestMethodDisplay)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultMethodDisplayOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultMethodDisplayOptions" signature="(Xunit.Sdk.TestMethodDisplayOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitializationException" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitializationException" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Method" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Method" signature="(Xunit.Abstractions.IMethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodGenericTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformation" signature="(Xunit.Abstractions.ISourceInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="(Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Traits" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Traits" signature="(System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.TestMethodDisplay,Xunit.Sdk.TestMethodDisplayOptions,Xunit.Abstractions.ITestMethod,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="EnsureInitialized" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetUniqueID" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="BytesToHexString" signature="(System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NibbleToHexChar" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="Write" signature="(System.IO.Stream,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestOutput" filename="/_/src/messages/TestOutput.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestOutputHelper" filename="/_/src/xunit.execution/Sdk/Frameworks/TestOutputHelper.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GuardInitialized" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="QueueTestOutput" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EscapeInvalidHexChars" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Uninitialize" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WriteLine" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteLine" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestPassed" filename="/_/src/messages/TestPassed.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestResultMessage" filename="/_/src/messages/BaseMessages/TestResultMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestRunner`1" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/TestRunner.cs" line-rate="1" branch-rate="1" complexity="16">
          <methods>
            <method name="Aggregator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Aggregator" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancellationTokenSource" signature="(System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageBus" signature="(Xunit.Sdk.IMessageBus)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Test" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Test" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.String,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AfterTestStarting" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="BeforeTestFinished" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RunAsync" signature="()" line-rate="1" branch-rate="1" complexity="14">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestSkipped" filename="/_/src/messages/TestSkipped.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Reason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestStarting" filename="/_/src/messages/TestStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TestTimeoutException" filename="/_/src/xunit.execution/Sdk/Frameworks/TestTimeoutException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TheoryDiscoverer" filename="/_/src/xunit.execution/Sdk/Frameworks/TheoryDiscoverer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCaseForDataRow" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCasesForDataRow" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCaseForSkip" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCasesForSkip" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCaseForTheory" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCasesForTheory" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCaseForSkippedDataRow" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[],System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestCasesForSkippedDataRow" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[],System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Discover" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TraitHelper" filename="/_/src/xunit.execution/Sdk/TraitHelper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetTraits" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindDiscovererAttributeType" signature="(System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.TypeUtility" filename="/_/src/xunit.execution/Sdk/TypeUtility.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ConvertToSimpleTypeName" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveMethodArguments" signature="(System.Reflection.MethodBase,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryConvertObject" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PerformDefinedConversions" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsByRefLikeType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDisplayNameWithArguments" signature="(Xunit.Abstractions.IMethodInfo,System.String,System.Object[],Xunit.Abstractions.ITypeInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterName" signature="(Xunit.Abstractions.IParameterInfo[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParameterToDisplayValue" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveGenericDisplay" signature="(Xunit.Abstractions.ITypeInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveGenericParameter" signature="(Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.ITypeInfo,System.Type,System.Type&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArrayElementTypeOrThis" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StripElementType" signature="(Xunit.Abstractions.ITypeInfo,System.Boolean&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveMismatchedGenericArguments" signature="(Xunit.Abstractions.ITypeInfo,System.Type,Xunit.Abstractions.ITypeInfo[],System.Type&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveGenericType" signature="(Xunit.Abstractions.ITypeInfo,System.Object[],Xunit.Abstractions.IParameterInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveGenericTypes" signature="(Xunit.Abstractions.IMethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultValue" signature="(System.Reflection.TypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitSkippedDataRowTestCase" filename="/_/src/xunit.execution/Sdk/Frameworks/XunitSkippedDataRowTestCase.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Sdk.TestMethodDisplayOptions,Xunit.Abstractions.ITestMethod,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSkipReason" signature="(Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTest" filename="/_/src/xunit.execution/Sdk/Frameworks/XunitTest.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="(Xunit.Sdk.IXunitTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITest.get_TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.IXunitTestCase,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestAssemblyRunner" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestAssemblyRunner.cs" line-rate="1" branch-rate="1" complexity="55">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestAssembly,System.Collections.Generic.IEnumerable`1&lt;Xunit.Sdk.IXunitTestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetTestFrameworkDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetTestFrameworkEnvironment" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="SetupSyncContext" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="()" line-rate="1" branch-rate="1" complexity="12">
              <lines />
            </method>
            <method name="AfterTestAssemblyStartingAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="BeforeTestAssemblyFinishedAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RunTestCollectionAsync" signature="(Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable`1&lt;Xunit.Sdk.IXunitTestCase&gt;,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetSynchronizationContext" signature="(System.Threading.SynchronizationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestCollectionsAsync" signature="()" line-rate="1" branch-rate="1" complexity="35">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestCase" filename="/_/src/xunit.execution/Sdk/Frameworks/XunitTestCase.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Timeout" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Timeout" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Sdk.TestMethodDisplayOptions,Xunit.Abstractions.ITestMethod,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDisplayName" signature="(Xunit.Abstractions.IAttributeInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSkipReason" signature="(Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTimeout" signature="(Xunit.Abstractions.IAttributeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="GetCachedTraitAttributes" signature="(Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCachedTraitAttributes" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTraitAttributesData" signature="(Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAsync" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestCaseRunner" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestCaseRunner.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="BeforeAfterAttributes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.IXunitTestCase,System.String,System.String,System.Object[],System.Object[],Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTest" signature="(Xunit.Sdk.IXunitTestCase,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestRunner" signature="(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.String,System.Collections.Generic.IReadOnlyList`1&lt;Xunit.Sdk.BeforeAfterTestAttribute&gt;,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetBeforeAfterTestAttributes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="RunTestAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestClassRunner" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestClassRunner.cs" line-rate="1" branch-rate="1" complexity="28">
          <methods>
            <method name="ClassFixtureMappings" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClassFixtureMappings" signature="(System.Collections.Generic.Dictionary`2&lt;System.Type,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitializedAsyncFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitializedAsyncFixtures" signature="(System.Collections.Generic.HashSet`1&lt;Xunit.IAsyncLifetime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable`1&lt;Xunit.Sdk.IXunitTestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Collections.Generic.IDictionary`2&lt;System.Type,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateClassFixture" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatConstructorArgsMissingMessage" signature="(System.Reflection.ConstructorInfo,System.Collections.Generic.IReadOnlyList`1&lt;System.Tuple`2&lt;System.Int32,System.Reflection.ParameterInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestMethodAsync" signature="(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable`1&lt;Xunit.Sdk.IXunitTestCase&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectTestClassConstructor" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="TryGetConstructorArgument" signature="(System.Reflection.ConstructorInfo,System.Int32,System.Reflection.ParameterInfo,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AfterTestClassStartingAsync" signature="()" line-rate="1" branch-rate="1" complexity="16">
              <lines />
            </method>
            <method name="BeforeTestClassFinishedAsync" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="CreateClassFixtureAsync" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestCollectionRunner" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestCollectionRunner.cs" line-rate="1" branch-rate="1" complexity="22">
          <methods>
            <method name="CollectionFixtureMappings" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectionFixtureMappings" signature="(System.Collections.Generic.Dictionary`2&lt;System.Type,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable`1&lt;Xunit.Sdk.IXunitTestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateCollectionFixture" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCaseOrderer" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="RunTestClassAsync" signature="(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable`1&lt;Xunit.Sdk.IXunitTestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AfterTestCollectionStartingAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="BeforeTestCollectionFinishedAsync" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="CreateCollectionFixturesAsync" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestFramework" filename="/_/src/xunit.execution/Sdk/Frameworks/XunitTestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDiscoverer" signature="(Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateExecutor" signature="(System.Reflection.AssemblyName)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestFrameworkDiscoverer" filename="/_/src/xunit.execution/Sdk/Frameworks/XunitTestFrameworkDiscoverer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="DiscovererTypeCache" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollectionFactory" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollectionFactory" signature="(Xunit.Sdk.IXunitTestCollectionFactory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IXunitTestCollectionFactory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestClass" signature="(Xunit.Abstractions.ITypeInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestClass" signature="(Xunit.Abstractions.ITypeInfo,System.Guid)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindTestsForMethod" signature="(Xunit.Abstractions.ITestMethod,System.Boolean,Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindTestsForType" signature="(Xunit.Abstractions.ITestClass,System.Boolean,Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDiscoverer" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestFrameworkExecutor" filename="/_/src/xunit.execution/Sdk/Frameworks/XunitTestFrameworkExecutor.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="TestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="(Xunit.Sdk.TestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.AssemblyName,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDiscoverer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Deserialize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestCases" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestInvoker" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestInvoker.cs" line-rate="1" branch-rate="1" complexity="14">
          <methods>
            <method name="BeforeAfterAttributes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.Collections.Generic.IReadOnlyList`1&lt;Xunit.Sdk.BeforeAfterTestAttribute&gt;,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeforeTestMethodInvokedAsync" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="AfterTestMethodInvokedAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="InvokeTestMethodAsync" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeTimeoutTestMethodAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestMethodRunner" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestMethodRunner.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IReflectionTypeInfo,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable`1&lt;Xunit.Sdk.IXunitTestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestCaseAsync" signature="(Xunit.Sdk.IXunitTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTestRunner" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestRunner.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="BeforeAfterAttributes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.String,System.Collections.Generic.IReadOnlyList`1&lt;Xunit.Sdk.BeforeAfterTestAttribute&gt;,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeTestMethodAsync" signature="(Xunit.Sdk.ExceptionAggregator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeTestAsync" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTheoryTestCase" filename="/_/src/xunit.execution/Sdk/Frameworks/XunitTheoryTestCase.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Sdk.TestMethodDisplayOptions,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAsync" signature="(Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitTheoryTestCaseRunner" filename="/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTheoryTestCaseRunner.cs" line-rate="1" branch-rate="1" complexity="32">
          <methods>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Sdk.IXunitTestCase,System.String,System.String,System.Object[],Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeforeTestCaseFinishedAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RunTest_DataDiscoveryException" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AfterTestCaseStartingAsync" signature="()" line-rate="1" branch-rate="1" complexity="17">
              <lines />
            </method>
            <method name="RunTestAsync" signature="()" line-rate="1" branch-rate="1" complexity="9">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitWorkerThread" filename="/_/src/common/XunitWorkerThread.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Join" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="QueueUserWorkItem" signature="(System.Action,System.Threading.EventWaitHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Serialization.XunitSerializationInfo" filename="/_/src/common/XunitSerializationInfo.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.IXunitSerializable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddValue" signature="(System.String,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.String,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSerializedString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="SerializeTriple" signature="(Xunit.Serialization.XunitSerializationTriple)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeTriple" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeSerializable" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanSerializeObject" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromBase64" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToBase64" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ArrayData" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Serialization.XunitSerializationTriple" filename="/_/src/common/XunitSerializationInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="xunit.runner.reporters.net452" line-rate="0.00760456273764259" branch-rate="0.00256410256410256" complexity="373">
      <classes>
        <class name="Xunit.EnvironmentHelper" filename="/_/src/xunit.runner.reporters/Utility/EnvironmentHelper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetEnvironmentVariable" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonArray" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Length" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonValue[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonBoolean" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(Xunit.JsonBoolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonBuffer" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="35">
          <methods>
            <method name=".ctor" signature="(System.IO.TextReader)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Read" signature="()" line-rate="1" branch-rate="1" complexity="15">
              <lines />
            </method>
            <method name="ReadNextChar" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ReadNumber" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadString" signature="()" line-rate="1" branch-rate="1" complexity="17">
              <lines />
            </method>
            <method name="IsWhitespace" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializer" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Deserialize" signature="(System.IO.TextReader)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeInternal" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeArray" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeObject" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializerException" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Line" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Column" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializerResource" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="JSON_OpenString" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="JSON_InvalidEnd" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_IllegalCharacter" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_IllegalTrailingCharacterAfterLiteral" signature="(System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_UnrecognizedLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_DuplicateObjectMemberName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidFloatNumberFormat" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_FloatNumberOverflow" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntax" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxNotExpected" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxNotExpected" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.Char,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidTokenExpectation" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidUnicode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_UnfinishedJSON" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonNull" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonNumber" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Double" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raw" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonObject" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Keys" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,Xunit.JsonValue&gt;,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsJsonObject" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsInt" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsBoolean" signature="(System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsNullableBoolean" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsStringArray" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonString" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Implicit" signature="(Xunit.JsonString)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonValue" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Line" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Column" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.AppVeyorClient" filename="/_/src/xunit.runner.reporters/AppVeyorClient.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name=".ctor" signature="(Xunit.IRunnerLogger,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WaitOne" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTest" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateTest" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunLoop" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendRequest" signature="()" line-rate="1" branch-rate="1" complexity="9">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.AppVeyorReporter" filename="/_/src/xunit.runner.reporters/AppVeyorReporter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnvironmentallyEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnerSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageHandler" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.AppVeyorReporterMessageHandler" filename="/_/src/xunit.runner.reporters/AppVeyorReporterMessageHandler.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.IRunnerLogger,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestPassed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestPassed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestSkipped" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestSkipped&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestFailed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestFailed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFinishedTestName" signature="(System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppVeyorAddTest" signature="(System.String,System.String,System.String,System.String,System.Nullable`1&lt;System.Int64&gt;,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppVeyorUpdateTest" signature="(System.String,System.String,System.String,System.String,System.Nullable`1&lt;System.Int64&gt;,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TrimStdOut" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.JsonExtentions" filename="/_/src/xunit.runner.reporters/JsonExtentions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ToJson" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddValue" signature="(System.Text.StringBuilder,System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="JsonEscape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="initObject" signature="(System.String,System.Object,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestCollectionStarting,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestCollectionFinished,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestFailed,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestSkipped,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestStarting,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.IErrorMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestPassed,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestMethodCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestCollectionCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestClassCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestAssemblyCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(Xunit.Abstractions.ITestCaseCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.JsonReporter" filename="/_/src/xunit.runner.reporters/JsonReporter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnvironmentallyEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnerSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageHandler" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.JsonReporterMessageHandler" filename="/_/src/xunit.runner.reporters/JsonReporterMessageHandler.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IRunnerLogger,System.Func`2&lt;System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToFlowId" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.QuietReporter" filename="/_/src/xunit.runner.reporters/QuietReporter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnvironmentallyEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnerSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageHandler" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.QuietReporterMessageHandler" filename="/_/src/xunit.runner.reporters/QuietReporterMessageHandler.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.TeamCityDisplayNameFormatter" filename="/_/src/xunit.runner.reporters/Utility/TeamCityDisplayNameFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="DisplayName" signature="(Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.TeamCityReporter" filename="/_/src/xunit.runner.reporters/TeamCityReporter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnvironmentallyEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnerSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageHandler" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.TeamCityReporterMessageHandler" filename="/_/src/xunit.runner.reporters/TeamCityReporterMessageHandler.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.IRunnerLogger,System.Func`2&lt;System.String,System.String&gt;,Xunit.Runner.Reporters.TeamCityDisplayNameFormatter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleErrorMessage" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.IErrorMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestClassCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCollectionCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCollectionCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCollectionFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCollectionFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCollectionStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCollectionStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestFailed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestFailed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestMethodCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestMethodCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestPassed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestPassed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestSkipped" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestSkipped&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(System.String,Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogFinish" signature="(Xunit.Abstractions.ITestResultMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAscii" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Escape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToFlowId" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.VerboseReporter" filename="/_/src/xunit.runner.reporters/VerboseReporter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnvironmentallyEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnerSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageHandler" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.VerboseReporterMessageHandler" filename="/_/src/xunit.runner.reporters/VerboseReporterMessageHandler.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.VstsClient" filename="/_/src/xunit.runner.reporters/VstsClient.cs" line-rate="1" branch-rate="1" complexity="64">
          <methods>
            <method name=".ctor" signature="(Xunit.IRunnerLogger,System.String,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WaitOne" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTest" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;,Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateTest" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;,Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToJson" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateTestRun" signature="()" line-rate="1" branch-rate="1" complexity="12">
              <lines />
            </method>
            <method name="FinishTestRun" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="RunLoop" signature="()" line-rate="1" branch-rate="1" complexity="18">
              <lines />
            </method>
            <method name="SendTestResults" signature="()" line-rate="1" branch-rate="1" complexity="24">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.VstsReporter" filename="/_/src/xunit.runner.reporters/VstsReporter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnvironmentallyEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnerSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageHandler" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.Reporters.VstsReporterMessageHandler" filename="/_/src/xunit.runner.reporters/VstsReporterMessageHandler.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.IRunnerLogger,System.String,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestPassed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestPassed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestSkipped" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestSkipped&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestFailed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestFailed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VstsAddTest" signature="(System.String,System.String,System.String,Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VstsUpdateTest" signature="(Xunit.Abstractions.ITest,System.String,System.Nullable`1&lt;System.Int64&gt;,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TrimStdOut" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitWorkerThread" filename="/_/src/common/XunitWorkerThread.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Join" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="QueueUserWorkItem" signature="(System.Action,System.Threading.EventWaitHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="xunit.runner.utility.net452" line-rate="0.204460966542751" branch-rate="0.115892139988526" complexity="1680">
      <classes>
        <class name="AssemblyExtensions" filename="/_/src/common/AssemblyExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetLocalCodeBase" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetLocalCodeBase" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="CommonTasks" filename="/_/src/common/CommonTasks.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="DictionaryExtensions" filename="/_/src/common/DictionaryExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,System.Collections.Generic.List`1&lt;TValue&gt;&gt;,TKey,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrGet" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrGet" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;,TKey,System.Func`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,System.Collections.Generic.List`1&lt;TValue&gt;&gt;,TKey,TValue,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDictionaryIgnoringDuplicateKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Func`2&lt;TValue,TKey&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDictionaryIgnoringDuplicateKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TInput&gt;,System.Func`2&lt;TInput,TKey&gt;,System.Func`2&lt;TInput,TValue&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="DisposableExtensions" filename="/_/src/xunit.runner.utility/Extensions/DisposableExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SafeDispose" signature="(System.IDisposable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="ExceptionExtensions" filename="/_/src/common/ExceptionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="RethrowWithNoStackTraceLoss" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unwrap" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Guard" filename="/_/src/common/Guard.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ArgumentNotNull" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgumentNotNullOrEmpty" signature="(System.String,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgumentValid" signature="(System.String,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FileExists" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="IRunnerLoggerExtensions" filename="/_/src/xunit.runner.utility/Extensions/IRunnerLoggerExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="LogMessage" signature="(Xunit.IRunnerLogger,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogMessage" signature="(Xunit.IRunnerLogger,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogMessage" signature="(Xunit.IRunnerLogger,Xunit.StackFrameInfo,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogImportantMessage" signature="(Xunit.IRunnerLogger,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogImportantMessage" signature="(Xunit.IRunnerLogger,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogImportantMessage" signature="(Xunit.IRunnerLogger,Xunit.StackFrameInfo,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWarning" signature="(Xunit.IRunnerLogger,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWarning" signature="(Xunit.IRunnerLogger,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWarning" signature="(Xunit.IRunnerLogger,Xunit.StackFrameInfo,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(Xunit.IRunnerLogger,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(Xunit.IRunnerLogger,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(Xunit.IRunnerLogger,Xunit.StackFrameInfo,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="MessageSinkMessageExtensions" filename="/_/src/xunit.runner.utility/Extensions/MessageSinkMessageExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Cast" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispatch" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;,Xunit.MessageHandler`1&lt;TMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="MessageSinkWithTypesExtensions" filename="/_/src/xunit.runner.utility/Extensions/MessageSinkWithTypesExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnMessage" signature="(Xunit.IMessageSinkWithTypes,Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NewReflectionExtensions" filename="/_/src/common/NewReflectionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetAssembly" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnum" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFromLocalAssembly" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericTypeDefinition" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNullableEnum" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsValueType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapNullable" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetGenericArguments" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInterfaces" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAssignableFrom" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="TestFrameworkExtensions" filename="/_/src/xunit.runner.utility/Extensions/TestFrameworkExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Find" signature="(Xunit.Abstractions.ITestFrameworkDiscoverer,System.Boolean,Xunit.IMessageSinkWithTypes,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(Xunit.Abstractions.ITestFrameworkDiscoverer,System.String,System.Boolean,Xunit.IMessageSinkWithTypes,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAll" signature="(Xunit.Abstractions.ITestFrameworkExecutor,Xunit.IMessageSinkWithTypes,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTests" signature="(Xunit.Abstractions.ITestFrameworkExecutor,System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.IMessageSinkWithTypes,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="TestFrameworkOptionsReadWriteExtensions" filename="/_/src/xunit.runner.utility/Extensions/TestFrameworkOptionsReadWriteExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetDiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInternalDiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDiagnosticMessagesOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInternalDiagnosticMessagesOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodDisplay" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodDisplayOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodDisplayOptions" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodDisplayOptionsOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPreEnumerateTheories" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPreEnumerateTheoriesOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSynchronousMessageReporting" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSynchronousMessageReportingOrDefault" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetDiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetInternalDiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetMethodDisplay" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable`1&lt;Xunit.TestMethodDisplay&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetMethodDisplayOptions" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable`1&lt;Xunit.TestMethodDisplayOptions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetPreEnumerateTheories" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetSynchronousMessageReporting" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInternalDiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDiagnosticMessagesOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInternalDiagnosticMessagesOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDisableParallelization" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDisableParallelizationOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMaxParallelThreads" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMaxParallelThreadsOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSynchronousMessageReporting" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSynchronousMessageReportingOrDefault" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetDiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetInternalDiagnosticMessages" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetStopOnTestFail" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetDisableParallelization" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetMaxParallelThreads" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetSynchronousMessageReporting" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="TestOptionsNames" filename="/_/src/common/TestOptionsNames.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="XmlNodeExtensions" filename="/_/src/xunit.runner.utility/Frameworks/v1/XmlNodeExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ToTestCase" signature="(System.Xml.XmlNode,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit._DiagnosticMessage" filename="/_/src/common/AssemblyResolution/_DiagnosticMessage.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AfterTestFinished" filename="/_/src/messages/AfterTestFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AttributeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AfterTestStarting" filename="/_/src/messages/AfterTestStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AttributeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AggregateMessageSink" filename="/_/src/xunit.runner.utility/Sinks/AggregateMessageSink.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="AggregatedSinks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetOrCreateAggregatedSink" signature="(TDispatcher&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AppDomainManager_AppDomain" filename="/_/src/xunit.runner.utility/AppDomain/AppDomainManager_AppDomain.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="AppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppDomain" signature="(System.AppDomain)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyFileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyFileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigFileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigFileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasAppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateAppDomain" signature="(System.String,System.String,System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateObjectFrom" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateObject" signature="(System.Reflection.AssemblyName,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetDefaultConfigFile" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AppDomainManager_NoAppDomain" filename="/_/src/xunit.runner.utility/AppDomain/AppDomainManager_NoAppDomain.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="HasAppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateObject" signature="(System.Reflection.AssemblyName,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateObjectFrom" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AppDomainManagerFactory" filename="/_/src/xunit.runner.utility/AppDomain/AppDomainManagerFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Create" signature="(System.Boolean,System.String,System.String,System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AssemblyHelper" filename="/_/src/common/AssemblyResolution/AssemblyHelper_Desktop.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="LoadAssembly" signature="(System.Reflection.AssemblyName)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Resolve" signature="(System.Object,System.ResolveEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveAndLoadAssembly" signature="(System.String,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubscribeResolveForAssembly" signature="(System.String,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubscribeResolveForAssembly" signature="(System.Type,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.BeforeTestFinished" filename="/_/src/messages/BeforeTestFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AttributeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.BeforeTestStarting" filename="/_/src/messages/BeforeTestStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AttributeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttributeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ConfigReader" filename="/_/src/xunit.runner.utility/Configuration/ConfigReader.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Load" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Load" signature="(System.IO.Stream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ConfigReader_Configuration" filename="/_/src/xunit.runner.utility/Configuration/ConfigReader_Configuration.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Load" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetBoolean" signature="(System.Configuration.KeyValueConfigurationCollection,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnum" signature="(System.Configuration.KeyValueConfigurationCollection,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInt" signature="(System.Configuration.KeyValueConfigurationCollection,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.Configuration.KeyValueConfigurationCollection,System.String,System.Func`2&lt;System.String,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ConfigReader_Json" filename="/_/src/xunit.runner.utility/Configuration/ConfigReader_Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Load" signature="(System.IO.Stream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Load" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LoadFile" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="File_OpenRead" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ConsoleHelper" filename="/_/src/common/ConsoleHelper.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SetForegroundColorANSI" signature="(System.ConsoleColor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetForegroundColorConsole" signature="(System.ConsoleColor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResetColorANSI" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ResetColorConsole" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ConsoleRunnerLogger" filename="/_/src/xunit.runner.utility/Utility/ConsoleRunnerLogger.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="LockObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogImportantMessage" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogMessage" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWarning" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetColor" signature="(System.ConsoleColor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.ConsoleColor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DefaultRunnerReporter" filename="/_/src/xunit.runner.utility/Reporters/DefaultRunnerReporter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnvironmentallyEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnerSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageHandler" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DefaultRunnerReporterMessageHandler" filename="/_/src/xunit.runner.utility/Reporters/DefaultRunnerReporterMessageHandler.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Logger" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Logger" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddExecutionOptions" signature="(System.String,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Escape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAssemblyDisplayName" signature="(Xunit.Abstractions.ITestAssemblyMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAssemblyDisplayName" signature="(Xunit.XunitProjectAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExecutionOptions" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(System.String,Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogStackTrace" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogOutput" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveExecutionOptions" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IErrorMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestAssemblyDiscoveryFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestAssemblyDiscoveryStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestAssemblyExecutionFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestAssemblyExecutionStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestAssemblyCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCaseCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCollectionCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestExecutionSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestFailed)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestMethodCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestPassed)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestSkipped)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteDefaultSummary" signature="(Xunit.IRunnerLogger,Xunit.ITestExecutionSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ReadLock" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WriteLock" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DefaultRunnerReporterWithTypes" filename="/_/src/xunit.runner.utility/Reporters/DefaultRunnerReporterWithTypes.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEnvironmentallyEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnerSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMessageHandler" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DefaultRunnerReporterWithTypesMessageHandler" filename="/_/src/xunit.runner.utility/Reporters/DefaultRunnerReporterWithTypesMessageHandler.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Logger" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Logger" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IRunnerLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddExecutionOptions" signature="(System.String,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Escape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAssemblyDisplayName" signature="(Xunit.Abstractions.ITestAssemblyMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAssemblyDisplayName" signature="(Xunit.XunitProjectAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExecutionOptions" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(System.String,Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogStackTrace" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogOutput" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveExecutionOptions" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleErrorMessage" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.IErrorMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyDiscoveryFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.ITestAssemblyDiscoveryFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyDiscoveryStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.ITestAssemblyDiscoveryStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyExecutionFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.ITestAssemblyExecutionFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyExecutionStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.ITestAssemblyExecutionStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestClassCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestClassCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCollectionCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCollectionCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestExecutionSummary" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.ITestExecutionSummary&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestFailed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestFailed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestMethodCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestMethodCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestPassed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestPassed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestSkipped" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestSkipped&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteDefaultSummary" signature="(Xunit.IRunnerLogger,Xunit.ITestExecutionSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ReadLock" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WriteLock" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DefaultTestCaseBulkDeserializer" filename="/_/src/xunit.runner.utility/Descriptor/DefaultTestCaseBulkDeserializer.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestFrameworkExecutor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BulkDeserialize" signature="(System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DefaultTestCaseDescriptorProvider" filename="/_/src/xunit.runner.utility/Descriptor/DefaultTestCaseDescriptorProvider.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestFrameworkDiscoverer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCaseDescriptors" signature="(System.Collections.Generic.List`1&lt;Xunit.Abstractions.ITestCase&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DelegatingExecutionSummarySink" filename="/_/src/xunit.runner.utility/Sinks/DelegatingSinks/DelegatingExecutionSummarySink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ExecutionSummary" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IMessageSinkWithTypes,System.Func`1&lt;System.Boolean&gt;,System.Action`2&lt;System.String,Xunit.ExecutionSummary&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HandleTestAssemblyFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DelegatingFailSkipSink" filename="/_/src/xunit.runner.utility/Sinks/DelegatingSinks/DelegatingFailSkipSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ExecutionSummary" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IExecutionSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DelegatingLongRunningTestDetectionSink" filename="/_/src/xunit.runner.utility/Sinks/DelegatingSinks/DelegatingLongRunningTestDetectionSink.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="ExecutionSummary" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UtcNow" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IExecutionSink,System.TimeSpan,Xunit.IMessageSinkWithTypes)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IExecutionSink,System.TimeSpan,System.Action`1&lt;Xunit.LongRunningTestsSummary&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DispatchLongRunningTestsSummaryAsDiagnosticMessage" signature="(Xunit.LongRunningTestsSummary,Xunit.IMessageSinkWithTypes)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HandleTestAssemblyFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendLongRunningMessage" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ThreadWorker" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WaitForStopEvent" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DelegatingXmlCreationSink" filename="/_/src/xunit.runner.utility/Sinks/DelegatingSinks/DelegatingXmlCreationSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ExecutionSummary" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IExecutionSink,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddError" signature="(System.String,System.String,Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFailureElement" signature="(Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestResultElement" signature="(Xunit.Abstractions.ITestResultMessage,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetTestCollectionElement" signature="(Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleErrorMessage" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.IErrorMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestClassCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestClassCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCollectionCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCollectionCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCollectionFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCollectionFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestFailed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestFailed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestMethodCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestMethodCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestPassed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestPassed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestSkipped" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestSkipped&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="XmlEscape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DiagnosticEventSink" filename="/_/src/xunit.runner.utility/Sinks/EventSinks/DiagnosticEventSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DiagnosticMessage" filename="/_/src/messages/DiagnosticMessage.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="InterfaceTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DiaNavigationData" filename="/_/src/xunit.runner.utility/Utility/DiaNavigationData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DiaSession" filename="/_/src/xunit.runner.utility/Utility/DiaSession.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetNavigationData" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DiaSessionWrapper" filename="/_/src/xunit.runner.utility/Utility/DiaSessionWrapper.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNavigationData" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DiaSessionWrapperHelper" filename="/_/src/xunit.runner.utility/Utility/DiaSessionWrapperHelper.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStateMachineType_NoOp" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitializeGetStateMachineType" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Normalize" signature="(System.String&amp;,System.String&amp;,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.DiscoveryEventSink" filename="/_/src/xunit.runner.utility/Sinks/EventSinks/DiscoveryEventSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ErrorMessage" filename="/_/src/messages/ErrorMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ExceptionUtility" filename="/_/src/common/ExceptionUtility.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CombineMessages" signature="(Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CombineStackTraces" signature="(Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeStackFrame" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterStackTrace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAt" signature="(System.String[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAt" signature="(System.Int32[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMessage" signature="(Xunit.Abstractions.IFailureInformation,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStackTrace" signature="(Xunit.Abstractions.IFailureInformation,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertExceptionToFailureInformation" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertExceptionToFailureInformation" signature="(System.Exception,System.Int32,System.Collections.Generic.List`1&lt;System.String&gt;,System.Collections.Generic.List`1&lt;System.String&gt;,System.Collections.Generic.List`1&lt;System.String&gt;,System.Collections.Generic.List`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitLines" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ExecutionEventSink" filename="/_/src/xunit.runner.utility/Sinks/EventSinks/ExecutionEventSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ExecutionSummary" filename="/_/src/xunit.runner.utility/Utility/ExecutionSummary.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Total" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Total" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Failed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Failed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Time" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Time" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Errors" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Errors" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.FailSkipVisitor" filename="/_/src/xunit.runner.utility/Visitors/FailSkipVisitor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionSummary" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IExecutionVisitor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonArray" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Length" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonValue[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonBoolean" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(Xunit.JsonBoolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonBuffer" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="35">
          <methods>
            <method name=".ctor" signature="(System.IO.TextReader)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Read" signature="()" line-rate="1" branch-rate="1" complexity="15">
              <lines />
            </method>
            <method name="ReadNextChar" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ReadNumber" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadString" signature="()" line-rate="1" branch-rate="1" complexity="17">
              <lines />
            </method>
            <method name="IsWhitespace" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializer" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Deserialize" signature="(System.IO.TextReader)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeInternal" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeArray" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeObject" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializerException" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Line" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Column" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializerResource" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="JSON_OpenString" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="JSON_InvalidEnd" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_IllegalCharacter" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_IllegalTrailingCharacterAfterLiteral" signature="(System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_UnrecognizedLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_DuplicateObjectMemberName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidFloatNumberFormat" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_FloatNumberOverflow" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntax" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxNotExpected" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxNotExpected" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.Char,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidTokenExpectation" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidUnicode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_UnfinishedJSON" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonNull" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonNumber" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Double" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raw" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonObject" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Keys" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,Xunit.JsonValue&gt;,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsJsonObject" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsInt" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsBoolean" signature="(System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsNullableBoolean" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsStringArray" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonString" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Implicit" signature="(Xunit.JsonString)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonValue" filename="/_/src/common/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Line" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Column" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.LongRunningTestsSummary" filename="/_/src/xunit.runner.utility/Messages/LongRunningTestsSummary.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ConfiguredLongRunningTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.TimeSpan,System.Collections.Generic.IDictionary`2&lt;Xunit.Abstractions.ITestCase,System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.MessageHandlerArgs" filename="/_/src/xunit.runner.utility/Sinks/EventSinks/MessageHandlerArgs.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IsStopped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsStopped" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Stop" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.MessageHandlerArgs`1" filename="/_/src/xunit.runner.utility/Sinks/EventSinks/MessageHandlerArgs.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.MessageSinkAdapter" filename="/_/src/xunit.runner.utility/Messages/MessageSinkAdapter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Xunit.IMessageSinkWithTypes)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetImplementedInterfaces" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Wrap" signature="(Xunit.IMessageSinkWithTypes)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.MessageSinkWithTypesAdapter" filename="/_/src/xunit.runner.utility/Messages/MessageSinkWithTypesAdapter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Wrap" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.NullMessageSink" filename="/_/src/common/NullMessageSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.NullSourceInformationProvider" filename="/_/src/xunit.runner.utility/Frameworks/NullSourceInformationProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="GetSourceInformation" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.OptimizedRemoteMessageSink" filename="/_/src/xunit.runner.utility/Messages/OptimizedRemoteMessageSink.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.IMessageSinkWithTypes)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMessageTypes" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.RemotingUtility" filename="/_/src/xunit.runner.utility/Utility/RemotingUtility.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="CleanUpRegisteredChannels" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.RunnerEventSink" filename="/_/src/xunit.runner.utility/Sinks/EventSinks/RunnerEventSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.AssemblyRunner" filename="/_/src/xunit.runner.utility/Runners/AssemblyRunner.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="OnDiagnosticMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnDiagnosticMessage" signature="(System.Action`1&lt;Xunit.Runners.DiagnosticMessageInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnDiscoveryComplete" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnDiscoveryComplete" signature="(System.Action`1&lt;Xunit.Runners.DiscoveryCompleteInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnErrorMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnErrorMessage" signature="(System.Action`1&lt;Xunit.Runners.ErrorMessageInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnExecutionComplete" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnExecutionComplete" signature="(System.Action`1&lt;Xunit.Runners.ExecutionCompleteInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestFailed" signature="(System.Action`1&lt;Xunit.Runners.TestFailedInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestFinished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestFinished" signature="(System.Action`1&lt;Xunit.Runners.TestFinishedInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestOutput" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestOutput" signature="(System.Action`1&lt;Xunit.Runners.TestOutputInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestPassed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestPassed" signature="(System.Action`1&lt;Xunit.Runners.TestPassedInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestSkipped" signature="(System.Action`1&lt;Xunit.Runners.TestSkippedInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestStarting" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestStarting" signature="(System.Action`1&lt;Xunit.Runners.TestStartingInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Status" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseFilter" signature="(System.Func`2&lt;Xunit.Abstractions.ITestCase,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.AppDomainSupport,System.String,System.String,System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMessageTypeName" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Cancel" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="GetDiscoveryOptions" signature="(System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;Xunit.TestMethodDisplay&gt;,System.Nullable`1&lt;Xunit.TestMethodDisplayOptions&gt;,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExecutionOptions" signature="(System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Int32&gt;,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Start" signature="(System.String,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;Xunit.TestMethodDisplay&gt;,System.Nullable`1&lt;Xunit.TestMethodDisplayOptions&gt;,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Int32&gt;,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithAppDomain" signature="(System.String,System.String,System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutAppDomain" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DispatchMessage" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;,System.Action`1&lt;TMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.IMessageSinkWithTypes.OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.DiagnosticMessageInfo" filename="/_/src/xunit.runner.utility/Runners/DiagnosticMessageInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.DiscoveryCompleteInfo" filename="/_/src/xunit.runner.utility/Runners/DiscoveryCompleteInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestCasesDiscovered" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCasesToRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.ErrorMessageInfo" filename="/_/src/xunit.runner.utility/Runners/ErrorMessageInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="MesssageType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionStackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Runners.ErrorMessageType,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.ExecutionCompleteInfo" filename="/_/src/xunit.runner.utility/Runners/ExecutionCompleteInfo.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="TotalTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,System.Int32,System.Int32,System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.TestExecutedInfo" filename="/_/src/xunit.runner.utility/Runners/TestExecutedInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String,System.String,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.TestFailedInfo" filename="/_/src/xunit.runner.utility/Runners/TestFailedInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionStackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.TestFinishedInfo" filename="/_/src/xunit.runner.utility/Runners/TestFinishedInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String,System.String,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.TestInfo" filename="/_/src/xunit.runner.utility/Runners/TestInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TypeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Traits" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollectionDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.TestOutputInfo" filename="/_/src/xunit.runner.utility/Runners/TestOutputInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.TestPassedInfo" filename="/_/src/xunit.runner.utility/Runners/TestPassedInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String,System.String,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.TestSkippedInfo" filename="/_/src/xunit.runner.utility/Runners/TestSkippedInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SkipReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runners.TestStartingInfo" filename="/_/src/xunit.runner.utility/Runners/TestStartingInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.LongLivedMarshalByRefObject" filename="/_/src/common/LongLivedMarshalByRefObject.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="DisconnectAll" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InitializeLifetimeService" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.SerializationHelper" filename="/_/src/common/SerializationHelper.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Deserialize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSerializable" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetType" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetType" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTypeNameForSerialization" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstringTrim" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitAtOuterCommas" signature="(System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Sdk.XunitWorkerThread" filename="/_/src/common/XunitWorkerThread.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Join" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="QueueUserWorkItem" signature="(System.Action,System.Threading.EventWaitHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Serialization.XunitSerializationInfo" filename="/_/src/common/XunitSerializationInfo.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.IXunitSerializable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddValue" signature="(System.String,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.String,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSerializedString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="SerializeTriple" signature="(Xunit.Serialization.XunitSerializationTriple)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeTriple" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeSerializable" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanSerializeObject" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromBase64" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToBase64" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ArrayData" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Serialization.XunitSerializationTriple" filename="/_/src/common/XunitSerializationInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.SourceInformation" filename="/_/src/common/SourceInformation.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.StackFrameInfo" filename="/_/src/xunit.runner.utility/Utility/StackFrameInfo.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="FileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFailure" signature="(Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromSourceInformation" signature="(Xunit.Abstractions.ISourceInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStackFrameRegex" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.StackFrameTransformer" filename="/_/src/xunit.runner.utility/Utility/StackFrameTransformer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="TransformFrame" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransformStack" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyCleanupFailure" filename="/_/src/messages/TestAssemblyCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyConfiguration" filename="/_/src/xunit.runner.utility/Frameworks/TestAssemblyConfiguration.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppDomain" signature="(System.Nullable`1&lt;Xunit.AppDomainSupport&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppDomainOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessages" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessagesOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalDiagnosticMessages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalDiagnosticMessages" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalDiagnosticMessagesOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LongRunningTestSeconds" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LongRunningTestSeconds" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LongRunningTestSecondsOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxParallelThreads" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxParallelThreads" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxParallelThreadsOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplay" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplay" signature="(System.Nullable`1&lt;Xunit.TestMethodDisplay&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplayOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplayOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplayOptions" signature="(System.Nullable`1&lt;Xunit.TestMethodDisplayOptions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodDisplayOptionsOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParallelizeAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParallelizeAssembly" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParallelizeAssemblyOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParallelizeTestCollections" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParallelizeTestCollections" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParallelizeTestCollectionsOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreEnumerateTheories" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreEnumerateTheories" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreEnumerateTheoriesOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopy" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopy" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopyOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnFail" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnFail" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnFailOrDefault" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyDiscoveryFinished" filename="/_/src/xunit.runner.utility/Messages/TestAssemblyDiscoveryFinished.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assembly" signature="(Xunit.XunitProjectAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoveryOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoveryOptions" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InterfaceTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCasesDiscovered" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCasesDiscovered" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCasesToRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCasesToRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.XunitProjectAssembly,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyDiscoveryStarting" filename="/_/src/xunit.runner.utility/Messages/TestAssemblyDiscoveryStarting.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="AppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppDomain" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assembly" signature="(Xunit.XunitProjectAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoveryOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoveryOptions" signature="(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InterfaceTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopy" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopy" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.XunitProjectAssembly,System.Boolean,System.Boolean,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyExecutionFinished" filename="/_/src/xunit.runner.utility/Messages/TestAssemblyExecutionFinished.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assembly" signature="(Xunit.XunitProjectAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionOptions" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionSummary" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionSummary" signature="(Xunit.ExecutionSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InterfaceTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.XunitProjectAssembly,Xunit.Abstractions.ITestFrameworkExecutionOptions,Xunit.ExecutionSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyExecutionStarting" filename="/_/src/xunit.runner.utility/Messages/TestAssemblyExecutionStarting.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assembly" signature="(Xunit.XunitProjectAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionOptions" signature="(Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InterfaceTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.XunitProjectAssembly,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyFinished" filename="/_/src/messages/TestAssemblyFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyMessage" filename="/_/src/messages/BaseMessages/TestAssemblyMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="(Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestAssemblyStarting" filename="/_/src/messages/TestAssemblyStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="StartTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartTime" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestEnvironment" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestEnvironment" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestAssembly,System.DateTime,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCaseCleanupFailure" filename="/_/src/messages/TestCaseCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCaseDescriptor" filename="/_/src/xunit.runner.utility/Descriptor/TestCaseDescriptor.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClassName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialization" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialization" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceFileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceFileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceLineNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceLineNumber" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Decode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCaseDiscoveryMessage" filename="/_/src/messages/TestCaseDiscoveryMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCaseFinished" filename="/_/src/messages/TestCaseFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCaseMessage" filename="/_/src/messages/BaseMessages/TestCaseMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCaseStarting" filename="/_/src/messages/TestCaseStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassCallbackHandler" filename="/_/src/xunit.runner.utility/Frameworks/v1/TestClassCallbackHandler.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestClassResults" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClassResults" signature="(Xunit.Xunit1RunSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IList`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindTestCase" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnClass" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnStart" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTest" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnXmlNode" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestMethodTestCases" signature="(Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendTestCaseMessagesWhenAppropriate" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassCleanupFailure" filename="/_/src/messages/TestClassCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassConstructionFinished" filename="/_/src/messages/TestClassConstructionFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassConstructionStarting" filename="/_/src/messages/TestClassConstructionStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassDisposeFinished" filename="/_/src/messages/TestClassDisposeFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassDisposeStarting" filename="/_/src/messages/TestClassDisposeStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassFinished" filename="/_/src/messages/TestClassFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassMessage" filename="/_/src/messages/BaseMessages/TestClassMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestClass" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestClass" signature="(Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestClassStarting" filename="/_/src/messages/TestClassStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCleanupFailure" filename="/_/src/messages/TestCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCollectionCleanupFailure" filename="/_/src/messages/TestCollectionCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCollectionFinished" filename="/_/src/messages/TestCollectionFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCollectionMessage" filename="/_/src/messages/BaseMessages/TestCollectionMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCollection" signature="(Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestCollectionStarting" filename="/_/src/messages/TestCollectionStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestDiscoverySink" filename="/_/src/xunit.runner.utility/Sinks/TestDiscoverySink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IMessageSink.OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestDiscoveryVisitor" filename="/_/src/xunit.runner.utility/Visitors/TestDiscoveryVisitor.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCases" signature="(System.Collections.Generic.List`1&lt;Xunit.Abstractions.ITestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCaseDiscoveryMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestExecutionSummary" filename="/_/src/xunit.runner.utility/Messages/TestExecutionSummary.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ElapsedClockTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ElapsedClockTime" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InterfaceTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Summaries" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Summaries" signature="(System.Collections.Generic.List`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Xunit.ExecutionSummary&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Xunit.ExecutionSummary&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestFailed" filename="/_/src/messages/TestFailed.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestFinished" filename="/_/src/messages/TestFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestFrameworkOptions" filename="/_/src/xunit.runner.utility/Frameworks/TestFrameworkOptions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ForDiscovery" signature="(Xunit.TestAssemblyConfiguration)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForExecution" signature="(Xunit.TestAssemblyConfiguration)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetValue" signature="(System.String,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDebuggerDisplay" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToDebuggerDisplay" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestMessage" filename="/_/src/messages/BaseMessages/TestMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Test" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Test" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestMessageSink" filename="/_/src/xunit.runner.utility/Sinks/TestMessageSink.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Diagnostics" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Discovery" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execution" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Runner" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestMessageVisitor" filename="/_/src/xunit.runner.utility/Visitors/TestMessageVisitor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DoVisit" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Func`2&lt;TMessage,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoVisit" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Func`3&lt;Xunit.TestMessageVisitor,TMessage,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestAssemblyDiscoveryFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestAssemblyDiscoveryStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestAssemblyExecutionFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestAssemblyExecutionStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.ITestExecutionSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IAfterTestFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IAfterTestStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IBeforeTestFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IBeforeTestStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IDiagnosticMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IDiscoveryCompleteMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IErrorMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestAssemblyCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestAssemblyFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestAssemblyStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCaseCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCaseDiscoveryMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCaseFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestOutput)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCaseStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassConstructionFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassConstructionStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassDisposeFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassDisposeStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCollectionCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCollectionFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCollectionStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestFailed)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestMethodCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestMethodFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestMethodStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestPassed)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestSkipped)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestMessageVisitor`1" filename="/_/src/xunit.runner.utility/Visitors/TestMessageVisitor.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="(System.Threading.ManualResetEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestMethodCleanupFailure" filename="/_/src/messages/TestMethodCleanupFailure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod,System.String[],System.String[],System.String[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestMethodFinished" filename="/_/src/messages/TestMethodFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsFailed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsRun" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestsSkipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod,System.Decimal,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestMethodMessage" filename="/_/src/messages/BaseMessages/TestMethodMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="(Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestMethodStarting" filename="/_/src/messages/TestMethodStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.ITestMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestOutput" filename="/_/src/messages/TestOutput.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestPassed" filename="/_/src/messages/TestPassed.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestResultMessage" filename="/_/src/messages/BaseMessages/TestResultMessage.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestSkipped" filename="/_/src/messages/TestSkipped.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Reason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.TestStarting" filename="/_/src/messages/TestStarting.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Xunit.Abstractions.ITest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.VisualStudioSourceInformationProvider" filename="/_/src/xunit.runner.utility/Frameworks/VisualStudioSourceInformationProvider.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSourceInformation" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.XmlAggregateVisitor" filename="/_/src/xunit.runner.utility/Visitors/XmlAggregateVisitor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExecutionSummary" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionSummary" signature="(Xunit.ExecutionSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.IMessageSink,System.Collections.Concurrent.ConcurrentDictionary`2&lt;System.String,Xunit.ExecutionSummary&gt;,System.Xml.Linq.XElement,System.Func`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestAssemblyFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.XmlNodeCallbackHandler" filename="/_/src/xunit.runner.utility/Frameworks/v1/XmlNodeCallbackHandler.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="LastNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LastNode" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LastNodeArrived" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LastNodeArrived" signature="(System.Threading.ManualResetEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Predicate`1&lt;System.Xml.XmlNode&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnXmlNode" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Web.UI.ICallbackEventHandler.GetCallbackResult" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.XmlTestExecutionVisitor" filename="/_/src/xunit.runner.utility/Visitors/XmlTestExecutionVisitor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CancelThunk" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Errors" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Errors" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Failed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Failed" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skipped" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skipped" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Time" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Time" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Total" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Total" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XElement,System.Func`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestResultElement" signature="(Xunit.Abstractions.ITestResultMessage,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCollectionElement" signature="(Xunit.Abstractions.ITestCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessage" signature="(Xunit.Abstractions.IMessageSinkMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestAssemblyFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestAssemblyStarting)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCollectionFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestFailed)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestPassed)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestSkipped)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.IErrorMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestAssemblyCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCaseCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestClassCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCollectionCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(Xunit.Abstractions.ITestMethodCleanupFailure)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddError" signature="(System.String,System.String,Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFailureElement" signature="(Xunit.Abstractions.IFailureInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Escape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="XmlEscape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit1" filename="/_/src/xunit.runner.utility/Frameworks/v1/Xunit1.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="CanUseAppDomains" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFramework" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.AppDomainSupport,Xunit.Abstractions.ISourceInformationProvider,System.String,System.String,System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateExecutor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Deserialize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="EnsureInitialized" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Find" signature="(System.Boolean,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.ITestFrameworkDiscoverer.Find" signature="(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(System.String,System.Boolean,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.ITestFrameworkDiscoverer.Find" signature="(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(System.Predicate`1&lt;Xunit.Abstractions.ITestCaseDiscoveryMessage&gt;,System.Boolean,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.ITestFrameworkExecutor.RunAll" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.ITestFrameworkExecutor.RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestCollection" signature="(Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestClass" signature="(Xunit.Abstractions.ITestClass,System.Collections.Generic.IList`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Xunit.Abstractions.ITestClass,Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(Xunit.Abstractions.ITestClass)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit1AssemblyInfo" filename="/_/src/xunit.runner.utility/Frameworks/v1/Xunit1AssemblyInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssemblyFileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyFileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IAssemblyInfo.get_AssemblyPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IAssemblyInfo.get_Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IAssemblyInfo.GetCustomAttributes" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IAssemblyInfo.GetType" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IAssemblyInfo.GetTypes" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit1ExceptionUtility" filename="/_/src/xunit.runner.utility/Frameworks/v1/Xunit1ExceptionUtility.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ConvertToFailureInformation" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToFailureInformation" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToFailureInformation" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionTypes" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTraces" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionParentIndices" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit1Executor" filename="/_/src/xunit.runner.utility/Frameworks/v1/Xunit1Executor.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="TestFrameworkDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean,System.String,System.String,System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateObject" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="EnumerateTests" signature="(System.Web.UI.ICallbackEventHandler)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXunitAssemblyPath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTests" signature="(System.String,System.Collections.Generic.List`1&lt;System.String&gt;,System.Web.UI.ICallbackEventHandler)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit1ReflectionWrapper" filename="/_/src/xunit.runner.utility/Frameworks/v1/Xunit1ReflectionWrapper.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name="AssemblyFileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyFileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IAssemblyInfo.get_AssemblyPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IAssemblyInfo.get_Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IMethodInfo.get_IsAbstract" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IMethodInfo.get_IsGenericMethodDefinition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IMethodInfo.get_IsPublic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IMethodInfo.get_IsStatic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IMethodInfo.get_Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IMethodInfo.get_ReturnType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.IMethodInfo.get_Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_BaseType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_Interfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_IsAbstract" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_IsGenericParameter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_IsGenericType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_IsSealed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_IsValueType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITypeInfo.get_Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IAssemblyInfo.GetCustomAttributes" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IAssemblyInfo.GetType" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IMethodInfo.GetCustomAttributes" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IMethodInfo.GetGenericArguments" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IMethodInfo.GetParameters" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Xunit.Abstractions.IMethodInfo.MakeGenericMethod" signature="(Xunit.Abstractions.ITypeInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.ITypeInfo.GetCustomAttributes" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.Abstractions.ITypeInfo.GetGenericArguments" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Xunit.Abstractions.ITypeInfo.GetMethod" signature="(System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Xunit-Abstractions-IAssemblyInfo-GetTypes" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Xunit-Abstractions-ITypeInfo-GetMethods" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit1RunSummary" filename="/_/src/xunit.runner.utility/Frameworks/v1/Xunit1RunSummary.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Aggregate" signature="(Xunit.Xunit1RunSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit1Test" filename="/_/src/xunit.runner.utility/Frameworks/v1/Xunit1Test.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.Abstractions.ITestCase,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit1TestCase" filename="/_/src/xunit.runner.utility/Frameworks/v1/Xunit1TestCase.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipReason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceInformation" signature="(Xunit.Abstractions.ISourceInformation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestMethodArguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Traits" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Traits" signature="(System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestAssembly.get_Assembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigFileName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigFileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestCollection.get_CollectionDefinition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestCollection.get_DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestCollection.get_TestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestCollection.get_UniqueID" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestClass.get_Class" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestClass.get_TestCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestMethod.get_Method" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="t.Abstractions.ITestMethod.get_TestClass" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.Collections.Generic.List`1&lt;System.String&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Deserialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.IXunitSerializationInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit2" filename="/_/src/xunit.runner.utility/Frameworks/v2/Xunit2.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Xunit.AppDomainSupport,Xunit.Abstractions.ISourceInformationProvider,System.String,System.String,System.Boolean,System.String,Xunit.Abstractions.IMessageSink,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BulkDeserialize" signature="(System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RunAll" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Collections.Generic.List`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,Xunit.Abstractions.ITestCase&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Xunit2Discoverer" filename="/_/src/xunit.runner.utility/Frameworks/v2/Xunit2Discoverer.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="AppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanUseAppDomains" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiagnosticMessageSink" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Framework" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoteDiscoverer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFramework" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkAssemblyName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.AppDomainSupport,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IAssemblyInfo,System.String,System.String,Xunit.Abstractions.IMessageSink,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.AppDomainSupport,Xunit.Abstractions.ISourceInformationProvider,System.String,System.String,System.Boolean,System.String,Xunit.Abstractions.IMessageSink,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.AppDomainSupport,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IAssemblyInfo,System.String,System.String,System.String,System.Boolean,System.String,Xunit.Abstractions.IMessageSink,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateOptimizedRemoteMessageSink" signature="(Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Find" signature="(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCaseDescriptors" signature="(System.Collections.Generic.List`1&lt;Xunit.Abstractions.ITestCase&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExecutionAssemblyFileName" signature="(Xunit.AppDomainSupport,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSupportedPlatformSuffixes" signature="(Xunit.AppDomainSupport)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestFrameworkAssemblyName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXunitExecutionAssemblyPath" signature="(Xunit.AppDomainSupport,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXunitExecutionAssemblyPath" signature="(Xunit.AppDomainSupport,Xunit.Abstractions.IAssemblyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDotNet" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Callback" signature="(System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.XunitFilters" filename="/_/src/xunit.runner.utility/Project/XunitFilters.cs" line-rate="1" branch-rate="1" complexity="22">
          <methods>
            <method name="ExcludedTraits" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedTraits" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludedClasses" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedClasses" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludedMethods" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedMethods" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludedNamespaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedNamespaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Filter" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterExcludedNamespaces" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterIncludedNamespaces" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterExcludedMethodsAndClasses" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterIncludedMethodsAndClasses" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterExcludedTraits" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterIncludedTraits" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitMethodFilters" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SplitIncludeMethodFilters" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="SplitExcludeMethodFilters" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="WildcardToRegex" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LastMutation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LastMutation" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Contains" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CopyTo" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Remove" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.XunitFrontController" filename="/_/src/xunit.runner.utility/Frameworks/XunitFrontController.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name="BulkDeserializer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanUseAppDomains" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DescriptorProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InnerController" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFramework" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkDisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.AppDomainSupport,System.String,System.String,System.Boolean,System.String,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BulkDeserialize" signature="(System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateInnerController" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Deserialize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="EnsureInitialized" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="Find" signature="(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCaseDescriptors" signature="(System.Collections.Generic.List`1&lt;Xunit.Abstractions.ITestCase&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAll" signature="(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serialize" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.XunitProject" filename="/_/src/xunit.runner.utility/Project/XunitProject.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Assemblies" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filters" signature="(Xunit.XunitFilters)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="(System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="(Xunit.XunitProjectAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.XunitProjectAssembly" filename="/_/src/xunit.runner.utility/Project/XunitProjectAssembly.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssemblyFilename" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyFilename" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigFilename" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigFilename" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Configuration" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopy" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopy" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="xunit.runner.visualstudio.testadapter" line-rate="0.246873300706906" branch-rate="0.144890038809832" complexity="731">
      <classes>
        <class name="AssemblyExtensions" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetLocalCodeBase" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="DictionaryExtensions" filename="/_/src/xunit.runner.visualstudio/Utility/DictionaryExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Add" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,System.Collections.Generic.List`1&lt;TValue&gt;&gt;,TKey,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,System.Collections.Generic.List`1&lt;TValue&gt;&gt;,TKey,TValue,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOrAdd" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOrAdd" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;,TKey,System.Func`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDictionaryIgnoringDuplicateKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Func`2&lt;TValue,TKey&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDictionaryIgnoringDuplicateKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TInput&gt;,System.Func`2&lt;TInput,TKey&gt;,System.Func`2&lt;TInput,TValue&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="ExceptionExtensions" filename="/_/src/xunit.runner.visualstudio/Utility/ExceptionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Unwrap" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Guard" filename="/_/src/xunit.runner.visualstudio/Utility/Guard.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ArgumentNotNull" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgumentNotNullOrEmpty" signature="(System.String,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgumentValid" signature="(System.String,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FileExists" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.DotNet.PlatformAbstractions.ApplicationEnvironment" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.DotNet.PlatformAbstractions/ApplicationEnvironment.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="ApplicationBasePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetApplicationBasePath" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.DotNet.PlatformAbstractions.HashCodeCombiner" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.DotNet.PlatformAbstractions/HashCodeCombiner.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="CombinedHash" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(TValue,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Start" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.DotNet.PlatformAbstractions.Native.NativeMethods" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.DotNet.PlatformAbstractions/Native/NativeMethods.Darwin.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="GetKernelRelease" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.DotNet.PlatformAbstractions.Native.NativeMethods" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.DotNet.PlatformAbstractions/Native/NativeMethods.Unix.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="GetUname" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.DotNet.PlatformAbstractions.Native.NativeMethods" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.DotNet.PlatformAbstractions/Native/NativeMethods.Windows.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="RtlGetVersion" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.DotNet.PlatformAbstractions.Native.PlatformApis" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.DotNet.PlatformAbstractions/Native/PlatformApis.cs" line-rate="1" branch-rate="1" complexity="34">
          <methods>
            <method name="GetOSName" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="GetOSVersion" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="GetDarwinVersion" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetOSPlatform" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetDistroId" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetDistroVersionId" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="LoadDistroInfo" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="NormalizeDistroInfo" signature="(Internal.Microsoft.DotNet.PlatformAbstractions.Native.PlatformApis/DistroInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DetermineOSPlatform" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.DotNet.PlatformAbstractions.RuntimeEnvironment" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.DotNet.PlatformAbstractions/RuntimeEnvironment.cs" line-rate="1" branch-rate="1" complexity="24">
          <methods>
            <method name="OperatingSystemPlatform" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OperatingSystemVersion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OperatingSystem" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeArchitecture" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArch" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetRuntimeIdentifier" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetRIDArch" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetRIDVersion" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="GetWindowsProductVersion" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="GetRIDOS" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.CompilationLibrary" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/CompilationLibrary.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Assemblies" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultResolver" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.Dependency&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.Dependency&gt;,System.Boolean,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveReferencePaths" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ResolveReferencePaths" signature="(Internal.Microsoft.Extensions.DependencyModel.Resolution.ICompilationAssemblyResolver[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveReferencePaths" signature="(Internal.Microsoft.Extensions.DependencyModel.Resolution.ICompilationAssemblyResolver,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.CompilationOptions" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/CompilationOptions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Defines" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LanguageVersion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Platform" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowUnsafe" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WarningsAsErrors" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Optimize" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="KeyFile" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelaySign" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PublicSign" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitEntryPoint" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateXmlDocumentation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Default" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.String,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Boolean&gt;,System.String,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Boolean&gt;,System.String,System.Nullable`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.Dependency" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/Dependency.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Version" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Internal.Microsoft.Extensions.DependencyModel.Dependency)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.DependencyContextPaths" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/DependencyContextPaths.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Application" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SharedRuntime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NonApplicationPaths" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCurrent" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Create" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.DirectoryWrapper" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/DirectoryWrapper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Exists" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.EnvironmentWrapper" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/EnvironmentWrapper.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="GetEnvironmentVariable" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.FileSystemWrapper" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/FileSystemWrapper.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Default" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="File" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Directory" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.FileWrapper" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/FileWrapper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Exists" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadAllText" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OpenRead" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OpenFile" signature="(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateEmptyFile" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.Library" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/Library.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Version" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hash" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dependencies" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Serviceable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HashPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeStoreManifestName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.Dependency&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.Dependency&gt;,System.Boolean,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.Dependency&gt;,System.Boolean,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.Resolution.AppBaseCompilationAssemblyResolver" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/Resolution/AppBaseCompilationAssemblyResolver.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,System.String,Internal.Microsoft.Extensions.DependencyModel.DependencyContextPaths)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryResolveAssemblyPaths" signature="(Internal.Microsoft.Extensions.DependencyModel.CompilationLibrary,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.Resolution.CompositeCompilationAssemblyResolver" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/Resolution/CompositeCompilationAssemblyResolver.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Internal.Microsoft.Extensions.DependencyModel.Resolution.ICompilationAssemblyResolver[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryResolveAssemblyPaths" signature="(Internal.Microsoft.Extensions.DependencyModel.CompilationLibrary,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.Resolution.DotNetReferenceAssembliesPathResolver" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/Resolution/DotNetReferenceAssembliesPathResolver.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Resolve" signature="(Internal.Microsoft.Extensions.DependencyModel.IEnvironment,Internal.Microsoft.Extensions.DependencyModel.IFileSystem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Resolve" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetDefaultDotNetReferenceAssembliesPath" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.Resolution.PackageCompilationAssemblyResolver" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/Resolution/PackageCompilationAssemblyResolver.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Internal.Microsoft.Extensions.DependencyModel.IEnvironment,Internal.Microsoft.Extensions.DependencyModel.IFileSystem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultProbeDirectories" signature="(Internal.Microsoft.Extensions.DependencyModel.IEnvironment)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultProbeDirectories" signature="(Internal.Microsoft.DotNet.PlatformAbstractions.Platform,Internal.Microsoft.Extensions.DependencyModel.IEnvironment)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryResolveAssemblyPaths" signature="(Internal.Microsoft.Extensions.DependencyModel.CompilationLibrary,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryResolveFromPackagePath" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,Internal.Microsoft.Extensions.DependencyModel.CompilationLibrary,System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.Resolution.ReferenceAssemblyPathResolver" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/Resolution/ReferenceAssemblyPathResolver.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,Internal.Microsoft.Extensions.DependencyModel.IEnvironment)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryResolveAssemblyPaths" signature="(Internal.Microsoft.Extensions.DependencyModel.CompilationLibrary,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryResolveReferenceAssembly" signature="(System.String,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFallbackSearchPaths" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,Internal.Microsoft.DotNet.PlatformAbstractions.Platform,Internal.Microsoft.Extensions.DependencyModel.IEnvironment)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultReferenceAssembliesPath" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,Internal.Microsoft.DotNet.PlatformAbstractions.Platform,Internal.Microsoft.Extensions.DependencyModel.IEnvironment)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.Resolution.ResolverUtils" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/Resolution/ResolverUtils.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TryResolvePackagePath" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,Internal.Microsoft.Extensions.DependencyModel.CompilationLibrary,System.String,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryResolveAssemblyFile" signature="(Internal.Microsoft.Extensions.DependencyModel.IFileSystem,System.String,System.String,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.ResourceAssembly" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/ResourceAssembly.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Locale" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Locale" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.RuntimeAssembly" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/RuntimeAssembly.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/RuntimeAssetGroup.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Runtime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssetPaths" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.RuntimeFallbacks" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/RuntimeFallbacks.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Runtime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Runtime" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fallbacks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fallbacks" signature="(System.Collections.Generic.IReadOnlyList`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.RuntimeLibrary" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/RuntimeLibrary.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="RuntimeAssemblyGroups" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NativeLibraryGroups" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResourceAssemblies" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.Collections.Generic.IReadOnlyList`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.ResourceAssembly&gt;,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.Dependency&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.Collections.Generic.IReadOnlyList`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.ResourceAssembly&gt;,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.Dependency&gt;,System.Boolean,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.Collections.Generic.IReadOnlyList`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.ResourceAssembly&gt;,System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.Dependency&gt;,System.Boolean,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Internal.Microsoft.Extensions.DependencyModel.TargetInfo" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/TargetInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Framework" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Runtime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeSignature" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsPortable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="LoggerHelper" filename="/_/src/xunit.runner.visualstudio/Utility/LoggerHelper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="InnerLogger" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InnerLogger" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Stopwatch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Stopwatch" signature="(System.Diagnostics.Stopwatch)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,System.Diagnostics.Stopwatch)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log" signature="(Xunit.Abstractions.ITestCase,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWithSource" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(Xunit.Abstractions.ITestCase,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogErrorWithSource" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWarning" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWarning" signature="(Xunit.Abstractions.ITestCase,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWarningWithSource" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendMessage" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Collections.Generic.CollectionExtensions" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/Microsoft.Extensions.DependencyModel/CollectionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetDefaultGroup" signature="(System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetRuntimeGroup" signature="(System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetGroup" signature="(System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultAssets" signature="(System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetRuntimeAssets" signature="(System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAssets" signature="(System.Collections.Generic.IEnumerable`1&lt;Internal.Microsoft.Extensions.DependencyModel.RuntimeAssetGroup&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Collections.Generic.EnumerableExtensions" filename="/_/src/xunit.runner.visualstudio/Utility/EnumerableExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ForEach" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit._DiagnosticMessage" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/_DiagnosticMessage.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.AssemblyHelper" filename="/_/src/xunit.runner.visualstudio/Utility/AssemblyResolution/AssemblyHelper_Desktop.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="LoadAssembly" signature="(System.Reflection.AssemblyName)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Resolve" signature="(System.Object,System.ResolveEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveAndLoadAssembly" signature="(System.String,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubscribeResolveForAssembly" signature="(System.String,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubscribeResolveForAssembly" signature="(System.Type,Xunit.Abstractions.IMessageSink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.ConsoleHelper" filename="/_/src/xunit.runner.visualstudio/Utility/ConsoleHelper.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SetForegroundColorANSI" signature="(System.ConsoleColor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetForegroundColorConsole" signature="(System.ConsoleColor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResetColorANSI" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ResetColorConsole" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonArray" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Length" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonValue[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonBoolean" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(Xunit.JsonBoolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonBuffer" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="35">
          <methods>
            <method name=".ctor" signature="(System.IO.TextReader)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Read" signature="()" line-rate="1" branch-rate="1" complexity="15">
              <lines />
            </method>
            <method name="ReadNextChar" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ReadNumber" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadString" signature="()" line-rate="1" branch-rate="1" complexity="17">
              <lines />
            </method>
            <method name="IsWhitespace" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializer" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Deserialize" signature="(System.IO.TextReader)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeInternal" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeArray" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeserializeObject" signature="(Xunit.JsonToken,Xunit.JsonBuffer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializerException" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Line" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Column" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonDeserializerResource" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="JSON_OpenString" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="JSON_InvalidEnd" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_IllegalCharacter" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_IllegalTrailingCharacterAfterLiteral" signature="(System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_UnrecognizedLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_DuplicateObjectMemberName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidFloatNumberFormat" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_FloatNumberOverflow" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntax" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxNotExpected" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxNotExpected" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidSyntaxExpectation" signature="(System.String,System.Char,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidTokenExpectation" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_InvalidUnicode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format_UnfinishedJSON" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonNull" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonNumber" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Double" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raw" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.JsonToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonObject" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Keys" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,Xunit.JsonValue&gt;,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsJsonObject" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsInt" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsBoolean" signature="(System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsNullableBoolean" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueAsStringArray" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonString" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Implicit" signature="(Xunit.JsonString)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.JsonValue" filename="/_/src/xunit.runner.visualstudio/Utility/Json.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Line" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Column" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.DiagnosticMessageSink" filename="/_/src/xunit.runner.visualstudio/Sinks/DiagnosticMessageSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ForDiagnostics" signature="(LoggerHelper,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForInternalDiagnostics" signature="(LoggerHelper,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.RunSettings" filename="/_/src/xunit.runner.visualstudio/Utility/RunSettings.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="CollectSourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectSourceInformation" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DesignMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DesignMode" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableAppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableAppDomain" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelization" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelization" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalDiagnostics" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalDiagnostics" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoAutoReporters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoAutoReporters" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReporterSwitch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReporterSwitch" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFrameworkVersion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFrameworkVersion" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Parse" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatchingTargetFramework" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.TestCaseFilter" filename="/_/src/xunit.runner.visualstudio/Utility/TestCaseFilter.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,LoggerHelper,System.String,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,LoggerHelper)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchTestCase" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyProvider" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCaseFilterExpression" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,LoggerHelper,System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseFilterExpression&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestCaseFilterExpressionFromDiscoveryContext" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,LoggerHelper,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseFilterExpression&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSupportedPropertyNames" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetTraits" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.TestPlatformContext" filename="/_/src/xunit.runner.visualstudio/TestPlatformContext.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="RequireSourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RequireSourceInformation" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RequireXunitTestProperty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RequireXunitTestProperty" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.VisualStudioRunnerLogger" filename="/_/src/xunit.runner.visualstudio/Utility/VisualStudioRunnerLogger.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="LockObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(LoggerHelper)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogError" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogImportantMessage" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogMessage" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogWarning" signature="(Xunit.StackFrameInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.VsDiscoverySink" filename="/_/src/xunit.runner.visualstudio/Sinks/VsDiscoverySink.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TotalTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TotalTests" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,Xunit.Abstractions.ITestFrameworkDiscoverer,LoggerHelper,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Runner.VisualStudio.TestPlatformContext,Xunit.Runner.VisualStudio.TestCaseFilter,System.Func`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateVsTestCase" signature="(System.String,Xunit.TestCaseDescriptor,LoggerHelper,Xunit.Runner.VisualStudio.TestPlatformContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Escape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Truncate" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetAddTraitThunk" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="HandleCancellation" signature="(Xunit.MessageHandlerArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseDiscoveryMessage" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseDiscoveryMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleDiscoveryCompleteMessage" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.IDiscoveryCompleteMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Xunit.IMessageSinkWithTypes.OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendExistingTestCases" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="GuidFromString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.VsExecutionDiscoverySink" filename="/_/src/xunit.runner.visualstudio/Sinks/VsExecutionDiscoverySink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Func`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.VsExecutionSink" filename="/_/src/xunit.runner.visualstudio/Sinks/VsExecutionSink.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ExecutionSummary" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionSummary" signature="(Xunit.ExecutionSummary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finished" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Xunit.IMessageSinkWithTypes,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutionRecorder,LoggerHelper,System.Collections.Generic.Dictionary`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,Xunit.Abstractions.ITestFrameworkExecutionOptions,System.Func`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FindTestCase" signature="(Xunit.Abstractions.ITestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryAndReport" signature="(System.String,Xunit.Abstractions.ITestCase,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleCancellation" signature="(Xunit.MessageHandlerArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleErrorMessage" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.IErrorMessage&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestFailed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestFailed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestPassed" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestPassed&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestSkipped" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestSkipped&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseStarting" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseStarting&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseFinished" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseFinished&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestAssemblyCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestAssemblyCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCaseCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCaseCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestClassCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestClassCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCollectionCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCollectionCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleTestMethodCleanupFailure" signature="(Xunit.MessageHandlerArgs`1&lt;Xunit.Abstractions.ITestMethodCleanupFailure&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteError" signature="(System.String,Xunit.Abstractions.IFailureInformation,System.Collections.Generic.IEnumerable`1&lt;Xunit.Abstractions.ITestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeVsTestResult" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome,Xunit.Abstractions.ITestResultMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeVsTestResult" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome,Xunit.Abstractions.ITestSkipped)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeVsTestResult" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome,Xunit.Abstractions.ITestCase,System.String,System.Double,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAggregatedTestOutcome" signature="(Xunit.Abstractions.ITestCaseFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnMessageWithTypes" signature="(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Xunit.Runner.VisualStudio.VsTestRunner" filename="/_/src/xunit.runner.visualstudio/VsTestRunner.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Cancel" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestDiscoverer.DiscoverTests" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintHeader" signature="(LoggerHelper)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsAppX" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoverTests" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,LoggerHelper,Xunit.Runner.VisualStudio.TestPlatformContext,Xunit.Runner.VisualStudio.RunSettings,System.Func`4&lt;System.String,Xunit.Abstractions.ITestFrameworkDiscoverer,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,TVisitor&gt;,System.Action`4&lt;System.String,Xunit.Abstractions.ITestFrameworkDiscoverer,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,TVisitor&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoverTestsInSource" signature="(Xunit.XunitFrontController,LoggerHelper,Xunit.Runner.VisualStudio.TestPlatformContext,Xunit.Runner.VisualStudio.RunSettings,System.Func`4&lt;System.String,Xunit.Abstractions.ITestFrameworkDiscoverer,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,TVisitor&gt;,System.Action`4&lt;System.String,Xunit.Abstractions.ITestFrameworkDiscoverer,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,TVisitor&gt;,System.String,System.Boolean,Xunit.TestAssemblyConfiguration)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetConfigurationStreamForAssembly" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestProperty" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsXunitTestAssembly" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAssemblyFileName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LoadConfiguration" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTests" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle,LoggerHelper,Xunit.Runner.VisualStudio.TestPlatformContext,Xunit.Runner.VisualStudio.RunSettings,System.Func`1&lt;System.Collections.Generic.List`1&lt;Xunit.Runner.VisualStudio.AssemblyRunInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestsInAssembly" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle,LoggerHelper,Xunit.Runner.VisualStudio.TestPlatformContext,Xunit.Runner.VisualStudio.RunSettings,Xunit.IMessageSinkWithTypes,Xunit.Runner.VisualStudio.AssemblyRunInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTestsInAssemblyAsync" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle,LoggerHelper,Xunit.Runner.VisualStudio.TestPlatformContext,Xunit.Runner.VisualStudio.RunSettings,Xunit.IMessageSinkWithTypes,Xunit.Runner.VisualStudio.AssemblyRunInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetRunnerReporter" signature="(LoggerHelper,Xunit.Runner.VisualStudio.RunSettings,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAvailableRunnerReporters" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetVsTestCases" signature="(System.String,Xunit.Abstractions.ITestFrameworkDiscoverer,Xunit.Runner.VisualStudio.VsExecutionDiscoverySink,LoggerHelper,Xunit.Runner.VisualStudio.TestPlatformContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitNames" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VSTestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UniqueID" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,Xunit.TestCaseDescriptor,Xunit.Abstractions.ITestCase,LoggerHelper,Xunit.Runner.VisualStudio.TestPlatformContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
  </packages>
</coverage>