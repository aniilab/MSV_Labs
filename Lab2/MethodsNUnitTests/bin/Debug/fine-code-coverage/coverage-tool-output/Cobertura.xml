<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE coverage SYSTEM "http://cobertura.sourceforge.net/xml/coverage-04.dtd">
<coverage line-rate="0.147012529119184" branch-rate="0.098959221975772" lines-covered="2335" lines-valid="15883" branches-covered="580" branches-valid="5861" complexity="5928" version="0" timestamp="1682596070">
  <sources />
  <packages>
    <package name="FluentAssertions" line-rate="0.0812373066708327" branch-rate="0.0571428571428571" complexity="4780">
      <classes>
        <class name="FluentAssertions.AggregateExceptionExtractor" filename="/_/Src/FluentAssertions/AggregateExceptionExtractor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OfType" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExtractedExceptions" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AndConstraint`1" filename="/_/Src/FluentAssertions/AndConstraint.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="And" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AndWhichConstraint`2" filename="/_/Src/FluentAssertions/AndWhichConstraint.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Which" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TParentConstraint,TMatchedElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TParentConstraint,System.Collections.Generic.IEnumerable`1&lt;TMatchedElement&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SingleOrDefault" signature="(System.Collections.Generic.IEnumerable`1&lt;TMatchedElement&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AssertionExtensions" filename="/_/Src/FluentAssertions/AssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Invoking" signature="(T,System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoking" signature="(T,System.Func`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(T,System.Func`2&lt;T,System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(T,System.Func`2&lt;T,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(T,System.Func`2&lt;T,System.Threading.Tasks.ValueTask&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(T,System.Func`2&lt;T,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTimeOf" signature="(T,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Action,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecutionTime" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Specialized.ExecutionTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Xml.Linq.XDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Xml.Linq.XAttribute)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.IO.Stream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.IO.BufferedStream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(System.Func`1&lt;System.Collections.IEnumerable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(System.Func`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(T,System.Func`2&lt;T,System.Collections.Generic.IEnumerable`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForceEnumeration" signature="(System.Func`1&lt;System.Collections.IEnumerable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForceEnumeration" signature="(T,System.Func`2&lt;T,System.Collections.IEnumerable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Net.Http.HttpResponseMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Guid)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Collections.Generic.IDictionary`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Data.DataTableCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Data.DataColumnCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.IComparable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.UInt32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Decimal&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Byte&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.SByte&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Int16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.UInt16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Int64&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.UInt64&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Single&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.Double&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.TypeSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Reflection.ConstructorInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.MethodInfoSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.PropertyInfoSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Threading.Tasks.TaskCompletionSource`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Monitor" signature="(T,System.Func`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="As" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.ReferenceTypeAssertions`2&lt;TSubject,TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.BooleanAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.DateTimeAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.DateTimeOffsetAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Specialized.ExecutionTimeAssertions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.GuidAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.MethodInfoSelectorAssertions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Numeric.NumericAssertions`2&lt;TSubject,TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.PropertyInfoSelectorAssertions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.SimpleTimeSpanAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Specialized.TaskCompletionSourceAssertionsBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Types.TypeSelectorAssertions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.EnumAssertions`2&lt;TEnum,TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.DateTimeRangeAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(FluentAssertions.Primitives.DateTimeOffsetRangeAssertions`1&lt;TAssertions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvalidShouldCall" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AssertionOptions" filename="/_/Src/FluentAssertions/AssertionOptions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="EquivalencyPlan" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormattingOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CloneDefaults" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CloneDefaults" signature="(System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions,TOptions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertEquivalencyUsing" signature="(System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions,FluentAssertions.Equivalency.EquivalencyAssertionOptions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AsyncAssertionsExtensions" filename="/_/Src/FluentAssertions/AsyncAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="WithResult" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithResult" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AtLeast" filename="/_/Src/FluentAssertions/AtLeast.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.AtMost" filename="/_/Src/FluentAssertions/AtMost.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.AddNonEmptySymbolParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/AddNonEmptySymbolParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.AwaitParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/AwaitParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndsWithOurKeyword" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLongEnoughToContainOurKeyword" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.CallerStatementBuilder" filename="/_/Src/FluentAssertions/CallerIdentification/CallerStatementBuilder.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Append" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.MultiLineCommentParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/MultiLineCommentParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.QuotesParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/QuotesParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsVerbatim" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.SemicolonParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/SemicolonParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.ShouldCallParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/ShouldCallParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentification.SingleLineCommentParsingStrategy" filename="/_/Src/FluentAssertions/CallerIdentification/SingleLineCommentParsingStrategy.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Parse" signature="(System.Char,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWaitingForContextEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotifyEndOfLineReached" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.CallerIdentifier" filename="/_/Src/FluentAssertions/CallerIdentifier.cs" line-rate="1" branch-rate="1" complexity="22">
          <methods>
            <method name="Logger" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Logger" signature="(System.Action`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DetermineCallerIdentity" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="OverrideStackSearchUsingCurrentScope" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnlyOneFluentAssertionScopeOnCallStack" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="IsCustomAssertion" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDynamic" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCurrentAssembly" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDotNet" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCompilerServices" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractVariableNameFrom" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSourceCodeStatementFrom" signature="(System.Diagnostics.StackFrame)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSourceCodeStatementFrom" signature="(System.Diagnostics.StackFrame,System.IO.StreamReader,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartsWithNewKeyword" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsStringLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNumeric" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsBooleanLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SkipStackFrameCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericCollectionAssertions`1" filename="/_/Src/FluentAssertions/Collections/GenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericCollectionAssertions`2" filename="/_/Src/FluentAssertions/Collections/GenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericCollectionAssertions`3" filename="/_/Src/FluentAssertions/Collections/GenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeOfType" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInAscendingOrder" signature="(System.Func`3&lt;T,T,System.Int32&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInDescendingOrder" signature="(System.Func`3&lt;T,T,System.Int32&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNullOrEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSubsetOf" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainEquivalentOf" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainEquivalentOf" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainInOrder" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainInOrder" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainInConsecutiveOrder" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainInConsecutiveOrder" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainItemsAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainSingle" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainSingle" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWith" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`3&lt;T,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWith" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`3&lt;T,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCount" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCount" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Int32,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountGreaterThanOrEqualTo" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountGreaterOrEqualTo" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountGreaterThan" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountLessThanOrEqualTo" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountLessOrEqualTo" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveCountLessThan" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElementAt" signature="(System.Int32,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElementPreceding" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElementSucceeding" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IntersectWith" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInAscendingOrder" signature="(System.Func`3&lt;T,T,System.Int32&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInDescendingOrder" signature="(System.Func`3&lt;T,T,System.Int32&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNullOrEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSubsetOf" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainEquivalentOf" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainEquivalentOf" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainInOrder" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainInOrder" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainInConsecutiveOrder" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainInConsecutiveOrder" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainNulls" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TKey&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainNulls" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveCount" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotIntersectWith" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnlyContain" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnlyHaveUniqueItems" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TKey&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnlyHaveUniqueItems" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllSatisfy" signature="(System.Action`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SatisfyRespectively" signature="(System.Action`1&lt;T&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SatisfyRespectively" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Action`1&lt;T&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Satisfy" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Satisfy" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWith" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`3&lt;T,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWith" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOrderedBy" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOrderedEnumerable" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RepeatAsManyAs" signature="(TExpectation,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionEndsWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TActual&gt;,System.Collections.Generic.ICollection`1&lt;TExpectation&gt;,System.Func`3&lt;TActual,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionStartsWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TActual&gt;,System.Collections.Generic.ICollection`1&lt;TExpectation&gt;,System.Func`3&lt;TActual,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSubjectEquality" signature="(System.Collections.Generic.IEnumerable`1&lt;TExpectation&gt;,System.Func`3&lt;T,TExpectation,System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExpressionOrderString" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetType" signature="(TType)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasPredecessor" signature="(T,TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasSuccessor" signature="(T,TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PredecessorOf" signature="(T,TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SuccessorOf" signature="(T,TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectFailuresFromInspectors" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsValidProperty" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOrderedBy" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInOrder" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndexOf" signature="(System.Collections.Generic.IList`1&lt;T&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsecutiveItemCount" signature="(System.Collections.Generic.IList`1&lt;T&gt;,System.Collections.Generic.IList`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetComparer" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="RepeatAsManyAsIterator" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericDictionaryAssertions`3" filename="/_/Src/FluentAssertions/Collections/GenericDictionaryAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.GenericDictionaryAssertions`4" filename="/_/Src/FluentAssertions/Collections/GenericDictionaryAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEqual" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainKey" signature="(TKey,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainKeys" signature="(TKey[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TKey&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainKey" signature="(TKey,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainKeys" signature="(TKey[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainKeys" signature="(System.Collections.Generic.IEnumerable`1&lt;TKey&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainValue" signature="(TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainValues" signature="(TValue[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainValues" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainValuesAndWhich" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RepetitionPreservingIntersect" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Collections.Generic.IEnumerable`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainValue" signature="(TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainValues" signature="(TValue[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainValues" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(TKey,TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(TKey,TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetKeys" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetKeys" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValues" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsKey" signature="(TCollection,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetValue" signature="(TCollection,TKey,TValue&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(TCollection,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(T,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.Element`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/Element.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Index" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TValue,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.MaximumMatchingProblem`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/MaximumMatchingProblem.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Predicates" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Elements" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TValue,System.Boolean&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Solve" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolution`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/MaximumMatchingSolution.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="UnmatchedPredicatesExist" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnmatchedElementsExist" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Collections.MaximumMatching.MaximumMatchingProblem`1&lt;TValue&gt;,System.Collections.Generic.Dictionary`2&lt;FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;,FluentAssertions.Collections.MaximumMatching.Element`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetUnmatchedPredicates" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetUnmatchedElements" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolver`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/MaximumMatchingSolver.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Collections.MaximumMatching.MaximumMatchingProblem`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Solve" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="FindMatchForPredicate" signature="(FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;,FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolver`1/MatchCollection&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingElements" signature="(FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateFrom" signature="(System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolver`1/Match&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchedPredicate" signature="(FluentAssertions.Collections.MaximumMatching.Element`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(FluentAssertions.Collections.MaximumMatching.Element`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;,FluentAssertions.Collections.MaximumMatching.MaximumMatchingSolver`1/MatchCollection&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryDequeueUnMatchedPredicate" signature="(FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReassignElement" signature="(FluentAssertions.Collections.MaximumMatching.Element`1&lt;TValue&gt;,FluentAssertions.Collections.MaximumMatching.Predicate`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchChain" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.MaximumMatching.Predicate`1" filename="/_/Src/FluentAssertions/Collections/MaximumMatching/Predicate.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Index" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TValue,System.Boolean&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.StringCollectionAssertions" filename="/_/Src/FluentAssertions/Collections/StringCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.StringCollectionAssertions`1" filename="/_/Src/FluentAssertions/Collections/StringCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.StringCollectionAssertions`2" filename="/_/Src/FluentAssertions/Collections/StringCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;System.String&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;System.String&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBe" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllBe" signature="(System.String,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;System.String&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;System.String&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainMatch" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsMatch" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllThatMatch" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainMatch" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainsMatch" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.SubsequentOrderingAssertions`1" filename="/_/Src/FluentAssertions/Collections/SubsequentOrderingAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Linq.IOrderedEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.SubsequentOrderingGenericCollectionAssertions`2" filename="/_/Src/FluentAssertions/Collections/SubsequentOrderingGenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection,System.Linq.IOrderedEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.SubsequentOrderingGenericCollectionAssertions`3" filename="/_/Src/FluentAssertions/Collections/SubsequentOrderingGenericCollectionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TCollection,System.Linq.IOrderedEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeInAscendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeInDescendingOrder" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBeOrderedBy" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOrderedEnumerable" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TSelector&gt;&gt;,System.Collections.Generic.IComparer`1&lt;TSelector&gt;,FluentAssertions.Collections.SortOrder,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Collections.WhoseValueConstraint`4" filename="/_/Src/FluentAssertions/Collections/WhoseValueConstraint.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WhoseValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TAssertions,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.AppSettingsConfigurationStore" filename="/_/Src/FluentAssertions/Common/AppSettingsConfigurationStore.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetSetting" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Clock" filename="/_/Src/FluentAssertions/Common/Clock.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Delay" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayAsync" signature="(System.TimeSpan,System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartTimer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Configuration" filename="/_/Src/FluentAssertions/Common/Configuration.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueFormatterDetectionMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueFormatterDetectionMode" signature="(FluentAssertions.Common.ValueFormatterDetectionMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueFormatterAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueFormatterAssembly" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFrameworkName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Common.IConfigurationStore)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DetermineFormatterDetectionMode" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ConfigurationStoreExceptionInterceptor" filename="/_/Src/FluentAssertions/Common/ConfigurationStoreExceptionInterceptor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Common.IConfigurationStore)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSetting" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.CSharpAccessModifierExtensions" filename="/_/Src/FluentAssertions/Common/CSharpAccessModifierExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetCSharpAccessModifier" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCSharpAccessModifier" signature="(System.Reflection.FieldInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCSharpAccessModifier" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.DateTimeExtensions" filename="/_/Src/FluentAssertions/Common/DateTimeExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ToDateTimeOffset" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDateTimeOffset" signature="(System.DateTime,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.DictionaryHelpers" filename="/_/Src/FluentAssertions/Common/DictionaryHelpers.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetKeys" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValues" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsKey" signature="(TCollection,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetValue" signature="(TCollection,TKey,TValue&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(TCollection,TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.EnumerableExtensions" filename="/_/Src/FluentAssertions/Common/EnumerableExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ConvertOrCastToCollection" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertOrCastToList" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndexOfFirstDifferenceWith" signature="(System.Collections.Generic.IEnumerable`1&lt;TFirst&gt;,System.Collections.Generic.IEnumerable`1&lt;TSecond&gt;,System.Func`3&lt;TFirst,TSecond,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ExceptionExtensions" filename="/_/Src/FluentAssertions/Common/ExceptionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Unwrap" signature="(System.Reflection.TargetInvocationException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ExpressionExtensions" filename="/_/Src/FluentAssertions/Common/ExpressionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetPropertyInfo" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AttemptToGetMemberInfoFromExpression" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMemberPath" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TDeclaringType,TPropertyType&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateMemberPath" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TDeclaringType,TPropertyType&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetUnsupportedExpressionMessage" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.FullFrameworkReflector" filename="/_/Src/FluentAssertions/Common/FullFrameworkReflector.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetAllTypesFromAppDomain" signature="(System.Func`2&lt;System.Reflection.Assembly,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRelevant" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDynamic" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExportedTypes" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Guard" filename="/_/Src/FluentAssertions/Common/Guard.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ThrowIfArgumentIsNull" signature="(T,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNull" signature="(T,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNullOrEmpty" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNullOrEmpty" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsOutOfRange" signature="(T,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentContainsNull" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsEmpty" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsEmpty" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNegative" signature="(System.TimeSpan,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNegative" signature="(System.Single,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNegative" signature="(System.Double,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfArgumentIsNegative" signature="(System.Decimal,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.IntegerExtensions" filename="/_/Src/FluentAssertions/Common/IntegerExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsConsecutiveTo" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Iterator`1" filename="/_/Src/FluentAssertions/Common/Iterator.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="Index" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Index" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFirst" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLast" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="em.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Current" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasReachedMaxItems" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="FetchCurrent" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="PrefetchNext" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.MemberPath" filename="/_/Src/FluentAssertions/Common/MemberPath.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Segments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MemberName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IMember,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsParentOrChildOf" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSameAs" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsParentOf" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsChildOf" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsParentCollectionOf" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEquivalentTo" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasSameParentAs" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParentSegments" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetContainsSpecificCollectionIndex" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithCollectionAsRoot" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.MemberPathSegmentEqualityComparer" filename="/_/Src/FluentAssertions/Common/MemberPathSegmentEqualityComparer.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Equals" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIndexQualifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.MethodInfoExtensions" filename="/_/Src/FluentAssertions/Common/MethodInfoExtensions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IsAsync" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingAttributes" signature="(System.Reflection.MemberInfo,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNonVirtual" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RecreateMethodImplAttribute" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ObjectExtensions" filename="/_/Src/FluentAssertions/Common/ObjectExtensions.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="GetComparer" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="CompareNumerics" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanConvert" signature="(System.Object,System.Object,System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertTo" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNumericType" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.PropertyInfoExtensions" filename="/_/Src/FluentAssertions/Common/PropertyInfoExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsVirtual" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsStatic" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAbstract" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ReadOnlyNonGenericCollectionWrapper" filename="/_/Src/FluentAssertions/Common/ReadOnlyNonGenericCollectionWrapper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Create" signature="(System.Data.DataTableCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Data.DataColumnCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.ReadOnlyNonGenericCollectionWrapper`2" filename="/_/Src/FluentAssertions/Common/ReadOnlyNonGenericCollectionWrapper.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="UnderlyingCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="em.Collections.Generic.ICollection&lt;TItem&gt;.get_IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Contains" signature="(TItem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CopyTo" signature="(TItem[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;TItem&gt;.Add" signature="(TItem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;TItem&gt;.Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;TItem&gt;.Remove" signature="(TItem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.Services" filename="/_/Src/FluentAssertions/Common/Services.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="ConfigurationStore" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfigurationStore" signature="(FluentAssertions.Common.IConfigurationStore)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Configuration" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowException" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowException" signature="(System.Action`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reflector" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reflector" signature="(FluentAssertions.Common.IReflector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ResetToDefaults" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.StopwatchTimer" filename="/_/Src/FluentAssertions/Common/StopwatchTimer.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Elapsed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.StringExtensions" filename="/_/Src/FluentAssertions/Common/StringExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IndexOfFirstMismatch" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCharComparer" signature="(System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndexedSegmentAt" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutSpecificCollectionIndices" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsSpecificCollectionIndex" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EscapePlaceholders" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnescapePlaceholders" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Combine" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Capitalize" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IndentLines" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveNewLines" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CountSubstring" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.TypeExtensions" filename="/_/Src/FluentAssertions/Common/TypeExtensions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IsDecoratedWith" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWith" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWithOrInherit" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWithOrInherit" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWith" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWith" signature="(System.Reflection.MemberInfo,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDecoratedWithOrInherit" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingAttributes" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingAttributes" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingOrInheritedAttributes" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingOrInheritedAttributes" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Reflection.MemberInfo,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Reflection.MemberInfo,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Type,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Type,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEquivalentTo" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.IMember)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetClosedGenericInterfaces" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OverridesEquals" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindProperty" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindField" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNonPrivateMembers" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNonPrivateProperties" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNonPrivateFields" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTypeReflectorFor" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCSharpAbstract" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCSharpSealed" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCSharpStatic" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethod" signature="(System.Type,System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasMethod" signature="(System.Type,System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterlessMethod" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindPropertyByName" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasExplicitlyImplementedProperty" signature="(System.Type,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasParameterlessMethod" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetIndexerByParameterTypes" signature="(System.Type,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIndexer" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetConstructor" signature="(System.Type,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetConversionOperators" signature="(System.Type,System.Type,System.Type,System.Func`2&lt;System.String,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAssignableToOpenGeneric" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsImplementationOfOpenGeneric" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDerivedFromOpenGeneric" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsUnderNamespace" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSameOrInherits" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExplicitConversionOperator" signature="(System.Type,System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetImplicitConversionOperator" signature="(System.Type,System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasValueSemantics" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsTuple" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAnonymousType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecord" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecordClass" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecordStruct" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsKeyValuePair" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NullableOrActualType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Common.TypeMemberReflector" filename="/_/Src/FluentAssertions/Common/TypeMemberReflector.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="NonPrivateMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NonPrivateProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NonPrivateFields" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LoadNonPrivateProperties" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPropertiesFromHierarchy" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LoadNonPrivateFields" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFieldsFromHierarchy" signature="(System.Type,FluentAssertions.Equivalency.MemberVisibility)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromHierarchy" signature="(System.Type,System.Func`2&lt;System.Type,System.Collections.Generic.IEnumerable`1&lt;TMemberInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInterfaceMembers" signature="(System.Type,System.Func`2&lt;System.Type,System.Collections.Generic.IEnumerable`1&lt;TMemberInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetClassMembers" signature="(System.Type,System.Func`2&lt;System.Type,System.Collections.Generic.IEnumerable`1&lt;TMemberInfo&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasNonPrivateGetter" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataColumnAssertions" filename="/_/Src/FluentAssertions/Data/DataColumnAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataColumn,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataColumn,System.Func`2&lt;FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataColumn&gt;,FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataColumn&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataEquivalencyAssertionOptions`1" filename="/_/Src/FluentAssertions/Data/DataEquivalencyAssertionOptions.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="AllowMismatchedTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowMismatchedTypes" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreUnmatchedColumns" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreUnmatchedColumns" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeOriginalData" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeOriginalData" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RowMatchMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RowMatchMode" signature="(FluentAssertions.Data.RowMatchMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeTableNames" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeColumnNames" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.EquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowingMismatchedTypes" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IgnoringUnmatchedColumns" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="UsingRowMatchMode" signature="(FluentAssertions.Data.RowMatchMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingOriginalData" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Excluding" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.DataRelation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.DataTable,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.DataColumn,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.DataRow,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.Constraint,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.ForeignKeyConstraint,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingRelated" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Data.UniqueConstraint,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeMemberOfRelatedTypeByGeneratedPredicate" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TDeclaringType,TPropertyType&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeMemberOfSubtypeOfRelatedTypeByGeneratedPredicate" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TDeclaringType,TPropertyType&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMemberAccessTargetMember" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BuildMemberSelectionPredicate" signature="(System.Type,System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Excluding" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingTable" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingTables" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingTables" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumnInAllTables" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumnsInAllTables" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumnsInAllTables" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumn" signature="(System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumns" signature="(System.Data.DataColumn[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumns" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Data.DataColumn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumn" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumns" signature="(System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingColumns" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShouldExcludeColumn" signature="(System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataRowAssertions`1" filename="/_/Src/FluentAssertions/Data/DataRowAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDataRow)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumn" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumns" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumns" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataRow,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataRow,System.Func`2&lt;FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataRow&gt;,FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataRow&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataSetAssertions`1" filename="/_/Src/FluentAssertions/Data/DataSetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDataSet)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveTableCount" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveTable" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveTables" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveTables" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataSet,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataSet,System.Func`2&lt;FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;,FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Data.DataTableAssertions`1" filename="/_/Src/FluentAssertions/Data/DataTableAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDataTable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveRowCount" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumn" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumns" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveColumns" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataTable,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Data.DataTable,System.Func`2&lt;FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataTable&gt;,FluentAssertions.Data.IDataEquivalencyAssertionOptions`1&lt;System.Data.DataTable&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataColumnCollectionAssertionExtensions" filename="/_/Src/FluentAssertions/DataColumnCollectionAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataColumn&gt;,System.Data.DataColumnCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataColumn&gt;,System.Data.DataColumnCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataColumn&gt;,System.Data.DataColumnCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataColumn&gt;,System.Data.DataColumnCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataRowAssertionExtensions" filename="/_/Src/FluentAssertions/DataRowAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(TDataRow)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataRowCollectionAssertionExtensions" filename="/_/Src/FluentAssertions/DataRowCollectionAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataRow&gt;,System.Data.DataRowCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataRow&gt;,System.Data.DataRowCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataRow&gt;,System.Data.DataRowCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataRow&gt;,System.Data.DataRowCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataSetAssertionExtensions" filename="/_/Src/FluentAssertions/DataSetAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(TDataSet)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataTableAssertionExtensions" filename="/_/Src/FluentAssertions/DataTableAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(TDataTable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.DataTableCollectionAssertionExtensions" filename="/_/Src/FluentAssertions/DataTableCollectionAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataTableCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameAs" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataTableCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataSet,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataSet,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataTableCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameCount" signature="(FluentAssertions.Collections.GenericCollectionAssertions`1&lt;System.Data.DataTable&gt;,System.Data.DataTableCollection,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Disposable" filename="/_/Src/FluentAssertions/Disposable.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.EnumAssertionsExtensions" filename="/_/Src/FluentAssertions/EnumAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(TEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Nullable`1&lt;TEnum&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Comparands" filename="/_/Src/FluentAssertions/Equivalency/Comparands.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subject" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expectation" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileTimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileTimeType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExpectedType" signature="(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.ConversionSelector" filename="/_/Src/FluentAssertions/Equivalency/ConversionSelector.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.List`1&lt;FluentAssertions.Equivalency.ConversionSelector/ConversionSelectorRule&gt;,System.Collections.Generic.List`1&lt;FluentAssertions.Equivalency.ConversionSelector/ConversionSelectorRule&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludeAll" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Include" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exclude" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RequiresConversion" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Predicate" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Digit" filename="/_/Src/FluentAssertions/Equivalency/Digit.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name=".ctor" signature="(System.Int32,FluentAssertions.Equivalency.Digit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetIndices" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Increment" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyAssertionOptions" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyAssertionOptions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyAssertionOptions`1" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyAssertionOptions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Excluding" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="For" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Collections.Generic.IEnumerable`1&lt;TNext&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Including" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithStrictOrderingFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutStrictOrderingFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsCollection" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithMapping" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TExpectation,System.Object&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TSubject,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithMapping" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithMapping" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TNestedExpectation,System.Object&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TNestedSubject,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithMapping" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyStep`1" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyValidationContext" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyValidationContext.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="CurrentNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reason" signature="(FluentAssertions.Execution.Reason)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tracer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Options" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CyclicReferenceDetector" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CyclicReferenceDetector" signature="(FluentAssertions.Equivalency.Execution.CyclicReferenceDetector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="(FluentAssertions.Equivalency.Tracing.ITraceWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsNestedMember" signature="(FluentAssertions.Equivalency.IMember)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsCollectionItem" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsDictionaryItem" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsCyclicReference" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.EquivalencyValidator" filename="/_/Src/FluentAssertions/Equivalency/EquivalencyValidator.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssertEquality" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.EquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RecursivelyAssertEquality" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShouldContinueThisDeep" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TrackWhatIsNeededToProvideContextToFailures" signature="(FluentAssertions.Execution.AssertionScope,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryToProveNodesAreEquivalent" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Execution.CollectionMemberAssertionOptionsDecorator" filename="/_/Src/FluentAssertions/Equivalency/Execution/CollectionMemberAssertionOptionsDecorator.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SelectionRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrderingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConversionSelector" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UserEquivalencySteps" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecursive" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowInfiniteRecursion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CyclicReferenceHandling" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumEquivalencyHandling" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseRuntimeTyping" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedFields" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreNonBrowsableOnSubject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludeNonBrowsableOnExpectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareRecordsByValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEqualityStrategy" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Execution.CyclicReferenceDetector" filename="/_/Src/FluentAssertions/Equivalency/Execution/CyclicReferenceDetector.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="IsCyclicReference" signature="(FluentAssertions.Equivalency.Execution.ObjectReference,FluentAssertions.Equivalency.CyclicReferenceHandling,FluentAssertions.Execution.Reason)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Execution.ObjectInfo" filename="/_/Src/FluentAssertions/Equivalency/Execution/ObjectInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileTimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Execution.ObjectReference" filename="/_/Src/FluentAssertions/Equivalency/Execution/ObjectReference.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="CompareByMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.String,System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPathElements" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="IsParentOrChildOf" signature="(FluentAssertions.Equivalency.Execution.ObjectReference)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Field" filename="/_/Src/FluentAssertions/Equivalency/Field.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReflectedType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeclaringType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeclaringType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsBrowsable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.FieldInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.FieldInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Matching.MappedMemberMatchingRule`2" filename="/_/Src/FluentAssertions/Equivalency/Matching/MappedMemberMatchingRule.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Matching.MappedPathMatchingRule" filename="/_/Src/FluentAssertions/Equivalency/Matching/MappedPathMatchingRule.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Matching.MustMatchByNameRule" filename="/_/Src/FluentAssertions/Equivalency/Matching/MustMatchByNameRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Match" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectationImplementsMemberExplicitly" signature="(System.Object,FluentAssertions.Equivalency.IMember)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Matching.TryMatchByNameRule" filename="/_/Src/FluentAssertions/Equivalency/Matching/TryMatchByNameRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Match" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.MemberFactory" filename="/_/Src/FluentAssertions/Equivalency/MemberFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Create" signature="(System.Reflection.MemberInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(System.Object,System.String,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.MemberSelectionContext" filename="/_/Src/FluentAssertions/Equivalency/MemberSelectionContext.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IncludedProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludedFields" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/MultiDimensionalArrayEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BuildDigitsRepresentingAllIndices" signature="(System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AreComparable" signature="(FluentAssertions.Equivalency.Comparands,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsArray" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameDimensions" signature="(System.Object,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameRank" signature="(System.Object,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.NestedExclusionOptionBuilder`2" filename="/_/Src/FluentAssertions/Equivalency/NestedExclusionOptionBuilder.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.Selection.ExcludeMemberByPathSelectionRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exclude" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TCurrent,System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="For" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TCurrent,System.Collections.Generic.IEnumerable`1&lt;TNext&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Node" filename="/_/Src/FluentAssertions/Equivalency/Node.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="GetSubjectId" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSubjectId" signature="(FluentAssertions.Equivalency.GetSubjectId)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PathAndName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRoot" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFirstIndex" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RootIsCollection" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RootIsCollection" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Depth" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCollection" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="From" signature="(FluentAssertions.Equivalency.GetSubjectId)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromCollectionItem" signature="(System.String,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromDictionaryItem" signature="(System.Object,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(FluentAssertions.Equivalency.Node)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.ByteArrayOrderingRule" filename="/_/Src/FluentAssertions/Equivalency/Ordering/ByteArrayOrderingRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.CollectionMemberObjectInfo" filename="/_/Src/FluentAssertions/Equivalency/Ordering/CollectionMemberObjectInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileTimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAdjustedPropertyPath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.CollectionMemberOrderingRuleDecorator" filename="/_/Src/FluentAssertions/Equivalency/Ordering/CollectionMemberOrderingRuleDecorator.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IOrderingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.MatchAllOrderingRule" filename="/_/Src/FluentAssertions/Equivalency/Ordering/MatchAllOrderingRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.PathBasedOrderingRule" filename="/_/Src/FluentAssertions/Equivalency/Ordering/PathBasedOrderingRule.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Invert" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invert" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsIndexingQualifiers" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveInitialIndexQualifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Ordering.PredicateBasedOrderingRule" filename="/_/Src/FluentAssertions/Equivalency/Ordering/PredicateBasedOrderingRule.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Invert" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invert" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.OrderingRuleCollection" filename="/_/Src/FluentAssertions/Equivalency/OrderingRuleCollection.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IOrderingRule&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="(FluentAssertions.Equivalency.IOrderingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsOrderingStrictFor" signature="(FluentAssertions.Equivalency.IObjectInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Property" filename="/_/Src/FluentAssertions/Equivalency/Property.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DeclaringType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReflectedType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsBrowsable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.PropertyInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.PropertyInfo,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.AllFieldsSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/AllFieldsSelectionRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.AllPropertiesSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/AllPropertiesSelectionRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.CollectionMemberSelectionRuleDecorator" filename="/_/Src/FluentAssertions/Equivalency/Selection/CollectionMemberSelectionRuleDecorator.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IMemberSelectionRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.ExcludeMemberByPathSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/ExcludeMemberByPathSelectionRule.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrRemoveMembersFrom" signature="(System.Collections.Generic.List`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.INode,System.String,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendPath" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.ExcludeMemberByPredicateSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/ExcludeMemberByPredicateSelectionRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.ExcludeNonBrowsableMembersRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/ExcludeNonBrowsableMembersRule.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.IncludeMemberByPathSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/IncludeMemberByPathSelectionRule.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Common.MemberPath)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrRemoveMembersFrom" signature="(System.Collections.Generic.List`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.INode,System.String,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.IncludeMemberByPredicateSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/IncludeMemberByPredicateSelectionRule.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.MemberToMemberInfoAdapter" filename="/_/Src/FluentAssertions/Equivalency/Selection/MemberToMemberInfoAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeclaringType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetterAccessibility" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IMember)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Selection.SelectMemberByPathSelectionRule" filename="/_/Src/FluentAssertions/Equivalency/Selection/SelectMemberByPathSelectionRule.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IncludesMembers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectMembers" signature="(FluentAssertions.Equivalency.INode,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Equivalency.IMember&gt;,FluentAssertions.Equivalency.MemberSelectionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveRootIndexQualifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1" filename="/_/Src/FluentAssertions/Equivalency/SelfReferenceEquivalencyAssertionOptions.cs" line-rate="1" branch-rate="1" complexity="68">
          <methods>
            <method name="OrderingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_MatchingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_UserEquivalencySteps" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConversionSelector" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_OrderingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_IsRecursive" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_AllowInfiniteRecursion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_CyclicReferenceHandling" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_EnumEquivalencyHandling" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_UseRuntimeTyping" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_IncludedProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_IncludedFields" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_IgnoreNonBrowsableOnSubject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Equivalency.IEquivalencyAssertionOptions.get_ExcludeNonBrowsableOnExpectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareRecordsByValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraceWriter" signature="(FluentAssertions.Equivalency.Tracing.ITraceWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Equivalency.IEquivalencyAssertionOptions.GetEqualityStrategy" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludingAllDeclaredProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingAllRuntimeProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingFields" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingInternalFields" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExcludingFields" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludingInternalProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExcludingProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExcludingNonBrowsableMembers" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IgnoringNonBrowsableMembersOnSubject" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RespectingRuntimeTypes" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RespectingDeclaredTypes" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Excluding" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Including" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IMemberInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExcludingMissingMembers" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThrowingOnMissingMembers" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Using" signature="(System.Action`1&lt;FluentAssertions.Equivalency.IAssertionContext`1&lt;TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludingNestedObjects" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExcludingNestedObjects" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IgnoringCyclicReferences" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AllowingInfiniteRecursion" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithoutSelectionRules" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithoutMatchingRules" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Using" signature="(FluentAssertions.Equivalency.IMemberSelectionRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="(FluentAssertions.Equivalency.IMemberMatchingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="(FluentAssertions.Equivalency.IOrderingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="(FluentAssertions.Equivalency.IEquivalencyStep)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Using" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithStrictOrdering" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithStrictOrderingFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutStrictOrdering" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithoutStrictOrderingFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ComparingEnumsByName" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingEnumsByValue" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingRecordsByValue" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingRecordsByMembers" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingByMembers" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingByMembers" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ComparingByValue" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComparingByValue" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithTracing" signature="(FluentAssertions.Equivalency.Tracing.ITraceWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithAutoConversion" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithAutoConversionFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithoutAutoConversionFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="19">
              <lines />
            </method>
            <method name="RemoveSelectionRule" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="AddSelectionRule" signature="(FluentAssertions.Equivalency.IMemberSelectionRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMatchingRule" signature="(FluentAssertions.Equivalency.IMemberMatchingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddOrderingRule" signature="(FluentAssertions.Equivalency.IOrderingRule)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddEquivalencyStep" signature="(FluentAssertions.Equivalency.IEquivalencyStep)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSelf,System.Action`1&lt;FluentAssertions.Equivalency.IAssertionContext`1&lt;TMember&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhenTypeIs" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="When" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions-Equivalency-IEquivalencyAssertionOptions-get_SelectionRules" signature="()" line-rate="1" branch-rate="1" complexity="13">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.AssertionContext`1" filename="/_/Src/FluentAssertions/Equivalency/Steps/AssertionContext.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SelectedNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Because" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Because" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseArgs" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseArgs" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.INode,TSubject,TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFrom" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.AssertionResultSet" filename="/_/Src/FluentAssertions/Equivalency/Steps/AssertionResultSet.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="AddSet" signature="(System.Object,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SelectClosestMatchFor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetBestResultSets" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ContainsSuccessfulSet" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.AssertionRuleEquivalencyStep`1" filename="/_/Src/FluentAssertions/Equivalency/Steps/AssertionRuleEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;FluentAssertions.Equivalency.IObjectInfo,System.Boolean&gt;&gt;,System.Action`1&lt;FluentAssertions.Equivalency.IAssertionContext`1&lt;TSubject&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppliesTo" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteAssertion" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanBeNull" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.AutoConversionStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/AutoConversionStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryChangeType" signature="(System.Object,System.Type,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.ConstraintCollectionEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/ConstraintCollectionEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.ConstraintEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/ConstraintEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareCommonProperties" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Data.Constraint,System.Data.Constraint,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareConstraints" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.UniqueConstraint,System.Data.UniqueConstraint,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareConstraints" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.ForeignKeyConstraint,System.Data.ForeignKeyConstraint,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareConstraintColumns" signature="(System.Data.DataColumn[],System.Data.DataColumn[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.INode,System.Object,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataColumnEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataColumnEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareSubjectAndExpectationOfTypeDataColumn" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataColumn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareMember" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataRelationEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataRelationEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareScalarProperties" signature="(System.Data.DataRelation,System.Data.DataRelation,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareCollections" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareRelationConstraints" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataRelation,System.Data.DataRelation,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareDataRelationConstraints" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.DataRelation,System.Data.DataRelation,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func`2&lt;System.Data.DataRelation,System.Data.DataColumn[]&gt;,System.Func`2&lt;System.Data.DataRelation,System.Data.DataTable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareDataRelationColumns" signature="(System.Data.DataRelation,System.Data.DataRelation,System.Func`2&lt;System.Data.DataRelation,System.Data.DataColumn[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareDataRelationTable" signature="(System.Data.DataRelation,System.Data.DataRelation,System.Func`2&lt;System.Data.DataRelation,System.Data.DataTable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareDataRelationKeyConstraint" signature="(System.Data.DataRelation,System.Data.DataRelation,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.INode,System.Object,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataRowCollectionEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataRowCollectionEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRowsByIndexAndCompare" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataRowCollection,System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRowsByPrimaryKeyAndCompare" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.DataRowCollection,System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GatherPrimaryKeyColumnTypes" signature="(System.Data.DataTable,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ComparePrimaryKeyTypes" signature="(System.Type[],System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GatherRowsByPrimaryKeyAndCompareData" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Data.DataRowCollection,System.Data.DataRowCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractPrimaryKey" signature="(System.Data.DataRow)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(FluentAssertions.Equivalency.Steps.DataRowCollectionEquivalencyStep/CompoundKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataRowEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataRowEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareScalarProperties" signature="(System.Data.DataRow,System.Data.DataRow,FluentAssertions.Equivalency.Steps.DataRowEquivalencyStep/SelectedDataRowMembers)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareFieldValues" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataRow,System.Data.DataRow,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataTable&gt;,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataRow&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareFieldValue" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataRow,System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion,System.Data.DataColumn,System.Data.DataRowVersion)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HasErrors" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasErrors" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RowState" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RowState" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataSetEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataSetEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareScalarProperties" signature="(System.Data.DataSet,System.Data.DataSet,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareCollections" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Data.DataSet,System.Data.DataSet,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareExtendedProperties" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTables" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataSet,System.Data.DataSet,FluentAssertions.Data.DataEquivalencyAssertionOptions`1&lt;System.Data.DataSet&gt;,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTable" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,System.Data.DataSet,System.Data.DataSet,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DataTableEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DataTableEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareScalarProperties" signature="(System.Data.DataTable,System.Data.DataTable,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareCollections" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.Dictionary`2&lt;System.String,FluentAssertions.Equivalency.IMember&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,System.Object,FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DictionaryEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/DictionaryEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreconditionsAreMet" signature="(System.Collections.IDictionary,System.Collections.IDictionary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertEitherIsNotNull" signature="(System.Collections.IDictionary,System.Collections.IDictionary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertIsDictionary" signature="(System.Collections.IDictionary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSameLength" signature="(System.Collections.IDictionary,System.Collections.IDictionary)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo" filename="/_/Src/FluentAssertions/Equivalency/Steps/DictionaryInterfaceInfo.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Key" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetFrom" signature="(System.Type,System.String,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetFromWithKey" signature="(System.Type,System.String,System.Type,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDictionaryInterfacesFrom" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryConvertFrom" signature="(System.Object,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToDictionaryInternal" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EnumEqualityStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/EnumEqualityStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleByValue" signature="(FluentAssertions.Equivalency.Comparands)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleByName" signature="(FluentAssertions.Equivalency.Comparands)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDisplayNameForEnumComparison" signature="(System.Object,System.Nullable`1&lt;System.Decimal&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractDecimal" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EnumerableEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/EnumerableEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSubjectIsCollection" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCollection" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EnumerableEquivalencyValidator" filename="/_/Src/FluentAssertions/Equivalency/Steps/EnumerableEquivalencyValidator.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Recursive" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Recursive" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrderingRules" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrderingRules" signature="(FluentAssertions.Equivalency.OrderingRuleCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(System.Object[],T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertIsNotNull" signature="(System.Object,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionsHaveSameCount" signature="(System.Collections.Generic.ICollection`1&lt;System.Object&gt;,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertElementGraphEquivalency" signature="(System.Object[],T[],FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertElementGraphEquivalencyWithStrictOrdering" signature="(System.Object[],T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertElementGraphEquivalencyWithLooseOrdering" signature="(System.Object[],T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LooselyMatchAgainst" signature="(System.Collections.Generic.IList`1&lt;System.Object&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryToMatch" signature="(System.Object,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StrictlyMatchAgainst" signature="(System.Object[],T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EnumerableEquivalencyValidatorExtensions" filename="/_/Src/FluentAssertions/Equivalency/Steps/EnumerableEquivalencyValidatorExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssertEitherCollectionIsNotEmpty" signature="(FluentAssertions.Execution.IAssertionScope,System.Collections.Generic.ICollection`1&lt;System.Object&gt;,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasEnoughItems" signature="(FluentAssertions.Execution.IAssertionScope,System.Collections.Generic.ICollection`1&lt;System.Object&gt;,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasNotTooManyItems" signature="(FluentAssertions.Execution.IAssertionScope,System.Collections.Generic.ICollection`1&lt;System.Object&gt;,System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EqualityComparerEquivalencyStep`1" filename="/_/Src/FluentAssertions/Equivalency/Steps/EqualityComparerEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.EquivalencyValidationContextExtensions" filename="/_/Src/FluentAssertions/Equivalency/Steps/EquivalencyValidationContextExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AsCollectionItem" signature="(FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.GenericDictionaryEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/GenericDictionaryEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSubjectIsNotNull" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertExpectationIsNotNull" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsureSubjectIsDictionary" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSameLength" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSameLength" signature="(System.Collections.Generic.IDictionary`2&lt;TSubjectKey,TSubjectValue&gt;,System.Collections.Generic.IDictionary`2&lt;TExpectedKey,TExpectedValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateKeyDifference" signature="(System.Collections.Generic.IDictionary`2&lt;TSubjectKey,TSubjectValue&gt;,System.Collections.Generic.IDictionary`2&lt;TExpectedKey,TExpectedValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertDictionaryEquivalence" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo,FluentAssertions.Equivalency.Steps.DictionaryInterfaceInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertDictionaryEquivalence" signature="(FluentAssertions.Equivalency.EquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.IDictionary`2&lt;TSubjectKey,TSubjectValue&gt;,System.Collections.Generic.IDictionary`2&lt;TExpectedKey,TExpectedValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MissingKeys" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdditionalKeys" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.List`1&lt;TExpectedKey&gt;,System.Collections.Generic.List`1&lt;TSubjectKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.GenericEnumerableEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/GenericEnumerableEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleImpl" signature="(FluentAssertions.Equivalency.Steps.EnumerableEquivalencyValidator,System.Object[],System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertSubjectIsCollection" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCollection" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericCollection" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetIEnumerableInterfaces" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTypeOfEnumeration" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.ReferenceEqualityEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/ReferenceEqualityEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.RunAllUserStepsEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/RunAllUserStepsEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.SimpleEqualityEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/SimpleEqualityEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.StringEqualityEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/StringEqualityEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstNulls" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateSubjectIsString" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.INode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.StructuralEqualityEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/StructuralEqualityEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertMemberEquality" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindMatchFor" signature="(FluentAssertions.Equivalency.IMember,FluentAssertions.Equivalency.INode,System.Object,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembersFromExpectation" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.ValueTypeEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/ValueTypeEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.XAttributeEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/XAttributeEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.XDocumentEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/XDocumentEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Steps.XElementEquivalencyStep" filename="/_/Src/FluentAssertions/Equivalency/Steps/XElementEquivalencyStep.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OnHandle" signature="(FluentAssertions.Equivalency.Comparands,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.SubjectInfoExtensions" filename="/_/Src/FluentAssertions/Equivalency/SubjectInfoExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WhichSetterHas" signature="(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhichSetterDoesNotHave" signature="(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhichGetterHas" signature="(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhichGetterDoesNotHave" signature="(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Tracing.StringBuilderTraceWriter" filename="/_/Src/FluentAssertions/Equivalency/Tracing/StringBuilderTraceWriter.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="AddSingle" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddBlock" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteLine" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Equivalency.Tracing.Tracer" filename="/_/Src/FluentAssertions/Equivalency/Tracing/Tracer.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Equivalency.INode,FluentAssertions.Equivalency.Tracing.ITraceWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteLine" signature="(FluentAssertions.Equivalency.Tracing.GetTraceMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteBlock" signature="(FluentAssertions.Equivalency.Tracing.GetTraceMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.EquivalencyPlan" filename="/_/Src/FluentAssertions/EquivalencyPlan.cs" line-rate="1" branch-rate="1" complexity="16">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AddAfter" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Insert" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InsertBefore" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Remove" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetDefaultSteps" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.EventRaisingExtensions" filename="/_/Src/FluentAssertions/EventRaisingExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WithSender" signature="(FluentAssertions.Events.IEventRecording,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithArgs" signature="(FluentAssertions.Events.IEventRecording,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithArgs" signature="(FluentAssertions.Events.IEventRecording,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventAssertions`1" filename="/_/Src/FluentAssertions/Events/EventAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Monitor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Events.IMonitor`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raise" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotRaise" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaisePropertyChangeFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Object&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotRaisePropertyChangeFor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Object&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAffectedPropertyName" signature="(FluentAssertions.Events.OccurredEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventHandlerFactory" filename="/_/Src/FluentAssertions/Events/EventHandlerFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GenerateHandler" signature="(System.Type,FluentAssertions.Events.EventRecorder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDelegateReturnType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDelegateParameterTypes" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendParameterListThisReference" signature="(System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeIsDelegate" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelegateInvokeMethod" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventMetadata" filename="/_/Src/FluentAssertions/Events/EventMetadata.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="EventName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandlerType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventMonitor`1" filename="/_/Src/FluentAssertions/Events/EventMonitor.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MonitoredEvents" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OccurredEvents" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.Func`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Should" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetRecordingFor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Attach" signature="(System.Type,System.Func`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPublicEvents" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="AttachEventHandler" signature="(System.Reflection.EventInfo,System.Func`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.EventRecorder" filename="/_/Src/FluentAssertions/Events/EventRecorder.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name="EventObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventObject" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlerType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlerType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object,System.String,System.Func`1&lt;System.DateTime&gt;,FluentAssertions.Events.ThreadSafeSequenceGenerator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Attach" signature="(System.WeakReference,System.Reflection.EventInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="RecordEvent" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.FilteredEventRecording" filename="/_/Src/FluentAssertions/Events/FilteredEventRecording.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="EventObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlerType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Events.IEventRecording,System.Collections.Generic.IEnumerable`1&lt;FluentAssertions.Events.OccurredEvent&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.OccurredEvent" filename="/_/Src/FluentAssertions/Events/OccurredEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="EventName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parameters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parameters" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TimestampUtc" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TimestampUtc" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sequence" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sequence" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.RecordedEvent" filename="/_/Src/FluentAssertions/Events/RecordedEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TimestampUtc" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parameters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sequence" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.DateTime,System.Int32,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Events.ThreadSafeSequenceGenerator" filename="/_/Src/FluentAssertions/Events/ThreadSafeSequenceGenerator.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Increment" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Exactly" filename="/_/Src/FluentAssertions/Exactly.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.ExceptionAssertionsExtensions" filename="/_/Src/FluentAssertions/ExceptionAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="21">
          <methods>
            <method name="WithParameterName" signature="(FluentAssertions.Specialized.ExceptionAssertions`1&lt;TException&gt;,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithInnerException" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithInnerException" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithInnerExceptionExactly" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithInnerExceptionExactly" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithMessage" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="WithParameterName" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.AssertionFailedException" filename="/_/Src/FluentAssertions/Execution/AssertionFailedException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.AssertionScope" filename="/_/Src/FluentAssertions/Execution/AssertionScope.cs" line-rate="1" branch-rate="1" complexity="18">
          <methods>
            <method name="Context" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Context" signature="(System.Lazy`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Current" signature="(FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UsingLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormattingOptions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Succeeded" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallerIdentity" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ntAssertions.Execution.IAssertionScope.get_UsingLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.IAssertionStrategy)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Lazy`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.IAssertionStrategy,FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseOf" signature="(FluentAssertions.Execution.Reason)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseOf" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithExpectation" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TrackComparands" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClearExpectation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Given" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForCondition" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForConstraint" signature="(FluentAssertions.OccurrenceConstraint,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.Func`1&lt;FluentAssertions.Execution.FailReason&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWithPreFormatted" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.Func`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Func`1&lt;System.Object&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetIdentifier" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="AddPreFormattedFailure" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendTracing" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddNonReportable" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddReportable" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddReportable" signature="(System.String,System.Func`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Discard" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HasFailures" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Get" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="WithDefaultIdentifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssumeSingleCaller" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetCurrentAssertionScope" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SetCurrentAssertionScope" signature="(FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Execution.IAssertionScope.ForCondition" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Execution.IAssertionScope.BecauseOf" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Execution.IAssertionScope.WithExpectation" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FluentAssertions.Execution.IAssertionScope.WithDefaultIdentifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.CollectingAssertionStrategy" filename="/_/Src/FluentAssertions/Execution/CollectingAssertionStrategy.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="FailureMessages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscardFailures" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ThrowIfAny" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleFailure" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.ContextDataItems" filename="/_/Src/FluentAssertions/Execution/ContextDataItems.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="GetReportable" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="AsStringOrDefault" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(FluentAssertions.Execution.ContextDataItems)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(FluentAssertions.Execution.ContextDataItems/DataItem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Key" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reportable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RequiresFormatting" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object,System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.Continuation" filename="/_/Src/FluentAssertions/Execution/Continuation.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Then" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.AssertionScope,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(FluentAssertions.Execution.Continuation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.ContinuationOfGiven`1" filename="/_/Src/FluentAssertions/Execution/ContinuationOfGiven.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Then" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.GivenSelector`1&lt;TSubject&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(FluentAssertions.Execution.ContinuationOfGiven`1&lt;TSubject&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.ContinuedAssertionScope" filename="/_/Src/FluentAssertions/Execution/ContinuedAssertionScope.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="UsingLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Execution.AssertionScope,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Given" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForCondition" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Func`1&lt;System.Object&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.Func`1&lt;FluentAssertions.Execution.FailReason&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BecauseOf" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClearExpectation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithExpectation" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithDefaultIdentifier" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Discard" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.DefaultAssertionStrategy" filename="/_/Src/FluentAssertions/Execution/DefaultAssertionStrategy.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="FailureMessages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleFailure" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscardFailures" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ThrowIfAny" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.Execute" filename="/_/Src/FluentAssertions/Execution/Execute.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Assertion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.FailReason" filename="/_/Src/FluentAssertions/Execution/FailReason.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Args" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.FallbackTestFramework" filename="/_/Src/FluentAssertions/Execution/FallbackTestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.GivenSelector`1" filename="/_/Src/FluentAssertions/Execution/GivenSelector.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Func`1&lt;T&gt;,FluentAssertions.Execution.AssertionScope,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForCondition" signature="(System.Func`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Given" signature="(System.Func`2&lt;T,TOut&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Func`2&lt;T,System.Object&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClearExpectation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.GivenSelectorExtensions" filename="/_/Src/FluentAssertions/Execution/GivenSelectorExtensions.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="AssertCollectionIsNotNull" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertEitherCollectionIsNotEmpty" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasEnoughItems" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasEnoughItems" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionHasNotTooManyItems" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionsHaveSameCount" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;T&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertCollectionsHaveSameItems" signature="(FluentAssertions.Execution.GivenSelector`1&lt;System.Collections.Generic.ICollection`1&lt;TActual&gt;&gt;,System.Collections.Generic.ICollection`1&lt;TExpected&gt;,System.Func`3&lt;System.Collections.Generic.ICollection`1&lt;TActual&gt;,System.Collections.Generic.ICollection`1&lt;TExpected&gt;,System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Items" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Index" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.ICollection`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Contains" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CopyTo" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Remove" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.LateBoundTestFramework" filename="/_/Src/FluentAssertions/Execution/LateBoundTestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.MessageBuilder" filename="/_/Src/FluentAssertions/Execution/MessageBuilder.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Formatting.FormattingOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Build" signature="(System.String,System.Object[],System.String,FluentAssertions.Execution.ContextDataItems,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstituteIdentifier" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstituteContextualTags" signature="(System.String,FluentAssertions.Execution.ContextDataItems)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatArgumentPlaceholders" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SanitizeReason" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsurePrefix" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractLeadingBlanksFrom" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartsWithBlank" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.MSpecFramework" filename="/_/Src/FluentAssertions/Execution/MSpecFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssemblyName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionFullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.MSTestFrameworkV2" filename="/_/Src/FluentAssertions/Execution/MSTestFrameworkV2.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionFullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.NSpecFramework" filename="/_/Src/FluentAssertions/Execution/NSpecFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.NUnitTestFramework" filename="/_/Src/FluentAssertions/Execution/NUnitTestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssemblyName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionFullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.Reason" filename="/_/Src/FluentAssertions/Execution/Reason.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FormattedMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormattedMessage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.TestFrameworkProvider" filename="/_/Src/FluentAssertions/Execution/TestFrameworkProvider.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Common.Configuration)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DetectFramework" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="AttemptToDetectUsingAppSetting" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="AttemptToDetectUsingDynamicScanning" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Execution.XUnit2TestFramework" filename="/_/Src/FluentAssertions/Execution/XUnit2TestFramework.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Extensions.FluentDateTimeExtensions" filename="/_/Src/FluentAssertions/Extensions/FluentDateTimeExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="January" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="February" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="March" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="April" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="May" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="June" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="July" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="August" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="September" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="October" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="November" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="December" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="At" signature="(System.DateTime,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="At" signature="(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="At" signature="(System.DateTimeOffset,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsUtc" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsLocal" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Before" signature="(System.TimeSpan,System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="After" signature="(System.TimeSpan,System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanosecond" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanosecond" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddNanoseconds" signature="(System.DateTime,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddNanoseconds" signature="(System.DateTimeOffset,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsecond" signature="(System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsecond" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMicroseconds" signature="(System.DateTime,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMicroseconds" signature="(System.DateTimeOffset,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithOffset" signature="(System.DateTime,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Extensions.FluentTimeSpanExtensions" filename="/_/Src/FluentAssertions/Extensions/FluentTimeSpanExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Ticks" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Ticks" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanoseconds" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanoseconds" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nanoseconds" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TotalNanoseconds" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microseconds" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microseconds" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microseconds" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TotalMicroseconds" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Milliseconds" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Milliseconds" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seconds" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seconds" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seconds" signature="(System.Int32,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Minutes" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Minutes" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Minutes" signature="(System.Int32,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hours" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hours" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hours" signature="(System.Int32,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Days" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Days" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Days" signature="(System.Int32,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="And" signature="(System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Extensions.OccurrenceConstraintExtensions" filename="/_/Src/FluentAssertions/Extensions/OccurrenceConstraintExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TimesExactly" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TimesOrLess" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TimesOrMore" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.FluentActions" filename="/_/Src/FluentAssertions/FluentActions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Invoking" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoking" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Awaiting" signature="(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(System.Func`1&lt;System.Collections.IEnumerable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerating" signature="(System.Func`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.AggregateExceptionValueFormatter" filename="/_/Src/FluentAssertions/Formatting/AggregateExceptionValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.AttributeBasedFormatter" filename="/_/Src/FluentAssertions/Formatting/AttributeBasedFormatter.cs" line-rate="1" branch-rate="1" complexity="17">
          <methods>
            <method name="IsScanningEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Formatters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFormatter" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleValueFormatterDetectionModeChanges" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="FindCustomFormatters" signature="()" line-rate="1" branch-rate="1" complexity="15">
              <lines />
            </method>
            <method name="Applicable" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.ByteValueFormatter" filename="/_/Src/FluentAssertions/Formatting/ByteValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DateTimeOffsetValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DateTimeOffsetValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasTime" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasDate" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasMilliSeconds" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasMicroSeconds" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasNanoSeconds" signature="(System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DecimalValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DecimalValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DefaultValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DefaultValueFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="SpacesPerIndentionLevel" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMembers" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasDefaultToStringImplementation" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteTypeAndMemberValues" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeDisplayName" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteMemberValueTextFor" signature="(System.Object,System.Reflection.MemberInfo,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DictionaryValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DictionaryValueFormatter.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="MaxItems" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddLineOrFragment" signature="(FluentAssertions.Formatting.FormattedObjectGraph,System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AsEnumerable" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.DoubleValueFormatter" filename="/_/Src/FluentAssertions/Formatting/DoubleValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.EnumerableExtensions" filename="/_/Src/FluentAssertions/Formatting/EnumerableExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="JoinUsingWritingStyle" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.EnumerableValueFormatter" filename="/_/Src/FluentAssertions/Formatting/EnumerableValueFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="MaxItems" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddLineOrFragment" signature="(FluentAssertions.Formatting.FormattedObjectGraph,System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.EnumValueFormatter" filename="/_/Src/FluentAssertions/Formatting/EnumValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.ExceptionValueFormatter" filename="/_/Src/FluentAssertions/Formatting/ExceptionValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.ExpressionValueFormatter" filename="/_/Src/FluentAssertions/Formatting/ExpressionValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.FormattedObjectGraph" filename="/_/Src/FluentAssertions/Formatting/FormattedObjectGraph.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="SpacesPerIndentation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Whitespace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddFragmentOnNewLine" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddLine" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddFragment" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FlushCurrentLine" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="AppendSafely" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithIndentation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.Formatter" filename="/_/Src/FluentAssertions/Formatting/Formatter.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Formatters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="(System.Object,FluentAssertions.Formatting.FormattingOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatChild" signature="(System.String,System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormattingOptions,FluentAssertions.Formatting.Formatter/ObjectGraph)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveFormatter" signature="(FluentAssertions.Formatting.IValueFormatter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddFormatter" signature="(FluentAssertions.Formatting.IValueFormatter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Depth" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryPush" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFullPath" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Pop" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.FormattingContext" filename="/_/Src/FluentAssertions/Formatting/FormattingContext.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="UseLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseLineBreaks" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.FormattingOptions" filename="/_/Src/FluentAssertions/Formatting/FormattingOptions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="UseLineBreaks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseLineBreaks" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxDepth" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxDepth" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxLines" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxLines" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clone" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.GuidValueFormatter" filename="/_/Src/FluentAssertions/Formatting/GuidValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.Int16ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/Int16ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.Int32ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/Int32ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.Int64ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/Int64ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.MaxLinesExceededException" filename="/_/Src/FluentAssertions/Formatting/MaxLinesExceededException.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.MultidimensionalArrayFormatter" filename="/_/Src/FluentAssertions/Formatting/MultidimensionalArrayFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFirstIteration" signature="(System.Array,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInnerMostLoop" signature="(System.Array,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLastIteration" signature="(System.Array,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.NullValueFormatter" filename="/_/Src/FluentAssertions/Formatting/NullValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.PredicateLambdaExpressionValueFormatter" filename="/_/Src/FluentAssertions/Formatting/PredicateLambdaExpressionValueFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReduceConstantSubExpressions" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractChainOfExpressionsJoinedWithAndOperator" signature="(System.Linq.Expressions.BinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasParameters" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasParameters" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitParameter" signature="(System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasLiftedOperator" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpressionIsConstant" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AndChain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.PropertyInfoFormatter" filename="/_/Src/FluentAssertions/Formatting/PropertyInfoFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.SByteValueFormatter" filename="/_/Src/FluentAssertions/Formatting/SByteValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.SingleValueFormatter" filename="/_/Src/FluentAssertions/Formatting/SingleValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.StringValueFormatter" filename="/_/Src/FluentAssertions/Formatting/StringValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.TaskFormatter" filename="/_/Src/FluentAssertions/Formatting/TaskFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.TimeSpanValueFormatter" filename="/_/Src/FluentAssertions/Formatting/TimeSpanValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetNonZeroFragments" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMicrosecondsIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddSecondsIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMilliSecondsIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddMinutesIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddHoursIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddDaysIfNotZero" signature="(System.TimeSpan,System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.UInt16ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/UInt16ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.UInt32ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/UInt32ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.UInt64ValueFormatter" filename="/_/Src/FluentAssertions/Formatting/UInt64ValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.XAttributeValueFormatter" filename="/_/Src/FluentAssertions/Formatting/XAttributeValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.XDocumentValueFormatter" filename="/_/Src/FluentAssertions/Formatting/XDocumentValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.XElementValueFormatter" filename="/_/Src/FluentAssertions/Formatting/XElementValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatElementWithoutChildren" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatElementWithChildren" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitIntoSeparateLines" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Formatting.XmlReaderValueFormatter" filename="/_/Src/FluentAssertions/Formatting/XmlReaderValueFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.LessThan" filename="/_/Src/FluentAssertions/LessThan.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.MoreThan" filename="/_/Src/FluentAssertions/MoreThan.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Twice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Thrice" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Times" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assert" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.ByteAssertions" filename="/_/Src/FluentAssertions/Numeric/ByteAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Byte,System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.ComparableTypeAssertions`1" filename="/_/Src/FluentAssertions/Numeric/ComparableTypeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.IComparable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.ComparableTypeAssertions`2" filename="/_/Src/FluentAssertions/Numeric/ComparableTypeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.IComparable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeRankedEquallyTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeRankedEquallyTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThanOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThan" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThanOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInRange" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInRange" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.DecimalAssertions" filename="/_/Src/FluentAssertions/Numeric/DecimalAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Decimal,System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.DoubleAssertions" filename="/_/Src/FluentAssertions/Numeric/DoubleAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.Int16Assertions" filename="/_/Src/FluentAssertions/Numeric/Int16Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int16,System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.Int32Assertions" filename="/_/Src/FluentAssertions/Numeric/Int32Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.Int64Assertions" filename="/_/Src/FluentAssertions/Numeric/Int64Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableByteAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableByteAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Byte&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Byte,System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableDecimalAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableDecimalAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Decimal&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Decimal,System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableDoubleAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableDoubleAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Double&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableInt16Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableInt16Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Int16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int16,System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableInt32Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableInt32Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableInt64Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableInt64Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Int64&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableNumericAssertions`1" filename="/_/Src/FluentAssertions/Numeric/NullableNumericAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableNumericAssertions`2" filename="/_/Src/FluentAssertions/Numeric/NullableNumericAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Nullable`1&lt;T&gt;,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableSByteAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableSByteAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.SByte&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.SByte,System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableSingleAssertions" filename="/_/Src/FluentAssertions/Numeric/NullableSingleAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Single&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableUInt16Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableUInt16Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.UInt16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt16,System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableUInt32Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableUInt32Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.UInt32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt32,System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NullableUInt64Assertions" filename="/_/Src/FluentAssertions/Numeric/NullableUInt64Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.UInt64&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NumericAssertions`1" filename="/_/Src/FluentAssertions/Numeric/NumericAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.NumericAssertions`2" filename="/_/Src/FluentAssertions/Numeric/NumericAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BePositive" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNegative" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThanOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThan" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThanOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterOrEqualTo" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInRange" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInRange" signature="(T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateDifferenceMessage" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.SByteAssertions" filename="/_/Src/FluentAssertions/Numeric/SByteAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.SByte,System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.SingleAssertions" filename="/_/Src/FluentAssertions/Numeric/SingleAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNaN" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.UInt16Assertions" filename="/_/Src/FluentAssertions/Numeric/UInt16Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt16,System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.UInt32Assertions" filename="/_/Src/FluentAssertions/Numeric/UInt32Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt32,System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Numeric.UInt64Assertions" filename="/_/Src/FluentAssertions/Numeric/UInt64Assertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CalculateDifferenceForFailureMessage" signature="(System.UInt64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.NumericAssertionsExtensions" filename="/_/Src/FluentAssertions/NumericAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.SByte&gt;,System.SByte,System.Byte,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Byte&gt;,System.Byte,System.Byte,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int16&gt;,System.Int16,System.UInt16,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt16&gt;,System.UInt16,System.UInt16,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int32&gt;,System.Int32,System.UInt32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt32&gt;,System.UInt32,System.UInt32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int64&gt;,System.Int64,System.UInt64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt64&gt;,System.UInt64,System.UInt64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailIfValueOutsideBounds" signature="(System.Boolean,TValue,TDelta,TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.SByte&gt;,System.SByte,System.Byte,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Byte&gt;,System.Byte,System.Byte,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int16&gt;,System.Int16,System.UInt16,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt16&gt;,System.UInt16,System.UInt16,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int32&gt;,System.Int32,System.UInt32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt32&gt;,System.UInt32,System.UInt32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Int64&gt;,System.Int64,System.UInt64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.UInt64&gt;,System.UInt64,System.UInt64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailIfValueInsideBounds" signature="(System.Boolean,TValue,TDelta,TValue,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Single&gt;,System.Single,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Single&gt;,System.Nullable`1&lt;System.Single&gt;,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Single&gt;,System.Single,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Double&gt;,System.Double,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Double&gt;,System.Nullable`1&lt;System.Double&gt;,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Double&gt;,System.Double,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Decimal&gt;,System.Decimal,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Decimal&gt;,System.Nullable`1&lt;System.Decimal&gt;,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Decimal&gt;,System.Decimal,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailIfDifferenceOutsidePrecision" signature="(System.Boolean,FluentAssertions.Numeric.NumericAssertions`1&lt;T&gt;,T,T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Single&gt;,System.Single,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Single&gt;,System.Nullable`1&lt;System.Single&gt;,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Single&gt;,System.Single,System.Single,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Double&gt;,System.Double,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Double&gt;,System.Nullable`1&lt;System.Double&gt;,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Double&gt;,System.Double,System.Double,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Decimal&gt;,System.Decimal,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NullableNumericAssertions`1&lt;System.Decimal&gt;,System.Nullable`1&lt;System.Decimal&gt;,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeApproximately" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;System.Decimal&gt;,System.Decimal,System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailIfDifferenceWithinPrecision" signature="(FluentAssertions.Numeric.NumericAssertions`1&lt;T&gt;,System.Boolean,T,T,T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMinValue" signature="(System.Int64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMaxValue" signature="(System.Int64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.ObjectAssertionsExtensions" filename="/_/Src/FluentAssertions/ObjectAssertionsExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BeBinarySerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeBinarySerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;T&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;T&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDataContractSerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDataContractSerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;T&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;T&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateCloneUsingBinarySerializer" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateCloneUsingDataContractSerializer" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeXmlSerializable" signature="(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateCloneUsingXmlSerializer" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BindToType" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.OccurrenceConstraint" filename="/_/Src/FluentAssertions/OccurrenceConstraint.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExpectedCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RegisterReportables" signature="(FluentAssertions.Execution.AssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.BooleanAssertions" filename="/_/Src/FluentAssertions/Primitives/BooleanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.BooleanAssertions`1" filename="/_/Src/FluentAssertions/Primitives/BooleanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeFalse" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeTrue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Boolean,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Boolean,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Imply" signature="(System.Boolean,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeAssertions" filename="/_/Src/FluentAssertions/Primitives/DateTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeAssertions`1" filename="/_/Src/FluentAssertions/Primitives/DateTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.DateTime&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;System.DateTime&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(System.DateTime,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(System.DateTime,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeBefore" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeBefore" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOnOrBefore" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOnOrBefore" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAfter" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAfter" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOnOrAfter" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOnOrAfter" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveYear" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveYear" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMonth" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMonth" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveDay" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveDay" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveHour" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveHour" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMinute" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMinute" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSecond" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSecond" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeMoreThan" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAtLeast" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeExactly" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWithin" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSameDateAs" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameDateAs" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Nullable`1&lt;System.DateTime&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.DateTime[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.DateTime&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Nullable`1&lt;System.DateTime&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeIn" signature="(System.DateTimeKind,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeOffsetAssertions" filename="/_/Src/FluentAssertions/Primitives/DateTimeOffsetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeOffsetAssertions`1" filename="/_/Src/FluentAssertions/Primitives/DateTimeOffsetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeExactly" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeExactly" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeExactly" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeExactly" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(System.DateTimeOffset,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(System.DateTimeOffset,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeBefore" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeBefore" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOnOrBefore" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOnOrBefore" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAfter" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAfter" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOnOrAfter" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOnOrAfter" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveYear" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveYear" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMonth" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMonth" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveDay" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveDay" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveHour" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveHour" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMinute" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMinute" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSecond" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSecond" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveOffset" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveOffset" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeMoreThan" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAtLeast" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeExactly" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWithin" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSameDateAs" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameDateAs" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.DateTimeOffset[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.DateTimeOffset&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Nullable`1&lt;System.DateTimeOffset&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeOffsetRangeAssertions`1" filename="/_/Src/FluentAssertions/Primitives/DateTimeOffsetRangeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TAssertions,System.Nullable`1&lt;System.DateTimeOffset&gt;,FluentAssertions.Primitives.TimeSpanCondition,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Before" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="After" signature="(System.DateTimeOffset,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PositionRelativeToTarget" signature="(System.DateTimeOffset,System.DateTimeOffset)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.DateTimeRangeAssertions`1" filename="/_/Src/FluentAssertions/Primitives/DateTimeRangeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TAssertions,System.Nullable`1&lt;System.DateTime&gt;,FluentAssertions.Primitives.TimeSpanCondition,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Before" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="After" signature="(System.DateTime,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PositionRelativeToTarget" signature="(System.DateTime,System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.EnumAssertions`1" filename="/_/Src/FluentAssertions/Primitives/EnumAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.EnumAssertions`2" filename="/_/Src/FluentAssertions/Primitives/EnumAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;TEnum&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(TEnum,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;TEnum&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(TEnum,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;TEnum&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDefined" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDefined" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.Decimal,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameValueAs" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameValueAs" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveSameNameAs" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveSameNameAs" signature="(T,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveFlag" signature="(TEnum,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveFlag" signature="(TEnum,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Nullable`1&lt;TEnum&gt;,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(TEnum[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;TEnum&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValue" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetName" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.GuidAssertions" filename="/_/Src/FluentAssertions/Primitives/GuidAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.GuidAssertions`1" filename="/_/Src/FluentAssertions/Primitives/GuidAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Guid,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Guid,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.HttpResponseMessageAssertions" filename="/_/Src/FluentAssertions/Primitives/HttpResponseMessageAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Net.Http.HttpResponseMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.HttpResponseMessageAssertions`1" filename="/_/Src/FluentAssertions/Primitives/HttpResponseMessageAssertions.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Net.Http.HttpResponseMessage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSuccessful" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeRedirection" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveError" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveClientError" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveServerError" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveStatusCode" signature="(System.Net.HttpStatusCode,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveStatusCode" signature="(System.Net.HttpStatusCode,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsServerError" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="IsClientError" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NegatedStringStartValidator" filename="/_/Src/FluentAssertions/Primitives/NegatedStringStartValidator.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="ExpectationDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.StringComparison,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstMismatch" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableBooleanAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableBooleanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableBooleanAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableBooleanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Nullable`1&lt;System.Boolean&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeFalse" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeTrue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableDateTimeAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableDateTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableDateTimeAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableDateTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTime&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableDateTimeOffsetAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableDateTimeOffsetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableDateTimeOffsetAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableDateTimeOffsetAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.DateTimeOffset&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableEnumAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableEnumAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;TEnum&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableEnumAssertions`2" filename="/_/Src/FluentAssertions/Primitives/NullableEnumAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;TEnum&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableGuidAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableGuidAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableGuidAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableGuidAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.Guid&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.Guid&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions" filename="/_/Src/FluentAssertions/Primitives/NullableSimpleTimeSpanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions`1" filename="/_/Src/FluentAssertions/Primitives/NullableSimpleTimeSpanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveValue" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Nullable`1&lt;System.TimeSpan&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.ObjectAssertions" filename="/_/Src/FluentAssertions/Primitives/ObjectAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.ObjectAssertions`2" filename="/_/Src/FluentAssertions/Primitives/ObjectAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(TExpectation,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(TExpectation,System.Func`2&lt;FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1&lt;TExpectation&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(TSubject[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;TSubject&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.ReferenceTypeAssertions`2" filename="/_/Src/FluentAssertions/Primitives/ReferenceTypeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNull" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSameAs" signature="(TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSameAs" signature="(TSubject,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOfType" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOfType" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeOfType" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TSubject,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.SimpleTimeSpanAssertions" filename="/_/Src/FluentAssertions/Primitives/SimpleTimeSpanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.SimpleTimeSpanAssertions`1" filename="/_/Src/FluentAssertions/Primitives/SimpleTimeSpanAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Nullable`1&lt;System.TimeSpan&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BePositive" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNegative" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThanOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThan" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThanOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeCloseTo" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringAssertions" filename="/_/Src/FluentAssertions/Primitives/StringAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringAssertions`1" filename="/_/Src/FluentAssertions/Primitives/StringAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeOneOf" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Match" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotMatch" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotMatchEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRegex" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRegex" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRegex" signature="(System.Text.RegularExpressions.Regex,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchRegex" signature="(System.Text.RegularExpressions.Regex,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotMatchRegex" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotMatchRegex" signature="(System.Text.RegularExpressions.Regex,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWith" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotStartWith" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWithEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotStartWithEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWith" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEndWith" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndWithEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotEndWithEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contain" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainEquivalentOf" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainAll" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainAll" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainAny" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainAny" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContain" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainAll" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainAll" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainAny" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainAny" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotContainEquivalentOf" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveLength" signature="(System.Int32,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNullOrEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNullOrEmpty" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeNullOrWhiteSpace" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeNullOrWhiteSpace" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeUpperCased" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeUpperCased" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLowerCased" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeLowerCased" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfValuesNullOrEmpty" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringEqualityValidator" filename="/_/Src/FluentAssertions/Primitives/StringEqualityValidator.cs" line-rate="1" branch-rate="1" complexity="8">
          <methods>
            <method name="ExpectationDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.StringComparison,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstSuperfluousWhitespace" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ValidateAgainstLengthDifferences" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetMismatchSegmentForStringsOfDifferentLengths" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ValidateAgainstMismatch" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringStartValidator" filename="/_/Src/FluentAssertions/Primitives/StringStartValidator.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="ExpectationDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.StringComparison,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstLengthDifferences" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ValidateAgainstMismatch" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringValidator" filename="/_/Src/FluentAssertions/Primitives/StringValidator.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expected" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assertion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Assertion" signature="(FluentAssertions.Execution.IAssertionScope)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Validate" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="ValidateAgainstNulls" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="IsLongOrMultiline" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstSuperfluousWhitespace" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ValidateAgainstLengthDifferences" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.StringWildcardMatchingValidator" filename="/_/Src/FluentAssertions/Primitives/StringWildcardMatchingValidator.cs" line-rate="1" branch-rate="1" complexity="8">
          <methods>
            <method name="ExpectationDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Negate" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Negate" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreCase" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreNewLineDifferences" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IgnoreNewLineDifferences" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateAgainstMismatch" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="IsMatch" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ConvertWildcardToRegEx" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CleanNewLines" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Primitives.TimeSpanPredicate" filename="/_/Src/FluentAssertions/Primitives/TimeSpanPredicate.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="DisplayText" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`3&lt;System.TimeSpan,System.TimeSpan,System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatchedBy" signature="(System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Reflection.AssemblyAssertions" filename="/_/Src/FluentAssertions/Specialized/AssemblyAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReference" signature="(System.Reflection.Assembly,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reference" signature="(System.Reflection.Assembly,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefineType" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.ActionAssertions" filename="/_/Src/FluentAssertions/Specialized/ActionAssertions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeSubject" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.AsyncFunctionAssertions`2" filename="/_/Src/FluentAssertions/Specialized/AsyncFunctionAssertions.cs" line-rate="1" branch-rate="1" complexity="70">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;TTask&gt;,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;TTask&gt;,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertThrows" signature="(System.Exception,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfterAsync" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeWithTimer" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="&gt;c__DisplayClass13_0/&lt;&lt;NotThrowAfterAsync" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="CompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="CompletesWithinTimeoutAsync" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="InvokeWithInterceptionAsync" signature="()" line-rate="1" branch-rate="1" complexity="10">
              <lines />
            </method>
            <method name="InvokeWithInterceptionAsync" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="NotCompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="NotThrowAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="NotThrowAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="ThrowAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ThrowExactlyAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ThrowWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.DelegateAssertions`2" filename="/_/Src/FluentAssertions/Specialized/DelegateAssertions.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name=".ctor" signature="(TDelegate,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDelegate,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throw" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrow" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrow" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowExactly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfter" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeSubjectWithInterception" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="FailIfSubjectIsAsyncVoid" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.DelegateAssertionsBase`2" filename="/_/Src/FluentAssertions/Specialized/DelegateAssertionsBase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Extractor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TDelegate,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowInternal" signature="(System.Exception,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowInternal" signature="(System.Exception,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowInternal" signature="(System.Exception,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.ExceptionAssertions`1" filename="/_/Src/FluentAssertions/Specialized/ExceptionAssertions.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="And" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Which" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SingleSubject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithMessage" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithInnerException" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithInnerException" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithInnerExceptionExactly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithInnerExceptionExactly" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TException,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertInnerExceptionExactly" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertInnerExceptions" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BuildExceptionsString" signature="(System.Collections.Generic.IEnumerable`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Context" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Execute" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.ExecutionTime" filename="/_/Src/FluentAssertions/Specialized/ExecutionTime.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="ElapsedTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRunning" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRunning" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ActionDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Task" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action,System.String,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;,System.String,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="&gt;c__DisplayClass4_0/&lt;&lt;-ctor" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.ExecutionTimeAssertions" filename="/_/Src/FluentAssertions/Specialized/ExecutionTimeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(FluentAssertions.Specialized.ExecutionTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PollUntil" signature="(System.Func`2&lt;System.TimeSpan,System.Boolean&gt;,System.Boolean,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThanOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeLessThan" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThanOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterOrEqualTo" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeGreaterThan" signature="(System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeCloseTo" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.FunctionAssertionHelpers" filename="/_/Src/FluentAssertions/Specialized/FunctionAssertionHelpers.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="NotThrow" signature="(System.Func`1&lt;T&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfter" signature="(System.Func`1&lt;TResult&gt;,FluentAssertions.Common.IClock,System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.FunctionAssertions`1" filename="/_/Src/FluentAssertions/Specialized/FunctionAssertions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;T&gt;,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;T&gt;,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokeSubject" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NotThrow" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfter" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.GenericAsyncFunctionAssertions`1" filename="/_/Src/FluentAssertions/Specialized/GenericAsyncFunctionAssertions.cs" line-rate="1" branch-rate="1" complexity="23">
          <methods>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotThrowAfterAsync" signature="(System.TimeSpan,System.TimeSpan,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="&gt;c__DisplayClass4_0/&lt;&lt;NotThrowAfterAsync" signature="()" line-rate="1" branch-rate="1" complexity="11">
              <lines />
            </method>
            <method name="CompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="NotThrowAsync" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.MemberExecutionTime`1" filename="/_/Src/FluentAssertions/Specialized/MemberExecutionTime.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(T,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,FluentAssertions.Common.StartTimer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.NonGenericAsyncFunctionAssertions" filename="/_/Src/FluentAssertions/Specialized/NonGenericAsyncFunctionAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;,FluentAssertions.Specialized.IExtractExceptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Threading.Tasks.Task&gt;,FluentAssertions.Specialized.IExtractExceptions,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.TaskCompletionSourceAssertions`1" filename="/_/Src/FluentAssertions/Specialized/TaskCompletionSourceAssertions.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name=".ctor" signature="(System.Threading.Tasks.TaskCompletionSource`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Threading.Tasks.TaskCompletionSource`1&lt;T&gt;,FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="NotCompleteWithinAsync" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Specialized.TaskCompletionSourceAssertionsBase" filename="/_/Src/FluentAssertions/Specialized/TaskCompletionSourceAssertionsBase.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="Clock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Common.IClock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompletesWithinTimeoutAsync" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Streams.BufferedStreamAssertions" filename="/_/Src/FluentAssertions/Streams/BufferedStreamAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.IO.BufferedStream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Streams.BufferedStreamAssertions`1" filename="/_/Src/FluentAssertions/Streams/BufferedStreamAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.IO.BufferedStream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Streams.StreamAssertions" filename="/_/Src/FluentAssertions/Streams/StreamAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.IO.Stream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Streams.StreamAssertions`2" filename="/_/Src/FluentAssertions/Streams/StreamAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSeekable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSeekable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeReadable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeReadable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HavePosition" signature="(System.Int64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHavePosition" signature="(System.Int64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveLength" signature="(System.Int64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveLength" signature="(System.Int64,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeReadOnly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeReadOnly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWriteOnly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeWriteOnly" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.TypeEnumerableExtensions" filename="/_/Src/FluentAssertions/TypeEnumerableExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ThatAreDecoratedWith" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreDecoratedWithOrInherit" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWith" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWithOrInherit" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreInNamespace" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreUnderNamespace" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatDeriveFrom" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatImplement" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreClasses" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotClasses" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreStatic" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotStatic" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatSatisfy" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.Func`2&lt;System.Type,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapTaskTypes" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapEnumerableTypes" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.TypeExtensions" filename="/_/Src/FluentAssertions/TypeExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Types" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Types" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Types" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Methods" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Methods" signature="(FluentAssertions.Types.TypeSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="(FluentAssertions.Types.TypeSelector)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.AllTypes" filename="/_/Src/FluentAssertions/Types/AllTypes.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="From" signature="(System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.ConstructorInfoAssertions" filename="/_/Src/FluentAssertions/Types/ConstructorInfoAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SubjectDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.ConstructorInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionFor" signature="(System.Reflection.ConstructorInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MemberInfoAssertions`2" filename="/_/Src/FluentAssertions/Types/MemberInfoAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubjectDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MethodBaseAssertions`2" filename="/_/Src/FluentAssertions/Types/MethodBaseAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAccessModifier" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveAccessModifier" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterString" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MethodInfoAssertions" filename="/_/Src/FluentAssertions/Types/MethodInfoAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SubjectDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAsync" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAsync" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnVoid" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturnVoid" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturn" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturn" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionFor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MethodInfoSelector" filename="/_/Src/FluentAssertions/Types/MethodInfoSelector.cs" line-rate="1" branch-rate="1" complexity="33">
          <methods>
            <method name="ThatArePublicOrInternal" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatReturnVoid" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatDoNotReturnVoid" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatReturn" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatDoNotReturn" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreAbstract" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotAbstract" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreAsync" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotAsync" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreStatic" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotStatic" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreVirtual" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotVirtual" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ReturnTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HasSpecialName" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.MethodInfoSelectorAssertions" filename="/_/Src/FluentAssertions/Types/MethodInfoSelectorAssertions.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="SubjectMethods" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Context" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.MethodInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAllNonVirtualMethodsFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAllVirtualMethodsFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="BeAsync" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAsync" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodsWithout" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodsWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionsFor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MethodInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.PropertyInfoAssertions" filename="/_/Src/FluentAssertions/Types/PropertyInfoAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SubjectDescription" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWritable" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeReadable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeReadable" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeReadable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturn" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotReturn" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionFor" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.PropertyInfoSelector" filename="/_/Src/FluentAssertions/Types/PropertyInfoSelector.cs" line-rate="1" branch-rate="1" complexity="17">
          <methods>
            <method name="ThatArePublicOrInternal" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreAbstract" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotAbstract" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreStatic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotStatic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreVirtual" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotVirtual" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="OfType" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="NotOfType" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ReturnTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.PropertyInfoSelectorAssertions" filename="/_/Src/FluentAssertions/Types/PropertyInfoSelectorAssertions.cs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="SubjectProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Context" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.PropertyInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeVirtual" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeWritable" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAllReadOnlyPropertiesFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAllWritablePropertiesFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAllNonVirtualPropertiesFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAllVirtualPropertiesFromSelection" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPropertiesWithout" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetPropertiesWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetDescriptionsFor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.PropertyInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.TypeAssertions" filename="/_/Src/FluentAssertions/Types/TypeAssertions.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAssignableTo" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAssignableTo" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFailureMessageIfTypesAreDifferent" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWithOrInherit" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWithOrInherit" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWithOrInherit" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWithOrInherit" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Implement" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Implement" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotImplement" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotImplement" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDerivedFrom" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDerivedFrom" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDerivedFrom" signature="(System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDerivedFrom" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSealed" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSealed" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeAbstract" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeAbstract" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeStatic" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeStatic" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveProperty" signature="(System.Type,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveProperty" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveProperty" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitProperty" signature="(System.Type,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitProperty" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitProperty" signature="(System.Type,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitProperty" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitMethod" signature="(System.Type,System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitMethod" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitMethod" signature="(System.Type,System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitMethod" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveIndexer" signature="(System.Type,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveIndexer" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveMethod" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveMethod" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveConstructor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveDefaultConstructor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveConstructor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveDefaultConstructor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterString" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAccessModifier" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveAccessModifier" signature="(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveImplicitConversionOperator" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveImplicitConversionOperator" signature="(System.Type,System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveImplicitConversionOperator" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveImplicitConversionOperator" signature="(System.Type,System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitConversionOperator" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveExplicitConversionOperator" signature="(System.Type,System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitConversionOperator" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotHaveExplicitConversionOperator" signature="(System.Type,System.Type,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssertThatSubjectIsClass" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.TypeSelector" filename="/_/Src/FluentAssertions/Types/TypeSelector.cs" line-rate="1" branch-rate="1" complexity="52">
          <methods>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ThatDeriveFrom" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatDoNotDeriveFrom" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatImplement" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatDoNotImplement" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWith" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotDecoratedWithOrInherit" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreInNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotInNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreUnderNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreNotUnderNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThatAreValueTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotValueTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreClasses" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotClasses" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreAbstract" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotAbstract" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreSealed" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotSealed" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreStatic" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatAreNotStatic" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ThatSatisfy" signature="(System.Func`2&lt;System.Type,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnwrapTaskTypes" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="UnwrapEnumerableTypes" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Types.TypeSelectorAssertions" filename="/_/Src/FluentAssertions/Types/TypeSelectorAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Subject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWithOrInherit" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeDecoratedWithOrInherit" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWith" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWithOrInherit" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeDecoratedWithOrInherit" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAttribute,System.Boolean&gt;&gt;,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeSealed" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeSealed" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeInNamespace" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeInNamespace" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeUnderNamespace" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeUnderNamespace" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionsFor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDescriptionFor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.AttributeData" filename="/_/Src/FluentAssertions/Xml/Equivalency/AttributeData.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="NamespaceUri" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LocalName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Prefix" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QualifiedName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.Failure" filename="/_/Src/FluentAssertions/Xml/Equivalency/Failure.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FormatString" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatParams" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.Node" filename="/_/Src/FluentAssertions/Xml/Equivalency/Node.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name="Parent" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateRoot" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(FluentAssertions.Xml.Equivalency.Node,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXPath" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Push" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pop" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AddChildNode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPath" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.XmlIterator" filename="/_/Src/FluentAssertions/Xml/Equivalency/XmlIterator.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="NodeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LocalName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NamespaceUri" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmptyElement" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEndOfDocument" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlReader)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Read" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="MoveToEndElement" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetAttributes" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.Equivalency.XmlReaderValidator" filename="/_/Src/FluentAssertions/Xml/Equivalency/XmlReaderValidator.cs" line-rate="1" branch-rate="1" complexity="34">
          <methods>
            <method name=".ctor" signature="(System.Xml.XmlReader,System.Xml.XmlReader,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Validate" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Validate" signature="()" line-rate="1" branch-rate="1" complexity="21">
              <lines />
            </method>
            <method name="ValidateAttributes" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="ValidateStartElement" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ValidateText" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ValidateAgainstNulls" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XAttributeAssertions" filename="/_/Src/FluentAssertions/Xml/XAttributeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XAttribute)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Xml.Linq.XAttribute,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Xml.Linq.XAttribute,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XDocumentAssertions" filename="/_/Src/FluentAssertions/Xml/XDocumentAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Xml.Linq.XDocument,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Xml.Linq.XDocument,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Xml.Linq.XDocument,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Xml.Linq.XDocument,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveRoot" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveRoot" signature="(System.Xml.Linq.XName,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.Xml.Linq.XName,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.Xml.Linq.XName,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XElementAssertions" filename="/_/Src/FluentAssertions/Xml/XElementAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Be" signature="(System.Xml.Linq.XElement,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBe" signature="(System.Xml.Linq.XElement,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Xml.Linq.XElement,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Xml.Linq.XElement,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveValue" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAttribute" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAttribute" signature="(System.Xml.Linq.XName,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.Xml.Linq.XName,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.Xml.Linq.XName,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,FluentAssertions.OccurrenceConstraint,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XmlElementAssertions" filename="/_/Src/FluentAssertions/Xml/XmlElementAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveInnerText" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAttribute" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveAttributeWithNamespace" signature="(System.String,System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElement" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HaveElementWithNamespace" signature="(System.String,System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XmlNodeAssertions" filename="/_/Src/FluentAssertions/Xml/XmlNodeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XmlNodeAssertions`2" filename="/_/Src/FluentAssertions/Xml/XmlNodeAssertions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Identifier" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TSubject)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BeEquivalentTo" signature="(System.Xml.XmlNode,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotBeEquivalentTo" signature="(System.Xml.XmlNode,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.Xml.XmlNodeFormatter" filename="/_/Src/FluentAssertions/Xml/XmlNodeFormatter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanHandle" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Format" signature="(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="FluentAssertions.XmlAssertionExtensions" filename="/_/Src/FluentAssertions/Xml/XmlAssertionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Should" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Should" signature="(System.Xml.XmlElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Members" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Members" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Syntax" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Index" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Index.g.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Start" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="End" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFromEnd" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromStart" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromEnd" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOffset" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Index)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Implicit" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToStringFromEnd" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ThrowValueArgumentOutOfRange_NeedNonNegNumException" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Range" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Range.g.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Start" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="End" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="All" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Index,System.Index)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Range)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="StartAt" signature="(System.Index)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndAt" signature="(System.Index)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOffsetAndLength" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Combine" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowArgumentOutOfRangeException" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FeatureName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOptional" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOptional" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.g.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.CompilerServices.ModuleInitializerAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.CompilerServices.ModuleInitializerAttribute.g.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" filename="/_/Src/FluentAssertions/PolySharp.SourceGenerators/PolySharp.SourceGenerators.PolyfillsGenerator/System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.g.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Url" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Url" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.SystemExtensions" filename="/_/Src/FluentAssertions/SystemExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IndexOf" signature="(System.String,System.Char,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Replace" signature="(System.String,System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.String,System.String,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(System.String,System.Char,System.StringComparison)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartsWith" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="System.Text.StringBuilderExtensions" filename="/_/Src/FluentAssertions/StringBuilderExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AppendLine" signature="(System.Text.StringBuilder,System.IFormatProvider,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendJoin" signature="(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="MethodsNUnitTests" line-rate="1" branch-rate="0.5" complexity="18">
      <classes>
        <class name="NumericMethodsLab1.Tests.MethodsTests" filename="D:\c#\NumericMethodsLab1\MethodsNUnitTests\MethodsTests.cs" line-rate="1" branch-rate="0.5" complexity="17">
          <methods>
            <method name="BeforeEach" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="23" hits="16" branch="false" />
                <line number="24" hits="16" branch="false" />
                <line number="25" hits="16" branch="false" />
                <line number="26" hits="16" branch="false" />
                <line number="27" hits="16" branch="false" />
              </lines>
            </method>
            <method name="Function_ValidInput_Calculation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="32" hits="1" branch="false" />
                <line number="33" hits="1" branch="false" />
                <line number="34" hits="1" branch="false" />
                <line number="36" hits="1" branch="false" />
                <line number="38" hits="1" branch="false" />
                <line number="39" hits="1" branch="false" />
              </lines>
            </method>
            <method name="Function_ValidInput_PositiveResult" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="44" hits="1" branch="false" />
                <line number="45" hits="1" branch="false" />
                <line number="47" hits="1" branch="false" />
                <line number="49" hits="1" branch="false" />
                <line number="50" hits="1" branch="false" />
              </lines>
            </method>
            <method name="FunctionDer_ValidInput_Calculation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="55" hits="1" branch="false" />
                <line number="56" hits="1" branch="false" />
                <line number="57" hits="1" branch="false" />
                <line number="59" hits="1" branch="false" />
                <line number="61" hits="1" branch="false" />
                <line number="62" hits="1" branch="false" />
              </lines>
            </method>
            <method name="FunctionDer2_ValidInput_Calculation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="67" hits="1" branch="false" />
                <line number="68" hits="1" branch="false" />
                <line number="69" hits="1" branch="false" />
                <line number="71" hits="1" branch="false" />
                <line number="73" hits="1" branch="false" />
                <line number="74" hits="1" branch="false" />
              </lines>
            </method>
            <method name="FiFunc_ValidInput_Calculation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="79" hits="1" branch="false" />
                <line number="80" hits="1" branch="false" />
                <line number="81" hits="1" branch="false" />
                <line number="83" hits="1" branch="false" />
                <line number="85" hits="1" branch="false" />
                <line number="86" hits="1" branch="false" />
              </lines>
            </method>
            <method name="FiFuncDer_ValidInput_Calculation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="91" hits="1" branch="false" />
                <line number="92" hits="1" branch="false" />
                <line number="93" hits="1" branch="false" />
                <line number="95" hits="1" branch="false" />
                <line number="97" hits="1" branch="false" />
                <line number="98" hits="1" branch="false" />
              </lines>
            </method>
            <method name="CheckFI_ValidInput_ExpectedResult" signature="(System.Double,System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="105" hits="2" branch="false" />
                <line number="106" hits="2" branch="false" />
                <line number="108" hits="2" branch="false" />
                <line number="109" hits="2" branch="false" />
              </lines>
            </method>
            <method name="SimpleIteration_InvalidFiFunction_Exception" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="114" hits="1" branch="false" />
                <line number="115" hits="1" branch="false" />
                <line number="117" hits="2" branch="false" />
                <line number="118" hits="1" branch="false" />
              </lines>
            </method>
            <method name="SimpleIteration_ValidInput_ReturnX" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="123" hits="1" branch="false" />
                <line number="124" hits="1" branch="false" />
                <line number="126" hits="1" branch="false" />
                <line number="128" hits="1" branch="false" />
                <line number="129" hits="1" branch="false" />
              </lines>
            </method>
            <method name="Dichotomy_ValidInput_ReturnX" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="134" hits="1" branch="false" />
                <line number="135" hits="1" branch="false" />
                <line number="137" hits="1" branch="false" />
                <line number="139" hits="1" branch="false" />
                <line number="140" hits="1" branch="false" />
              </lines>
            </method>
            <method name="MNewtonMethod_ValidInput_ReturnX" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="145" hits="1" branch="false" />
                <line number="146" hits="1" branch="false" />
                <line number="148" hits="1" branch="false" />
                <line number="150" hits="1" branch="false" />
                <line number="151" hits="1" branch="false" />
              </lines>
            </method>
            <method name="APrioriDichotomy_ValidInput_ExpectedResult" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="158" hits="1" branch="false" />
                <line number="159" hits="1" branch="false" />
                <line number="161" hits="1" branch="false" />
                <line number="163" hits="1" branch="false" />
                <line number="164" hits="1" branch="false" />
              </lines>
            </method>
            <method name="AprioriSI_ValidInput_ExpectedResult" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="169" hits="1" branch="false" />
                <line number="170" hits="1" branch="false" />
                <line number="171" hits="1" branch="false" />
                <line number="172" hits="1" branch="false" />
                <line number="174" hits="1" branch="false" />
                <line number="176" hits="1" branch="false" />
                <line number="177" hits="1" branch="false" />
              </lines>
            </method>
            <method name="AllRoots_FluentAssertions" signature="()" line-rate="1" branch-rate="0.5" complexity="2">
              <lines>
                <line number="183" hits="1" branch="false" />
                <line number="184" hits="1" branch="false" />
                <line number="185" hits="1" branch="false" />
                <line number="186" hits="5" branch="true" condition-coverage="50% (2/4)" />
                <line number="187" hits="1" branch="false" />
              </lines>
            </method>
            <method name="KindsOfFunction_FluentAssertions" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="192" hits="1" branch="false" />
                <line number="193" hits="1" branch="false" />
                <line number="194" hits="1" branch="false" />
                <line number="195" hits="1" branch="false" />
                <line number="196" hits="1" branch="false" />
                <line number="198" hits="1" branch="false" />
              </lines>
            </method>
            <method name="AfterAll" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="202" hits="1" branch="false" />
                <line number="203" hits="1" branch="false" />
                <line number="204" hits="1" branch="false" />
                <line number="205" hits="1" branch="false" />
                <line number="206" hits="1" branch="false" />
                <line number="207" hits="1" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="23" hits="16" branch="false" />
            <line number="24" hits="16" branch="false" />
            <line number="25" hits="16" branch="false" />
            <line number="26" hits="16" branch="false" />
            <line number="27" hits="16" branch="false" />
            <line number="32" hits="1" branch="false" />
            <line number="33" hits="1" branch="false" />
            <line number="34" hits="1" branch="false" />
            <line number="36" hits="1" branch="false" />
            <line number="38" hits="1" branch="false" />
            <line number="39" hits="1" branch="false" />
            <line number="44" hits="1" branch="false" />
            <line number="45" hits="1" branch="false" />
            <line number="47" hits="1" branch="false" />
            <line number="49" hits="1" branch="false" />
            <line number="50" hits="1" branch="false" />
            <line number="55" hits="1" branch="false" />
            <line number="56" hits="1" branch="false" />
            <line number="57" hits="1" branch="false" />
            <line number="59" hits="1" branch="false" />
            <line number="61" hits="1" branch="false" />
            <line number="62" hits="1" branch="false" />
            <line number="67" hits="1" branch="false" />
            <line number="68" hits="1" branch="false" />
            <line number="69" hits="1" branch="false" />
            <line number="71" hits="1" branch="false" />
            <line number="73" hits="1" branch="false" />
            <line number="74" hits="1" branch="false" />
            <line number="79" hits="1" branch="false" />
            <line number="80" hits="1" branch="false" />
            <line number="81" hits="1" branch="false" />
            <line number="83" hits="1" branch="false" />
            <line number="85" hits="1" branch="false" />
            <line number="86" hits="1" branch="false" />
            <line number="91" hits="1" branch="false" />
            <line number="92" hits="1" branch="false" />
            <line number="93" hits="1" branch="false" />
            <line number="95" hits="1" branch="false" />
            <line number="97" hits="1" branch="false" />
            <line number="98" hits="1" branch="false" />
            <line number="105" hits="2" branch="false" />
            <line number="106" hits="2" branch="false" />
            <line number="108" hits="2" branch="false" />
            <line number="109" hits="2" branch="false" />
            <line number="114" hits="1" branch="false" />
            <line number="115" hits="1" branch="false" />
            <line number="117" hits="2" branch="false" />
            <line number="118" hits="1" branch="false" />
            <line number="123" hits="1" branch="false" />
            <line number="124" hits="1" branch="false" />
            <line number="126" hits="1" branch="false" />
            <line number="128" hits="1" branch="false" />
            <line number="129" hits="1" branch="false" />
            <line number="134" hits="1" branch="false" />
            <line number="135" hits="1" branch="false" />
            <line number="137" hits="1" branch="false" />
            <line number="139" hits="1" branch="false" />
            <line number="140" hits="1" branch="false" />
            <line number="145" hits="1" branch="false" />
            <line number="146" hits="1" branch="false" />
            <line number="148" hits="1" branch="false" />
            <line number="150" hits="1" branch="false" />
            <line number="151" hits="1" branch="false" />
            <line number="158" hits="1" branch="false" />
            <line number="159" hits="1" branch="false" />
            <line number="161" hits="1" branch="false" />
            <line number="163" hits="1" branch="false" />
            <line number="164" hits="1" branch="false" />
            <line number="169" hits="1" branch="false" />
            <line number="170" hits="1" branch="false" />
            <line number="171" hits="1" branch="false" />
            <line number="172" hits="1" branch="false" />
            <line number="174" hits="1" branch="false" />
            <line number="176" hits="1" branch="false" />
            <line number="177" hits="1" branch="false" />
            <line number="183" hits="1" branch="false" />
            <line number="184" hits="1" branch="false" />
            <line number="185" hits="1" branch="false" />
            <line number="186" hits="5" branch="true" condition-coverage="50% (2/4)" />
            <line number="187" hits="1" branch="false" />
            <line number="192" hits="1" branch="false" />
            <line number="193" hits="1" branch="false" />
            <line number="194" hits="1" branch="false" />
            <line number="195" hits="1" branch="false" />
            <line number="196" hits="1" branch="false" />
            <line number="198" hits="1" branch="false" />
            <line number="202" hits="1" branch="false" />
            <line number="203" hits="1" branch="false" />
            <line number="204" hits="1" branch="false" />
            <line number="205" hits="1" branch="false" />
            <line number="206" hits="1" branch="false" />
            <line number="207" hits="1" branch="false" />
          </lines>
        </class>
      </classes>
    </package>
    <package name="NUnit3.TestAdapter" line-rate="0.426532973389896" branch-rate="0.235385814497272" complexity="1088">
      <classes>
        <class name="NUnit.VisualStudio.TestAdapter.AdapterSettings" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\AdapterSettings.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="MaxCpuCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxCpuCount" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResultsDirectory" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResultsDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetPlatform" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetPlatform" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFrameworkVersion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TargetFrameworkVersion" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAdapterPaths" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAdapterPaths" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectSourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectSourceInformation" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableAppDomain" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableAppDomain" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelization" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisableParallelization" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DesignMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DesignMode" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestProperties" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalTraceLevel" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalTraceLevel" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalTraceLevelEnum" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalTraceLevelEnum" signature="(NUnit.Engine.InternalTraceLevel)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkDirectory" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputXml" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputXml" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseTestOutputXml" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OutputXmlFolderMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OutputXmlFolderMode" signature="(NUnit.VisualStudio.TestAdapter.OutputXmlFolderMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputFolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputFolder" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewOutputXmlFileForEachRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewOutputXmlFileForEachRun" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTimeout" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTimeout" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NumberOfTestWorkers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NumberOfTestWorkers" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopyFiles" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShadowCopyFiles" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verbosity" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verbosity" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseVsKeepEngineRunning" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseVsKeepEngineRunning" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BasePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BasePath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrivateBinPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrivateBinPath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RandomSeed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RandomSeed" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RandomSeedSpecified" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RandomSeedSpecified" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectDataForEachTestSeparately" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectDataForEachTestSeparately" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InProcDataCollectorsAvailable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InProcDataCollectorsAvailable" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronousEvents" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronousEvents" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DomainUsage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DomainUsage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShowInternalProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShowInternalProperties" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseParentFQNForParametrizedTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseParentFQNForParametrizedTests" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseNUnitIdforTestCaseId" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseNUnitIdforTestCaseId" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleOut" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleOut" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnError" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StopOnError" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoveryMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DiscoveryMethod" signature="(NUnit.VisualStudio.TestAdapter.DiscoveryMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipNonTestAssemblies" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipNonTestAssemblies" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblySelectLimit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblySelectLimit" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseNUnitFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseNUnitFilter" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludeStackTraceForSuites" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncludeStackTraceForSuites" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestCategoryType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestCategoryType" signature="(NUnit.VisualStudio.TestAdapter.VsTestCategoryType)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTestNamePattern" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTestNamePattern" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreFilter" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapWarningTo" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapWarningTo" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseTestNameInConsoleOutput" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UseTestNameInConsoleOutput" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DisplayName" signature="(NUnit.VisualStudio.TestAdapter.DisplayNameOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullnameSeparator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullnameSeparator" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExplicitMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExplicitMode" signature="(NUnit.VisualStudio.TestAdapter.ExplicitModeEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipExecutionWhenNoTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipExecutionWhenNoTests" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpXmlTestDiscovery" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpXmlTestDiscovery" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpXmlTestResults" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpXmlTestResults" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVsInput" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVsInput" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FreakMode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FreakMode" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Debug" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Debug" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugExecution" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugExecution" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugDiscovery" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugDiscovery" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsureAttachmentFileScheme" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsureAttachmentFileScheme" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Load" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,NUnit.VisualStudio.TestAdapter.TestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Load" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseOutputXml" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetTestOutputFolder" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractNUnitDiagnosticSettings" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseInternalTraceLevel" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateTestProperties" signature="(System.Xml.XmlDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractRunConfiguration" signature="(System.Xml.XmlDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapTestCategory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapDisplayName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SaveRandomSeed" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RestoreRandomSeed" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateNumberOfTestWorkers" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="GetInnerTextWithLog" signature="(System.Xml.XmlNode,System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerText" signature="(System.Xml.XmlNode,System.String,System.Boolean,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerTextAsInt" signature="(System.Xml.XmlNode,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerTextAsNullableInt" signature="(System.Xml.XmlNode,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInnerTextAsBool" signature="(System.Xml.XmlNode,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log" signature="(System.String,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapWarningOutcome" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapEnum" signature="(System.String,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.CategoryList" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\CategoryList.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="LastNodeListCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LastNodeListCount" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddRange" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProcessTestCaseProperties" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestCasePropertyInfo,System.Boolean,System.String,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInternalProperty" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTraitsToCache" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCachedInfo" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UpdateCategoriesToVs" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Dump.DumpXml" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Dump\DumpXml.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.String,NUnit.VisualStudio.TestAdapter.Dump.IFile)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dump2File" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnsurePathExist" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpForDiscovery" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DumpForExecution" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="RandomName" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AddTestEvent" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVSInputFilter" signature="(NUnit.Engine.TestFilter,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVSInput" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpVSInput2NUnit" signature="(NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DumpFromVSInput" signature="(System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,NUnit.Engine.TestFilter,NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartDiscoveryInExecution" signature="(System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,NUnit.Engine.TestFilter,NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartExecution" signature="(NUnit.Engine.TestFilter,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDump" signature="(System.String,System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Dump.File" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Dump\DumpXml.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WriteAllText" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DirectoryExist" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Dump.XmlNodeExtension" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Dump\XmlNodeExtension.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AsString" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Execution" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="TestOutputXmlFolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestLog" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Settings" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dump" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitEngineAdapter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.IExecutionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter,NUnit.VisualStudio.TestAdapter.NUnit3TestExecutor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestFilterBuilder" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateConverter" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.ExecutionFactory" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Create" signature="(NUnit.VisualStudio.TestAdapter.IExecutionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.IdeExecution" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.IExecutionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilterInCurrentMode" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Internal.StringExtensions" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Internal\Extensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsNullOrWhiteSpace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Internal.TimingLogger" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Internal\TimingLogger.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Stopwatch" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings,NUnit.VisualStudio.TestAdapter.ITestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReStart" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="LogTime" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Metadata.AppDomainMetadataProvider" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Metadata\AppDomainMetadataProvider.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHelper" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetDeclaringType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStateMachineType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDeclaringType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStateMachineType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Metadata.DirectReflectionMetadataProvider" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Metadata\DirectReflectionMetadataProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="GetDeclaringType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStateMachineType" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetSingleMethod" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Metadata.TypeInfo" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Metadata\TypeInfo.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AssemblyPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NavigationData" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NavigationData.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="FilePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LineNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsValid" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NavigationDataProvider" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NavigationDataProvider.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.String,NUnit.VisualStudio.TestAdapter.ITestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMetadataProvider" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,NUnit.VisualStudio.TestAdapter.ITestLogger,NUnit.VisualStudio.TestAdapter.Metadata.IMetadataProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetNavigationData" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoWithBreaker" signature="(System.Func`4&lt;System.String,System.String,System.String,System.Nullable`1&lt;NUnit.VisualStudio.TestAdapter.Metadata.TypeInfo&gt;&gt;,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetSessionData" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetSessionData" signature="(System.Nullable`1&lt;NUnit.VisualStudio.TestAdapter.Metadata.TypeInfo&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NTrait" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TraitsFeature.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NTraitNameComparer" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Equals" signature="(NUnit.VisualStudio.TestAdapter.NTrait,NUnit.VisualStudio.TestAdapter.NTrait)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(NUnit.VisualStudio.TestAdapter.NTrait)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnit3TestDiscoverer" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnit3TestDiscoverer.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="DiscoverTests" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProcessTestCases" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink,NUnit.VisualStudio.TestAdapter.TestConverterForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckIfDebug" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnit3TestExecutor" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnit3TestExecutor.cs" line-rate="1" branch-rate="1" complexity="18">
          <methods>
            <method name="RunType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunType" signature="(NUnit.VisualStudio.TestAdapter.RunType)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunContext" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunContext" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FrameworkHandle" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FrameworkHandle" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestFilter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VsTestFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EngineAdapter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputXmlFolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutputXmlFolder" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dump" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dump" signature="(NUnit.VisualStudio.TestAdapter.Dump.IDumpXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetRunTypeByStrings" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="RunTests" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInProcDataCollectorsSpecifiedWithMultipleAssemblies" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.Cancel" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InitializeForExecution" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunAssembly" signature="(System.String,System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;,NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogActionAndSelection" signature="(System.String,NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RestoreRandomSeed" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestFilterBuilder" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateTestOutputFolder" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="StopRun" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="CheckIfDebug" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\DiscoveryConverter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Properties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Id" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fullname" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunState" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Int32,NUnit.VisualStudio.TestAdapter.NUnitEngine.RunStateEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\DiscoveryConverter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestConverterForXml" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestConverter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestRun" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDiscoveryMethodCurrent" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CurrentTestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TopLevelTestSuite" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicitRun" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfExplicitTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasExplicitTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LoadedTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfLoadedTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyPath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Settings" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestLog" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfLoadedTestCasesAboveLimit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExplicitTestCases" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestLogger,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Convert" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertXml" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestSuite" signature="(System.Xml.Linq.XElement,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractAllFixtures" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestFixtures" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractParameterizedMethodsAndTheories" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestCases" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestCases,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestCase" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestCases,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractGenericTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractSetUpTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractParameterizedTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture,System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestAssembly" signature="(System.Xml.Linq.XElement,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractSuiteBasePropertiesClass" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractTestRun" signature="(System.Xml.Linq.XDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExtractRunState" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryException" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\DiscoveryException.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.Extensions" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\Extensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AllWithEmptyFalse" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Func`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCategoryFilter" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNegativeCategoryFilter" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitAttachment" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FilePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Description" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestCases" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfActualTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestCase" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestSuites" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetUpFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParameterizedFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericFixtures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfActualTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestSuite" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestSuite)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestGenericFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddSetUpFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySetUpFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddParameterizedFixture" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedTestFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericMethod" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedMethod" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsParameterizedMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedTestFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryProperties" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="TheProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllInternal" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySetUpFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySuiteBase" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Id" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunState" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parent" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitDiscoveryProperties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicitReverse" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsParameterizedMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddToAllTestCases" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AllTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunnableTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfExplicitTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestSuiteToAssembly" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestSuite)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddToAllTestCases" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seed" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestCases,System.String,System.String,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestFixture" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParameterizedMethods" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Theories" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoOfActualTestCases" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericMethods" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddParameterizedMethod" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTheory" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTheory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddGenericMethod" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericMethod)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TestAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestAssembly" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExplicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTestAssembly" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestSuite" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ParentAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParentAssembly" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTheory" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitDiscoveryTestClasses.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties,System.String,NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEngineAdapter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitEngineAdapter.cs" line-rate="1" branch-rate="1" complexity="14">
          <methods>
            <method name="TestEngine" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestEngine" signature="(NUnit.Engine.ITestEngine)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Runner" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Runner" signature="(NUnit.Engine.ITestRunner)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EngineEnabled" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="InitializeSettingsAndLogging" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings,NUnit.VisualStudio.TestAdapter.ITestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateRunner" signature="(NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Explore" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Explore" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(NUnit.Engine.ITestEventListener,NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogTiming" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.Internal.TimingLogger,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetService" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="StopRun" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="CloseRunner" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GenerateTestOutput" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetXmlFilePath" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitEventTestCase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsTestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsParameterizedMethod" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunState" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parent" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventWrongTypeException" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitFailure" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Stacktrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInternal" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.Linq.XElement)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitResults.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="TopNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRunnable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullTopNode" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasNoNUnitTests" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhatSkipReason" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="TestCases" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEvent" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEvent.cs" line-rate="1" branch-rate="1" complexity="15">
          <methods>
            <method name="IsFailed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Label" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIgnored" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Duration" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ClassName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Output" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitAttachments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestType" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Site" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartTime" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="EndTime" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventHeader" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventHeader.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Node" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventStartTest" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventStartTest.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventSuiteFinished" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventSuiteFinished.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReasonMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailureMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasFailure" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventTestCase" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventTestCase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Failure" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReasonMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasReason" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasFailure" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailureStackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventTestOutput" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestEventTestOutput.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Stream" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestId" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsProgressStream" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsErrorStream" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNullOrEmptyStream" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Content" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestNode" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\NUnitTestNode.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Node" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Node" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Id" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNull" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Properties" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Seed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Xml.XmlNode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEngine.UnicodeEscapeHelper" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEngine\UnicodeEscapeHelper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="UnEscapeUnicodeCharacters" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryUnEscapeOneCharacter" signature="(System.String,System.Int32,System.Char&amp;,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitEventListener" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitEventListener.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name="InitializeLifetimeService" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestConverterCommon,NUnit.VisualStudio.TestAdapter.INUnit3TestExecutor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnTestEvent" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finalize" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="TestStarted" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventStartTest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestFinished" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SuiteFinished" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventSuiteFinished)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestOutput" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitTestAdapter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitTestAdapter.cs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name="Settings" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Settings" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdapterVersion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdapterVersion" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitEngineAdapter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NUnitEngineAdapter" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEngineAdapter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestLog" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestLog" signature="(NUnit.VisualStudio.TestAdapter.TestLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkDir" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WorkDir" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhoIsCallingUsEntry" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRunningUnderIde" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForbiddenFolders" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForbiddenFolders" signature="(System.Collections.Generic.List`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Initialize" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitializeForbiddenFolders" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="SetCurrentWorkingDirectory" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="CheckDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestPackage" signature="(System.String,System.Linq.IGrouping`2&lt;System.String,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetWorkDir" signature="(System.String,NUnit.Engine.TestPackage)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetTestParameters" signature="(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CleanUpRegisteredChannels" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Unload" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.NUnitTestFilterBuilder" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\NUnitTestFilterBuilder.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(NUnit.Engine.ITestFilterService,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertTfsFilterToNUnitFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter,System.Collections.Generic.IList`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertVsTestFilterToNUnitFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertVsTestFilterToNUnitFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertTfsFilterToNUnitFilter" signature="(NUnit.VisualStudio.TestAdapter.IVsTestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterByWhere" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilterByList" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.Seed" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Seed.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestConverter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestConverter.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="CollectSourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitsCache" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestLogger,System.String,NUnit.VisualStudio.TestAdapter.IAdapterSettings,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ConvertTestCase" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCachedTestCase" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetVsTestResults" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase,System.Collections.Generic.ICollection`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTestCaseFromDiscoveryNode" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDisplayName" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTestResultFromLegacyXmlNode" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase,System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetBasicResult" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent,System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FillResultFromOutputNodes" signature="(System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseAttachments" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestOutcome" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestConverterForXml" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestConverterForXml.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="CollectSourceInformation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitsCache" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.ITestLogger,System.String,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ConvertTestCase" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCachedTestCase" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetVsTestResults" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase,System.Collections.Generic.ICollection`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTestCaseFromXmlNode" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDisplayName" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTestResultFromLegacyXmlNode" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase,System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetBasicResult" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent,System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FillResultFromOutputNodes" signature="(System.Collections.Generic.IEnumerable`1&lt;NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput&gt;,Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseAttachments" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTestOutcome" signature="(NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="TestResults" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestResults" signature="(System.Collections.Generic.IList`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseResult" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCaseResult" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleOutput" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleOutput" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterCombiner" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(NUnit.Engine.TestFilter,NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFilter" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="StripFilter" signature="(NUnit.Engine.TestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterConverter.TestFilterParser" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestFilterConverter\TestFilterParser.cs" line-rate="1" branch-rate="1" complexity="20">
          <methods>
            <method name="LookAhead" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parse" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseFilterExpression" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ParseFilterTerm" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ParseFilterCondition" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="UnEscape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitFullNameFilter" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitCategoryFilter" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitNameFilter" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitFilter" signature="(System.String,NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EmitPropertyFilter" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EscapeRhsValue" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseExpressionInParentheses" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Expect" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expect" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvalidTokenError" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LookingAt" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NextToken" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="EscapeRegexChars" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="XmlEscape" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterConverter.TestFilterParserException" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestFilterConverter\TestFilterParserException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestFilterConverter\Tokenizer.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Kind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Text" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pos" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pos" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="op_Equality" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Inequality" signature="(NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token,NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestFilterConverter.Tokenizer" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestFilterConverter\Tokenizer.cs" line-rate="1" branch-rate="1" complexity="18">
          <methods>
            <method name="LookAhead" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NextChar" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NextToken" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetNextToken" signature="()" line-rate="1" branch-rate="1" complexity="9">
              <lines />
            </method>
            <method name="IsWordChar" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetWordOrFqn" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="CollectWordChars" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectBalancedParentheticalExpression" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CollectQuotedString" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetChar" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="SkipBlanks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TestLogger" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TestLogger.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="MessageLogger" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verbosity" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verbosity" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitSettings" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Error" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Error" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Warning" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Warning" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Info" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Debug" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendMessage" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SendMessage" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel,System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugRunfrom" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InfoNoTests" signature="(System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InfoNoTests" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TraitsFeature" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TraitsFeature.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="AddTrait" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTraitsFromTestNode" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,NUnit.VisualStudio.TestAdapter.ITestLogger,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddingToCache" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,System.String,NUnit.VisualStudio.TestAdapter.CategoryList,T,System.Func`5&lt;T,System.Boolean,System.String,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddTraitsFromXmlTestNode" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase,System.Collections.Generic.IDictionary`2&lt;System.String,NUnit.VisualStudio.TestAdapter.TraitsFeature/CachedTestCaseInfo&gt;,NUnit.VisualStudio.TestAdapter.ITestLogger,NUnit.VisualStudio.TestAdapter.IAdapterSettings)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTraits" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCategories" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Traits" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Explicit" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Explicit" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.TryParse" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\TryParse.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="EnumTryParse" signature="(System.String,T&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestExecution" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\Execution.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(NUnit.VisualStudio.TestAdapter.IExecutionContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter,NUnit.VisualStudio.TestAdapter.NUnit3TestExecutor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckVsTestFilter" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter,NUnit.VisualStudio.TestAdapter.IVsTestFilter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilterInCurrentMode" signature="(NUnit.Engine.TestFilter,NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckAssemblySelectLimit" signature="(NUnit.Engine.TestFilter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilter" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="TfsTestCaseFilterExpression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyValueProvider" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitContains" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="LocalPropertyProvider" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyProvider" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TraitProvider" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilterFactory" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateVsTestFilter" signature="(NUnit.VisualStudio.TestAdapter.IAdapterSettings,Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilterIde" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilterLegacy" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.VsTestFilterNonIde" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\VsTestFilter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckFilter" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="NUnit.VisualStudio.TestAdapter.XmlHelper" filename="D:\repos\NUnit\nunit3-vs-adapter\src\NUnitTestAdapter\XmlHelper.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateTopLevelElement" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateXmlNode" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToXml" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddAttribute" signature="(System.Xml.XmlNode,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddElement" signature="(System.Xml.XmlNode,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddElementWithCDataSection" signature="(System.Xml.XmlNode,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttribute" signature="(System.Xml.XmlNode,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttribute" signature="(System.Xml.XmlNode,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttribute" signature="(System.Xml.XmlNode,System.String,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetAttribute" signature="(System.Xml.XmlNode,System.String,System.DateTime)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="WindowsFormsApp1" line-rate="0.244949494949495" branch-rate="0.666666666666667" complexity="42">
      <classes>
        <class name="NumericMethodsLab1.Methods" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\Methods.cs" line-rate="0.97979797979798" branch-rate="0.8" complexity="1">
          <methods>
            <method name="Function" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="12" hits="103" branch="false" />
                <line number="13" hits="103" branch="false" />
                <line number="14" hits="103" branch="false" />
              </lines>
            </method>
            <method name="Function_Der" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="16" hits="4" branch="false" />
                <line number="17" hits="4" branch="false" />
                <line number="18" hits="4" branch="false" />
              </lines>
            </method>
            <method name="Function_Der2" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="20" hits="4" branch="false" />
                <line number="21" hits="4" branch="false" />
                <line number="22" hits="4" branch="false" />
              </lines>
            </method>
            <method name="FiFunc" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="24" hits="14" branch="false" />
                <line number="25" hits="14" branch="false" />
                <line number="26" hits="14" branch="false" />
                <line number="27" hits="14" branch="false" />
                <line number="28" hits="14" branch="false" />
              </lines>
            </method>
            <method name="FiFuncDer" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="30" hits="8" branch="false" />
                <line number="31" hits="8" branch="false" />
                <line number="32" hits="8" branch="false" />
                <line number="33" hits="8" branch="false" />
              </lines>
            </method>
            <method name="Dichotomy" signature="(System.Double,System.Double)" line-rate="1" branch-rate="0.833333333333333" complexity="NaN">
              <lines>
                <line number="36" hits="2" branch="false" />
                <line number="37" hits="2" branch="false" />
                <line number="38" hits="30" branch="true" condition-coverage="100% (2/2)" />
                <line number="39" hits="28" branch="false" />
                <line number="40" hits="28" branch="false" />
                <line number="41" hits="28" branch="true" condition-coverage="100% (2/2)" />
                <line number="42" hits="14" branch="false" />
                <line number="43" hits="14" branch="false" />
                <line number="44" hits="14" branch="false" />
                <line number="46" hits="14" branch="false" />
                <line number="47" hits="14" branch="false" />
                <line number="48" hits="14" branch="false" />
                <line number="49" hits="28" branch="false" />
                <line number="50" hits="28" branch="true" condition-coverage="50% (1/2)" />
                <line number="51" hits="28" branch="false" />
                <line number="52" hits="2" branch="false" />
                <line number="53" hits="2" branch="false" />
              </lines>
            </method>
            <method name="MNewtonMethod" signature="(System.Double,System.Double)" line-rate="0.916666666666667" branch-rate="0.75" complexity="NaN">
              <lines>
                <line number="56" hits="2" branch="false" />
                <line number="58" hits="4" branch="true" condition-coverage="50% (1/2)" />
                <line number="59" hits="0" branch="false" />
                <line number="60" hits="2" branch="false" />
                <line number="61" hits="2" branch="false" />
                <line number="63" hits="14" branch="false" />
                <line number="64" hits="14" branch="false" />
                <line number="65" hits="14" branch="false" />
                <line number="66" hits="14" branch="false" />
                <line number="67" hits="28" branch="true" condition-coverage="100% (2/2)" />
                <line number="68" hits="2" branch="false" />
                <line number="69" hits="2" branch="false" />
              </lines>
            </method>
            <method name="SimpleIteration" signature="(System.Double,System.Double,System.Double)" line-rate="0.947368421052632" branch-rate="0.833333333333333" complexity="NaN">
              <lines>
                <line number="72" hits="3" branch="false" />
                <line number="73" hits="3" branch="false" />
                <line number="74" hits="3" branch="false" />
                <line number="75" hits="3" branch="false" />
                <line number="76" hits="3" branch="true" condition-coverage="100% (2/2)" />
                <line number="77" hits="1" branch="false" />
                <line number="78" hits="1" branch="false" />
                <line number="81" hits="2" branch="true" condition-coverage="50% (1/2)" />
                <line number="82" hits="2" branch="false" />
                <line number="83" hits="2" branch="false" />
                <line number="84" hits="2" branch="false" />
                <line number="85" hits="0" branch="false" />
                <line number="88" hits="6" branch="false" />
                <line number="89" hits="6" branch="false" />
                <line number="90" hits="6" branch="false" />
                <line number="91" hits="6" branch="false" />
                <line number="92" hits="12" branch="true" condition-coverage="100% (2/2)" />
                <line number="93" hits="2" branch="false" />
                <line number="94" hits="2" branch="false" />
              </lines>
            </method>
            <method name="CheckFI" signature="(System.Double,System.Double,System.Double,System.Double)" line-rate="1" branch-rate="0.75" complexity="NaN">
              <lines>
                <line number="97" hits="5" branch="false" />
                <line number="98" hits="5" branch="true" condition-coverage="50% (1/2)" />
                <line number="99" hits="5" branch="false" />
                <line number="100" hits="5" branch="false" />
                <line number="101" hits="5" branch="true" condition-coverage="100% (2/2)" />
                <line number="102" hits="2" branch="false" />
                <line number="103" hits="2" branch="false" />
                <line number="105" hits="3" branch="false" />
                <line number="106" hits="5" branch="false" />
              </lines>
            </method>
            <method name="AprioriSI" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="109" hits="1" branch="false" />
                <line number="110" hits="1" branch="false" />
                <line number="111" hits="1" branch="false" />
                <line number="112" hits="1" branch="false" />
                <line number="113" hits="1" branch="false" />
              </lines>
            </method>
            <method name="APrioriDichotomy" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="116" hits="1" branch="false" />
                <line number="117" hits="1" branch="false" />
                <line number="118" hits="1" branch="false" />
              </lines>
            </method>
            <method name="AllRoots" signature="(System.Double,System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="121" hits="1" branch="false" />
                <line number="122" hits="1" branch="false" />
                <line number="123" hits="1" branch="false" />
                <line number="124" hits="1" branch="false" />
                <line number="125" hits="1" branch="false" />
                <line number="126" hits="1" branch="false" />
                <line number="127" hits="1" branch="false" />
              </lines>
            </method>
            <method name="KindsOfFunction" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="130" hits="1" branch="false" />
                <line number="131" hits="1" branch="false" />
                <line number="132" hits="1" branch="false" />
                <line number="133" hits="1" branch="false" />
                <line number="134" hits="1" branch="false" />
                <line number="135" hits="1" branch="false" />
              </lines>
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="8" hits="1" branch="false" />
                <line number="9" hits="3" branch="false" />
                <line number="10" hits="1" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="8" hits="1" branch="false" />
            <line number="9" hits="3" branch="false" />
            <line number="10" hits="1" branch="false" />
            <line number="12" hits="103" branch="false" />
            <line number="13" hits="103" branch="false" />
            <line number="14" hits="103" branch="false" />
            <line number="16" hits="4" branch="false" />
            <line number="17" hits="4" branch="false" />
            <line number="18" hits="4" branch="false" />
            <line number="20" hits="4" branch="false" />
            <line number="21" hits="4" branch="false" />
            <line number="22" hits="4" branch="false" />
            <line number="24" hits="14" branch="false" />
            <line number="25" hits="14" branch="false" />
            <line number="26" hits="14" branch="false" />
            <line number="27" hits="14" branch="false" />
            <line number="28" hits="14" branch="false" />
            <line number="30" hits="8" branch="false" />
            <line number="31" hits="8" branch="false" />
            <line number="32" hits="8" branch="false" />
            <line number="33" hits="8" branch="false" />
            <line number="36" hits="2" branch="false" />
            <line number="37" hits="2" branch="false" />
            <line number="38" hits="30" branch="true" condition-coverage="100% (2/2)" />
            <line number="39" hits="28" branch="false" />
            <line number="40" hits="28" branch="false" />
            <line number="41" hits="28" branch="true" condition-coverage="100% (2/2)" />
            <line number="42" hits="14" branch="false" />
            <line number="43" hits="14" branch="false" />
            <line number="44" hits="14" branch="false" />
            <line number="46" hits="14" branch="false" />
            <line number="47" hits="14" branch="false" />
            <line number="48" hits="14" branch="false" />
            <line number="49" hits="28" branch="false" />
            <line number="50" hits="28" branch="true" condition-coverage="50% (1/2)" />
            <line number="51" hits="28" branch="false" />
            <line number="52" hits="2" branch="false" />
            <line number="53" hits="2" branch="false" />
            <line number="56" hits="2" branch="false" />
            <line number="58" hits="4" branch="true" condition-coverage="50% (1/2)" />
            <line number="59" hits="0" branch="false" />
            <line number="60" hits="2" branch="false" />
            <line number="61" hits="2" branch="false" />
            <line number="63" hits="14" branch="false" />
            <line number="64" hits="14" branch="false" />
            <line number="65" hits="14" branch="false" />
            <line number="66" hits="14" branch="false" />
            <line number="67" hits="28" branch="true" condition-coverage="100% (2/2)" />
            <line number="68" hits="2" branch="false" />
            <line number="69" hits="2" branch="false" />
            <line number="72" hits="3" branch="false" />
            <line number="73" hits="3" branch="false" />
            <line number="74" hits="3" branch="false" />
            <line number="75" hits="3" branch="false" />
            <line number="76" hits="3" branch="true" condition-coverage="100% (2/2)" />
            <line number="77" hits="1" branch="false" />
            <line number="78" hits="1" branch="false" />
            <line number="81" hits="2" branch="true" condition-coverage="50% (1/2)" />
            <line number="82" hits="2" branch="false" />
            <line number="83" hits="2" branch="false" />
            <line number="84" hits="2" branch="false" />
            <line number="85" hits="0" branch="false" />
            <line number="88" hits="6" branch="false" />
            <line number="89" hits="6" branch="false" />
            <line number="90" hits="6" branch="false" />
            <line number="91" hits="6" branch="false" />
            <line number="92" hits="12" branch="true" condition-coverage="100% (2/2)" />
            <line number="93" hits="2" branch="false" />
            <line number="94" hits="2" branch="false" />
            <line number="97" hits="5" branch="false" />
            <line number="98" hits="5" branch="true" condition-coverage="50% (1/2)" />
            <line number="99" hits="5" branch="false" />
            <line number="100" hits="5" branch="false" />
            <line number="101" hits="5" branch="true" condition-coverage="100% (2/2)" />
            <line number="102" hits="2" branch="false" />
            <line number="103" hits="2" branch="false" />
            <line number="105" hits="3" branch="false" />
            <line number="106" hits="5" branch="false" />
            <line number="109" hits="1" branch="false" />
            <line number="110" hits="1" branch="false" />
            <line number="111" hits="1" branch="false" />
            <line number="112" hits="1" branch="false" />
            <line number="113" hits="1" branch="false" />
            <line number="116" hits="1" branch="false" />
            <line number="117" hits="1" branch="false" />
            <line number="118" hits="1" branch="false" />
            <line number="121" hits="1" branch="false" />
            <line number="122" hits="1" branch="false" />
            <line number="123" hits="1" branch="false" />
            <line number="124" hits="1" branch="false" />
            <line number="125" hits="1" branch="false" />
            <line number="126" hits="1" branch="false" />
            <line number="127" hits="1" branch="false" />
            <line number="130" hits="1" branch="false" />
            <line number="131" hits="1" branch="false" />
            <line number="132" hits="1" branch="false" />
            <line number="133" hits="1" branch="false" />
            <line number="134" hits="1" branch="false" />
            <line number="135" hits="1" branch="false" />
          </lines>
        </class>
        <class name="NumericMethodsLab1.NumericMethods" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\NumericMethods.cs" line-rate="0" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Form1_Load" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="25" hits="0" branch="false" />
                <line number="27" hits="0" branch="false" />
              </lines>
            </method>
            <method name="label1_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="30" hits="0" branch="false" />
                <line number="32" hits="0" branch="false" />
              </lines>
            </method>
            <method name="label3_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="35" hits="0" branch="false" />
                <line number="37" hits="0" branch="false" />
              </lines>
            </method>
            <method name="label5_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="40" hits="0" branch="false" />
                <line number="42" hits="0" branch="false" />
              </lines>
            </method>
            <method name="dichotomyAprior_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="45" hits="0" branch="false" />
                <line number="47" hits="0" branch="false" />
              </lines>
            </method>
            <method name="dichotomy_checkbox_CheckedChanged" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="50" hits="0" branch="false" />
                <line number="52" hits="0" branch="false" />
              </lines>
            </method>
            <method name="checkBox1_CheckedChanged" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="55" hits="0" branch="false" />
                <line number="57" hits="0" branch="false" />
              </lines>
            </method>
            <method name="checkBox2_CheckedChanged" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="60" hits="0" branch="false" />
                <line number="62" hits="0" branch="false" />
              </lines>
            </method>
            <method name="button2_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="65" hits="0" branch="false" />
                <line number="67" hits="0" branch="false" />
                <line number="68" hits="0" branch="false" />
                <line number="69" hits="0" branch="false" />
                <line number="70" hits="0" branch="false" />
                <line number="71" hits="0" branch="false" />
                <line number="72" hits="0" branch="false" />
                <line number="73" hits="0" branch="false" />
                <line number="74" hits="0" branch="false" />
              </lines>
            </method>
            <method name="button3_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="77" hits="0" branch="false" />
                <line number="79" hits="0" branch="false" />
                <line number="80" hits="0" branch="false" />
                <line number="81" hits="0" branch="false" />
                <line number="82" hits="0" branch="false" />
                <line number="83" hits="0" branch="false" />
                <line number="84" hits="0" branch="false" />
                <line number="85" hits="0" branch="false" />
                <line number="86" hits="0" branch="false" />
                <line number="87" hits="0" branch="false" />
              </lines>
            </method>
            <method name="button4_Click" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="90" hits="0" branch="false" />
                <line number="92" hits="0" branch="false" />
                <line number="93" hits="0" branch="false" />
                <line number="94" hits="0" branch="false" />
                <line number="95" hits="0" branch="false" />
                <line number="96" hits="0" branch="false" />
                <line number="97" hits="0" branch="false" />
                <line number="98" hits="0" branch="false" />
                <line number="99" hits="0" branch="false" />
                <line number="100" hits="0" branch="false" />
                <line number="101" hits="0" branch="false" />
              </lines>
            </method>
            <method name="label3_Click_1" signature="(System.Object,System.EventArgs)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="104" hits="0" branch="false" />
                <line number="106" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="15" hits="0" branch="false" />
            <line number="16" hits="0" branch="false" />
            <line number="17" hits="0" branch="false" />
            <line number="18" hits="0" branch="false" />
            <line number="19" hits="0" branch="false" />
            <line number="20" hits="0" branch="false" />
            <line number="22" hits="0" branch="false" />
            <line number="25" hits="0" branch="false" />
            <line number="27" hits="0" branch="false" />
            <line number="30" hits="0" branch="false" />
            <line number="32" hits="0" branch="false" />
            <line number="35" hits="0" branch="false" />
            <line number="37" hits="0" branch="false" />
            <line number="40" hits="0" branch="false" />
            <line number="42" hits="0" branch="false" />
            <line number="45" hits="0" branch="false" />
            <line number="47" hits="0" branch="false" />
            <line number="50" hits="0" branch="false" />
            <line number="52" hits="0" branch="false" />
            <line number="55" hits="0" branch="false" />
            <line number="57" hits="0" branch="false" />
            <line number="60" hits="0" branch="false" />
            <line number="62" hits="0" branch="false" />
            <line number="65" hits="0" branch="false" />
            <line number="67" hits="0" branch="false" />
            <line number="68" hits="0" branch="false" />
            <line number="69" hits="0" branch="false" />
            <line number="70" hits="0" branch="false" />
            <line number="71" hits="0" branch="false" />
            <line number="72" hits="0" branch="false" />
            <line number="73" hits="0" branch="false" />
            <line number="74" hits="0" branch="false" />
            <line number="77" hits="0" branch="false" />
            <line number="79" hits="0" branch="false" />
            <line number="80" hits="0" branch="false" />
            <line number="81" hits="0" branch="false" />
            <line number="82" hits="0" branch="false" />
            <line number="83" hits="0" branch="false" />
            <line number="84" hits="0" branch="false" />
            <line number="85" hits="0" branch="false" />
            <line number="86" hits="0" branch="false" />
            <line number="87" hits="0" branch="false" />
            <line number="90" hits="0" branch="false" />
            <line number="92" hits="0" branch="false" />
            <line number="93" hits="0" branch="false" />
            <line number="94" hits="0" branch="false" />
            <line number="95" hits="0" branch="false" />
            <line number="96" hits="0" branch="false" />
            <line number="97" hits="0" branch="false" />
            <line number="98" hits="0" branch="false" />
            <line number="99" hits="0" branch="false" />
            <line number="100" hits="0" branch="false" />
            <line number="101" hits="0" branch="false" />
            <line number="104" hits="0" branch="false" />
            <line number="106" hits="0" branch="false" />
          </lines>
        </class>
        <class name="NumericMethodsLab1.NumericMethods" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\NumericMethods.Designer.cs" line-rate="0" branch-rate="0" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="0" branch-rate="0" complexity="1">
              <lines>
                <line number="8" hits="0" branch="false" />
                <line number="15" hits="0" branch="false" />
                <line number="16" hits="0" branch="true" condition-coverage="0% (0/4)" />
                <line number="17" hits="0" branch="false" />
                <line number="18" hits="0" branch="false" />
                <line number="19" hits="0" branch="false" />
                <line number="20" hits="0" branch="false" />
                <line number="21" hits="0" branch="false" />
              </lines>
            </method>
            <method name="Dispose" signature="(System.Boolean)" line-rate="0" branch-rate="0" complexity="NaN">
              <lines>
                <line number="15" hits="0" branch="false" />
                <line number="16" hits="0" branch="true" condition-coverage="0% (0/4)" />
                <line number="17" hits="0" branch="false" />
                <line number="18" hits="0" branch="false" />
                <line number="19" hits="0" branch="false" />
                <line number="20" hits="0" branch="false" />
                <line number="21" hits="0" branch="false" />
              </lines>
            </method>
            <method name="InitializeComponent" signature="()" line-rate="0" branch-rate="1" complexity="1">
              <lines>
                <line number="30" hits="0" branch="false" />
                <line number="31" hits="0" branch="false" />
                <line number="32" hits="0" branch="false" />
                <line number="33" hits="0" branch="false" />
                <line number="34" hits="0" branch="false" />
                <line number="35" hits="0" branch="false" />
                <line number="36" hits="0" branch="false" />
                <line number="37" hits="0" branch="false" />
                <line number="38" hits="0" branch="false" />
                <line number="39" hits="0" branch="false" />
                <line number="40" hits="0" branch="false" />
                <line number="41" hits="0" branch="false" />
                <line number="42" hits="0" branch="false" />
                <line number="43" hits="0" branch="false" />
                <line number="44" hits="0" branch="false" />
                <line number="45" hits="0" branch="false" />
                <line number="46" hits="0" branch="false" />
                <line number="47" hits="0" branch="false" />
                <line number="48" hits="0" branch="false" />
                <line number="49" hits="0" branch="false" />
                <line number="50" hits="0" branch="false" />
                <line number="51" hits="0" branch="false" />
                <line number="52" hits="0" branch="false" />
                <line number="53" hits="0" branch="false" />
                <line number="54" hits="0" branch="false" />
                <line number="55" hits="0" branch="false" />
                <line number="56" hits="0" branch="false" />
                <line number="57" hits="0" branch="false" />
                <line number="58" hits="0" branch="false" />
                <line number="59" hits="0" branch="false" />
                <line number="60" hits="0" branch="false" />
                <line number="61" hits="0" branch="false" />
                <line number="65" hits="0" branch="false" />
                <line number="66" hits="0" branch="false" />
                <line number="67" hits="0" branch="false" />
                <line number="68" hits="0" branch="false" />
                <line number="69" hits="0" branch="false" />
                <line number="70" hits="0" branch="false" />
                <line number="71" hits="0" branch="false" />
                <line number="72" hits="0" branch="false" />
                <line number="73" hits="0" branch="false" />
                <line number="77" hits="0" branch="false" />
                <line number="78" hits="0" branch="false" />
                <line number="79" hits="0" branch="false" />
                <line number="80" hits="0" branch="false" />
                <line number="81" hits="0" branch="false" />
                <line number="85" hits="0" branch="false" />
                <line number="86" hits="0" branch="false" />
                <line number="87" hits="0" branch="false" />
                <line number="88" hits="0" branch="false" />
                <line number="89" hits="0" branch="false" />
                <line number="90" hits="0" branch="false" />
                <line number="91" hits="0" branch="false" />
                <line number="92" hits="0" branch="false" />
                <line number="96" hits="0" branch="false" />
                <line number="97" hits="0" branch="false" />
                <line number="98" hits="0" branch="false" />
                <line number="99" hits="0" branch="false" />
                <line number="100" hits="0" branch="false" />
                <line number="101" hits="0" branch="false" />
                <line number="102" hits="0" branch="false" />
                <line number="103" hits="0" branch="false" />
                <line number="107" hits="0" branch="false" />
                <line number="108" hits="0" branch="false" />
                <line number="109" hits="0" branch="false" />
                <line number="110" hits="0" branch="false" />
                <line number="111" hits="0" branch="false" />
                <line number="112" hits="0" branch="false" />
                <line number="113" hits="0" branch="false" />
                <line number="117" hits="0" branch="false" />
                <line number="118" hits="0" branch="false" />
                <line number="119" hits="0" branch="false" />
                <line number="120" hits="0" branch="false" />
                <line number="121" hits="0" branch="false" />
                <line number="122" hits="0" branch="false" />
                <line number="123" hits="0" branch="false" />
                <line number="127" hits="0" branch="false" />
                <line number="128" hits="0" branch="false" />
                <line number="129" hits="0" branch="false" />
                <line number="130" hits="0" branch="false" />
                <line number="131" hits="0" branch="false" />
                <line number="132" hits="0" branch="false" />
                <line number="133" hits="0" branch="false" />
                <line number="137" hits="0" branch="false" />
                <line number="138" hits="0" branch="false" />
                <line number="139" hits="0" branch="false" />
                <line number="140" hits="0" branch="false" />
                <line number="141" hits="0" branch="false" />
                <line number="142" hits="0" branch="false" />
                <line number="143" hits="0" branch="false" />
                <line number="147" hits="0" branch="false" />
                <line number="148" hits="0" branch="false" />
                <line number="149" hits="0" branch="false" />
                <line number="150" hits="0" branch="false" />
                <line number="151" hits="0" branch="false" />
                <line number="152" hits="0" branch="false" />
                <line number="153" hits="0" branch="false" />
                <line number="157" hits="0" branch="false" />
                <line number="158" hits="0" branch="false" />
                <line number="159" hits="0" branch="false" />
                <line number="160" hits="0" branch="false" />
                <line number="161" hits="0" branch="false" />
                <line number="162" hits="0" branch="false" />
                <line number="163" hits="0" branch="false" />
                <line number="167" hits="0" branch="false" />
                <line number="168" hits="0" branch="false" />
                <line number="169" hits="0" branch="false" />
                <line number="170" hits="0" branch="false" />
                <line number="171" hits="0" branch="false" />
                <line number="172" hits="0" branch="false" />
                <line number="173" hits="0" branch="false" />
                <line number="177" hits="0" branch="false" />
                <line number="178" hits="0" branch="false" />
                <line number="179" hits="0" branch="false" />
                <line number="180" hits="0" branch="false" />
                <line number="181" hits="0" branch="false" />
                <line number="182" hits="0" branch="false" />
                <line number="183" hits="0" branch="false" />
                <line number="187" hits="0" branch="false" />
                <line number="188" hits="0" branch="false" />
                <line number="189" hits="0" branch="false" />
                <line number="190" hits="0" branch="false" />
                <line number="191" hits="0" branch="false" />
                <line number="192" hits="0" branch="false" />
                <line number="193" hits="0" branch="false" />
                <line number="194" hits="0" branch="false" />
                <line number="195" hits="0" branch="false" />
                <line number="196" hits="0" branch="false" />
                <line number="200" hits="0" branch="false" />
                <line number="201" hits="0" branch="false" />
                <line number="202" hits="0" branch="false" />
                <line number="203" hits="0" branch="false" />
                <line number="204" hits="0" branch="false" />
                <line number="205" hits="0" branch="false" />
                <line number="206" hits="0" branch="false" />
                <line number="207" hits="0" branch="false" />
                <line number="208" hits="0" branch="false" />
                <line number="209" hits="0" branch="false" />
                <line number="213" hits="0" branch="false" />
                <line number="214" hits="0" branch="false" />
                <line number="215" hits="0" branch="false" />
                <line number="216" hits="0" branch="false" />
                <line number="217" hits="0" branch="false" />
                <line number="218" hits="0" branch="false" />
                <line number="219" hits="0" branch="false" />
                <line number="220" hits="0" branch="false" />
                <line number="221" hits="0" branch="false" />
                <line number="222" hits="0" branch="false" />
                <line number="226" hits="0" branch="false" />
                <line number="227" hits="0" branch="false" />
                <line number="228" hits="0" branch="false" />
                <line number="229" hits="0" branch="false" />
                <line number="230" hits="0" branch="false" />
                <line number="231" hits="0" branch="false" />
                <line number="232" hits="0" branch="false" />
                <line number="236" hits="0" branch="false" />
                <line number="237" hits="0" branch="false" />
                <line number="238" hits="0" branch="false" />
                <line number="239" hits="0" branch="false" />
                <line number="240" hits="0" branch="false" />
                <line number="241" hits="0" branch="false" />
                <line number="242" hits="0" branch="false" />
                <line number="246" hits="0" branch="false" />
                <line number="247" hits="0" branch="false" />
                <line number="248" hits="0" branch="false" />
                <line number="249" hits="0" branch="false" />
                <line number="250" hits="0" branch="false" />
                <line number="251" hits="0" branch="false" />
                <line number="252" hits="0" branch="false" />
                <line number="256" hits="0" branch="false" />
                <line number="257" hits="0" branch="false" />
                <line number="258" hits="0" branch="false" />
                <line number="259" hits="0" branch="false" />
                <line number="260" hits="0" branch="false" />
                <line number="261" hits="0" branch="false" />
                <line number="262" hits="0" branch="false" />
                <line number="266" hits="0" branch="false" />
                <line number="267" hits="0" branch="false" />
                <line number="268" hits="0" branch="false" />
                <line number="269" hits="0" branch="false" />
                <line number="270" hits="0" branch="false" />
                <line number="271" hits="0" branch="false" />
                <line number="272" hits="0" branch="false" />
                <line number="276" hits="0" branch="false" />
                <line number="280" hits="0" branch="false" />
                <line number="281" hits="0" branch="false" />
                <line number="282" hits="0" branch="false" />
                <line number="283" hits="0" branch="false" />
                <line number="284" hits="0" branch="false" />
                <line number="285" hits="0" branch="false" />
                <line number="286" hits="0" branch="false" />
                <line number="287" hits="0" branch="false" />
                <line number="291" hits="0" branch="false" />
                <line number="292" hits="0" branch="false" />
                <line number="293" hits="0" branch="false" />
                <line number="294" hits="0" branch="false" />
                <line number="295" hits="0" branch="false" />
                <line number="296" hits="0" branch="false" />
                <line number="297" hits="0" branch="false" />
                <line number="298" hits="0" branch="false" />
                <line number="299" hits="0" branch="false" />
                <line number="300" hits="0" branch="false" />
                <line number="301" hits="0" branch="false" />
                <line number="302" hits="0" branch="false" />
                <line number="303" hits="0" branch="false" />
                <line number="304" hits="0" branch="false" />
                <line number="305" hits="0" branch="false" />
                <line number="306" hits="0" branch="false" />
                <line number="307" hits="0" branch="false" />
                <line number="308" hits="0" branch="false" />
                <line number="309" hits="0" branch="false" />
                <line number="310" hits="0" branch="false" />
                <line number="311" hits="0" branch="false" />
                <line number="312" hits="0" branch="false" />
                <line number="313" hits="0" branch="false" />
                <line number="314" hits="0" branch="false" />
                <line number="315" hits="0" branch="false" />
                <line number="316" hits="0" branch="false" />
                <line number="317" hits="0" branch="false" />
                <line number="318" hits="0" branch="false" />
                <line number="319" hits="0" branch="false" />
                <line number="320" hits="0" branch="false" />
                <line number="321" hits="0" branch="false" />
                <line number="322" hits="0" branch="false" />
                <line number="323" hits="0" branch="false" />
                <line number="324" hits="0" branch="false" />
                <line number="325" hits="0" branch="false" />
                <line number="326" hits="0" branch="false" />
                <line number="328" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="8" hits="0" branch="false" />
            <line number="15" hits="0" branch="false" />
            <line number="16" hits="0" branch="true" condition-coverage="0% (0/4)" />
            <line number="17" hits="0" branch="false" />
            <line number="18" hits="0" branch="false" />
            <line number="19" hits="0" branch="false" />
            <line number="20" hits="0" branch="false" />
            <line number="21" hits="0" branch="false" />
            <line number="30" hits="0" branch="false" />
            <line number="31" hits="0" branch="false" />
            <line number="32" hits="0" branch="false" />
            <line number="33" hits="0" branch="false" />
            <line number="34" hits="0" branch="false" />
            <line number="35" hits="0" branch="false" />
            <line number="36" hits="0" branch="false" />
            <line number="37" hits="0" branch="false" />
            <line number="38" hits="0" branch="false" />
            <line number="39" hits="0" branch="false" />
            <line number="40" hits="0" branch="false" />
            <line number="41" hits="0" branch="false" />
            <line number="42" hits="0" branch="false" />
            <line number="43" hits="0" branch="false" />
            <line number="44" hits="0" branch="false" />
            <line number="45" hits="0" branch="false" />
            <line number="46" hits="0" branch="false" />
            <line number="47" hits="0" branch="false" />
            <line number="48" hits="0" branch="false" />
            <line number="49" hits="0" branch="false" />
            <line number="50" hits="0" branch="false" />
            <line number="51" hits="0" branch="false" />
            <line number="52" hits="0" branch="false" />
            <line number="53" hits="0" branch="false" />
            <line number="54" hits="0" branch="false" />
            <line number="55" hits="0" branch="false" />
            <line number="56" hits="0" branch="false" />
            <line number="57" hits="0" branch="false" />
            <line number="58" hits="0" branch="false" />
            <line number="59" hits="0" branch="false" />
            <line number="60" hits="0" branch="false" />
            <line number="61" hits="0" branch="false" />
            <line number="65" hits="0" branch="false" />
            <line number="66" hits="0" branch="false" />
            <line number="67" hits="0" branch="false" />
            <line number="68" hits="0" branch="false" />
            <line number="69" hits="0" branch="false" />
            <line number="70" hits="0" branch="false" />
            <line number="71" hits="0" branch="false" />
            <line number="72" hits="0" branch="false" />
            <line number="73" hits="0" branch="false" />
            <line number="77" hits="0" branch="false" />
            <line number="78" hits="0" branch="false" />
            <line number="79" hits="0" branch="false" />
            <line number="80" hits="0" branch="false" />
            <line number="81" hits="0" branch="false" />
            <line number="85" hits="0" branch="false" />
            <line number="86" hits="0" branch="false" />
            <line number="87" hits="0" branch="false" />
            <line number="88" hits="0" branch="false" />
            <line number="89" hits="0" branch="false" />
            <line number="90" hits="0" branch="false" />
            <line number="91" hits="0" branch="false" />
            <line number="92" hits="0" branch="false" />
            <line number="96" hits="0" branch="false" />
            <line number="97" hits="0" branch="false" />
            <line number="98" hits="0" branch="false" />
            <line number="99" hits="0" branch="false" />
            <line number="100" hits="0" branch="false" />
            <line number="101" hits="0" branch="false" />
            <line number="102" hits="0" branch="false" />
            <line number="103" hits="0" branch="false" />
            <line number="107" hits="0" branch="false" />
            <line number="108" hits="0" branch="false" />
            <line number="109" hits="0" branch="false" />
            <line number="110" hits="0" branch="false" />
            <line number="111" hits="0" branch="false" />
            <line number="112" hits="0" branch="false" />
            <line number="113" hits="0" branch="false" />
            <line number="117" hits="0" branch="false" />
            <line number="118" hits="0" branch="false" />
            <line number="119" hits="0" branch="false" />
            <line number="120" hits="0" branch="false" />
            <line number="121" hits="0" branch="false" />
            <line number="122" hits="0" branch="false" />
            <line number="123" hits="0" branch="false" />
            <line number="127" hits="0" branch="false" />
            <line number="128" hits="0" branch="false" />
            <line number="129" hits="0" branch="false" />
            <line number="130" hits="0" branch="false" />
            <line number="131" hits="0" branch="false" />
            <line number="132" hits="0" branch="false" />
            <line number="133" hits="0" branch="false" />
            <line number="137" hits="0" branch="false" />
            <line number="138" hits="0" branch="false" />
            <line number="139" hits="0" branch="false" />
            <line number="140" hits="0" branch="false" />
            <line number="141" hits="0" branch="false" />
            <line number="142" hits="0" branch="false" />
            <line number="143" hits="0" branch="false" />
            <line number="147" hits="0" branch="false" />
            <line number="148" hits="0" branch="false" />
            <line number="149" hits="0" branch="false" />
            <line number="150" hits="0" branch="false" />
            <line number="151" hits="0" branch="false" />
            <line number="152" hits="0" branch="false" />
            <line number="153" hits="0" branch="false" />
            <line number="157" hits="0" branch="false" />
            <line number="158" hits="0" branch="false" />
            <line number="159" hits="0" branch="false" />
            <line number="160" hits="0" branch="false" />
            <line number="161" hits="0" branch="false" />
            <line number="162" hits="0" branch="false" />
            <line number="163" hits="0" branch="false" />
            <line number="167" hits="0" branch="false" />
            <line number="168" hits="0" branch="false" />
            <line number="169" hits="0" branch="false" />
            <line number="170" hits="0" branch="false" />
            <line number="171" hits="0" branch="false" />
            <line number="172" hits="0" branch="false" />
            <line number="173" hits="0" branch="false" />
            <line number="177" hits="0" branch="false" />
            <line number="178" hits="0" branch="false" />
            <line number="179" hits="0" branch="false" />
            <line number="180" hits="0" branch="false" />
            <line number="181" hits="0" branch="false" />
            <line number="182" hits="0" branch="false" />
            <line number="183" hits="0" branch="false" />
            <line number="187" hits="0" branch="false" />
            <line number="188" hits="0" branch="false" />
            <line number="189" hits="0" branch="false" />
            <line number="190" hits="0" branch="false" />
            <line number="191" hits="0" branch="false" />
            <line number="192" hits="0" branch="false" />
            <line number="193" hits="0" branch="false" />
            <line number="194" hits="0" branch="false" />
            <line number="195" hits="0" branch="false" />
            <line number="196" hits="0" branch="false" />
            <line number="200" hits="0" branch="false" />
            <line number="201" hits="0" branch="false" />
            <line number="202" hits="0" branch="false" />
            <line number="203" hits="0" branch="false" />
            <line number="204" hits="0" branch="false" />
            <line number="205" hits="0" branch="false" />
            <line number="206" hits="0" branch="false" />
            <line number="207" hits="0" branch="false" />
            <line number="208" hits="0" branch="false" />
            <line number="209" hits="0" branch="false" />
            <line number="213" hits="0" branch="false" />
            <line number="214" hits="0" branch="false" />
            <line number="215" hits="0" branch="false" />
            <line number="216" hits="0" branch="false" />
            <line number="217" hits="0" branch="false" />
            <line number="218" hits="0" branch="false" />
            <line number="219" hits="0" branch="false" />
            <line number="220" hits="0" branch="false" />
            <line number="221" hits="0" branch="false" />
            <line number="222" hits="0" branch="false" />
            <line number="226" hits="0" branch="false" />
            <line number="227" hits="0" branch="false" />
            <line number="228" hits="0" branch="false" />
            <line number="229" hits="0" branch="false" />
            <line number="230" hits="0" branch="false" />
            <line number="231" hits="0" branch="false" />
            <line number="232" hits="0" branch="false" />
            <line number="236" hits="0" branch="false" />
            <line number="237" hits="0" branch="false" />
            <line number="238" hits="0" branch="false" />
            <line number="239" hits="0" branch="false" />
            <line number="240" hits="0" branch="false" />
            <line number="241" hits="0" branch="false" />
            <line number="242" hits="0" branch="false" />
            <line number="246" hits="0" branch="false" />
            <line number="247" hits="0" branch="false" />
            <line number="248" hits="0" branch="false" />
            <line number="249" hits="0" branch="false" />
            <line number="250" hits="0" branch="false" />
            <line number="251" hits="0" branch="false" />
            <line number="252" hits="0" branch="false" />
            <line number="256" hits="0" branch="false" />
            <line number="257" hits="0" branch="false" />
            <line number="258" hits="0" branch="false" />
            <line number="259" hits="0" branch="false" />
            <line number="260" hits="0" branch="false" />
            <line number="261" hits="0" branch="false" />
            <line number="262" hits="0" branch="false" />
            <line number="266" hits="0" branch="false" />
            <line number="267" hits="0" branch="false" />
            <line number="268" hits="0" branch="false" />
            <line number="269" hits="0" branch="false" />
            <line number="270" hits="0" branch="false" />
            <line number="271" hits="0" branch="false" />
            <line number="272" hits="0" branch="false" />
            <line number="276" hits="0" branch="false" />
            <line number="280" hits="0" branch="false" />
            <line number="281" hits="0" branch="false" />
            <line number="282" hits="0" branch="false" />
            <line number="283" hits="0" branch="false" />
            <line number="284" hits="0" branch="false" />
            <line number="285" hits="0" branch="false" />
            <line number="286" hits="0" branch="false" />
            <line number="287" hits="0" branch="false" />
            <line number="291" hits="0" branch="false" />
            <line number="292" hits="0" branch="false" />
            <line number="293" hits="0" branch="false" />
            <line number="294" hits="0" branch="false" />
            <line number="295" hits="0" branch="false" />
            <line number="296" hits="0" branch="false" />
            <line number="297" hits="0" branch="false" />
            <line number="298" hits="0" branch="false" />
            <line number="299" hits="0" branch="false" />
            <line number="300" hits="0" branch="false" />
            <line number="301" hits="0" branch="false" />
            <line number="302" hits="0" branch="false" />
            <line number="303" hits="0" branch="false" />
            <line number="304" hits="0" branch="false" />
            <line number="305" hits="0" branch="false" />
            <line number="306" hits="0" branch="false" />
            <line number="307" hits="0" branch="false" />
            <line number="308" hits="0" branch="false" />
            <line number="309" hits="0" branch="false" />
            <line number="310" hits="0" branch="false" />
            <line number="311" hits="0" branch="false" />
            <line number="312" hits="0" branch="false" />
            <line number="313" hits="0" branch="false" />
            <line number="314" hits="0" branch="false" />
            <line number="315" hits="0" branch="false" />
            <line number="316" hits="0" branch="false" />
            <line number="317" hits="0" branch="false" />
            <line number="318" hits="0" branch="false" />
            <line number="319" hits="0" branch="false" />
            <line number="320" hits="0" branch="false" />
            <line number="321" hits="0" branch="false" />
            <line number="322" hits="0" branch="false" />
            <line number="323" hits="0" branch="false" />
            <line number="324" hits="0" branch="false" />
            <line number="325" hits="0" branch="false" />
            <line number="326" hits="0" branch="false" />
            <line number="328" hits="0" branch="false" />
          </lines>
        </class>
        <class name="NumericMethodsLab1.Program" filename="D:\c#\NumericMethodsLab1\WindowsFormsApp1\Program.cs" line-rate="0" branch-rate="1" complexity="1">
          <methods>
            <method name="Main" signature="()" line-rate="0" branch-rate="1" complexity="1">
              <lines>
                <line number="13" hits="0" branch="false" />
                <line number="14" hits="0" branch="false" />
                <line number="15" hits="0" branch="false" />
                <line number="16" hits="0" branch="false" />
                <line number="17" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="13" hits="0" branch="false" />
            <line number="14" hits="0" branch="false" />
            <line number="15" hits="0" branch="false" />
            <line number="16" hits="0" branch="false" />
            <line number="17" hits="0" branch="false" />
          </lines>
        </class>
      </classes>
    </package>
  </packages>
</coverage>